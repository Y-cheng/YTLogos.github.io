<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[R语言可视化之UpSetR包]]></title>
    <url>%2F2017%2F10%2F15%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8BUpSetR%E5%8C%85%2F</url>
    <content type="text"><![CDATA[简介集合可视化我们用得最多的是韦恩图，韦恩图在集合数少的时候是很好用的，但是当集合数多比如五个以上的时候那就会看花眼了，比如下面这副含有6个集合韦恩图，是发表在Nature上的文章里的，漂亮是漂亮，但是眼都快看花了。 今天介绍一个R包UpSetR，专门用来集合可视化，来源于UpSet，Python里面也有一个相似的包py-upset。此外还有个UpSetR shiny app以及源代码. 安装两种方式安装： 1234#从CRAN安装install.packages(&quot;UpSetR&quot;)#从Github上安装devtools::install_github(&quot;hms-dbmi/UpSetR&quot;) 数据导入UpSetR提供了两个函数fromList以及fromExpression将数据转换为UpsetR适用的数据格式。 123456#fromListlistinput &lt;- list(one = c(1, 2, 3, 5, 7, 8, 11, 12, 13), two = c(1, 2, 4, 5, 10), three = c(1, 5, 6, 7, 8, 9, 10, 12, 13))#fromExpressionexpressionInput &lt;- c(one = 2, two = 1, three = 2, `one&amp;two` = 1, `one&amp;three` = 4, `two&amp;three` = 1, `one&amp;two&amp;three` = 2) 接下来就可以绘制绘制图形了1234library(UpSetR)upset(fromList(listinput), order.by = &quot;freq&quot;)#下面绘制的图形等同于上图upset(fromExpression(expressionInput), order.by = &quot;freq&quot;) 参数详解下面所有的例子都将使用UpSetR内置的数据集movies来绘制。 1234#导入数据movies &lt;- read.csv(system.file(&quot;extdata&quot;, &quot;movies.csv&quot;, package = &quot;UpSetR&quot;), header = TRUE, sep = &quot;;&quot;)#先大致浏览一下该数据集,数据集太长，就只看前几列knitr::kable(head(movies[,1:10])) 该数据集展示的是电影名（name）、发行时间（ReleaseDate）以及电影类型，多了去了就不详讲了，自个可以看去。UpsetR绘制集合可视化图形使用函数upset()。1upset(movies, nsets = 6, number.angles = 30, point.size = 2, line.size = 1, mainbar.y.label = &quot;Genre Intersections&quot;, sets.x.label = &quot;Movies Per Genre&quot;, text.scale = c(1.3, 1.3, 1, 1, 1.5, 1)) 解释一下上面部分参数： nsets: 顾名思义，就是展示几个集合，movies数据集由20几个集合，不可能全部展示，另外从图中可以看出，这6个集合应该不是按顺序选择的。 numble.angle: 柱子上的数字看到了吧，这个参数就是调整数字角度的，可有可无的 mainbar.y.label/sets.x.label：坐标轴名称 text.scale(): 有六个数字，分别控制c(intersection size title, intersection size tick labels, set size title, set size tick labels, set names, numbers above bars)。 很多时候我们想要看特定的几个集合，UpSetR满足我们的需求。12upset(movies, sets = c(&quot;Action&quot;, &quot;Adventure&quot;, &quot;Comedy&quot;, &quot;Drama&quot;, &quot;Mystery&quot;, &quot;Thriller&quot;, &quot;Romance&quot;, &quot;War&quot;, &quot;Western&quot;), mb.ratio = c(0.55, 0.45), order.by = &quot;freq&quot;) 文中的参数： mb.ratio: 控制上方条形图以及下方点图的比例 order.by: 如何排序，这里freq表示从大到小排序展示，其他选项有degree以及先按freq再按degree排序。 各个变量也可以通过参数keep.order来排序123upset(movies, sets = c(&quot;Action&quot;, &quot;Adventure&quot;, &quot;Comedy&quot;, &quot;Drama&quot;, &quot;Mystery&quot;, &quot;Thriller&quot;, &quot;Romance&quot;, &quot;War&quot;, &quot;Western&quot;), mb.ratio = c(0.55, 0.45), order.by = &quot;freq&quot;, keep.order = TRUE) 也可以按group进行展示，这图展示的就是按各个变量自身、两个交集、三个交集…依次展示。参数cutoff控制每个group显示几个交集。参数intersects控制总共显示几个交集。 1upset(movies, nintersects = 70, group.by = &quot;sets&quot;, cutoff = 7) 还有很多参数比如控制颜色的参数，点、线大小等，具体可查看?upset queries参数queries参数分为四个部分：query, param, color, active. query: 指定哪个query，UpSetR有内置的，也可以自定义，说到底就是一个查询函数 param: list, query作用于哪个交集 color：每个query都是一个list，里面可以设置颜色,没设置的话将调用包里默认的调色板 active：被指定的条形图是否需要颜色覆盖，TRUE的话显示颜色，FALSE的话则在条形图顶端显示三角形 内置的intersects query123upset(movies, queries = list(list(query=intersects, params=list(&quot;Drama&quot;, &quot;Comedy&quot;, &quot;Action&quot;), color=&quot;orange&quot;, active=T), list(query=intersects, params=list(&quot;Drama&quot;), color=&quot;red&quot;, active=F), list(query=intersects, params=list(&quot;Action&quot;, &quot;Drama&quot;), active=T))) 内置的elements query此query可以可视化特定交集在不同条件下的情况 12upset(movies, queries = list(list(query=elements, params=list(&quot;AvgRating&quot;, 3.5, 4.1), color=&quot;blue&quot;, active=T), list(query=elements, params=list(&quot;ReleaseDate&quot;, 1980, 1990, 2000), color=&quot;red&quot;, active=F))) 自定义一个query1234myfunc &lt;- function(row, release, rating)&#123; newdata &lt;- (row[&quot;ReleaseDate&quot;]%in%release)&amp;(row[&quot;AvgRating&quot;]&gt;rating)&#125;upset(movies, queries = list(list(query=myfunc, params=list(c(1950,1960,1990,2000), 3.0), color=&quot;red&quot;, active=T))) 添加query图例12345upset(movies, query.legend = &quot;top&quot;, queries = list(list(query = intersects, params = list(&quot;Drama&quot;, &quot;Comedy&quot;, &quot;Action&quot;), color = &quot;orange&quot;, active = T, query.name = &quot;Funny action&quot;), list(query = intersects, params = list(&quot;Drama&quot;), color = &quot;red&quot;, active = F), list(query = intersects, params = list(&quot;Action&quot;, &quot;Drama&quot;), active = T, query.name = &quot;Emotional action&quot;))) 参数attribute.plots主要是用于添加属性图，内置有柱形图、散点图、热图等 柱形图1234upset(movies, main.bar.color = &quot;black&quot;, queries = list(list(query = intersects, params = list(&quot;Drama&quot;), active = T)), attribute.plots = list(gridrows = 50, plots = list(list(plot = histogram, x = &quot;ReleaseDate&quot;, queries = F), list(plot = histogram, x = &quot;AvgRating&quot;, queries = T)), ncols = 2)) 散点图1234567upset(movies, main.bar.color = &quot;black&quot;, queries = list(list(query = intersects, params = list(&quot;Drama&quot;), color = &quot;red&quot;, active = F), list(query = intersects, params = list(&quot;Action&quot;, &quot;Drama&quot;), active = T), list(query = intersects, params = list(&quot;Drama&quot;, &quot;Comedy&quot;, &quot;Action&quot;), color = &quot;orange&quot;, active = T)), attribute.plots = list(gridrows = 45, plots = list(list(plot = scatter_plot, x = &quot;ReleaseDate&quot;, y = &quot;AvgRating&quot;, queries = T), list(plot = scatter_plot, x = &quot;AvgRating&quot;, y = &quot;Watches&quot;, queries = F)), ncols = 2), query.legend = &quot;bottom&quot;) 箱线图箱线图可以展示数据的分布,通过参数boxplot.summary控制，最多可以一次性显示两个箱线图 1upset(movies, boxplot.summary = c(&quot;AvgRating&quot;, &quot;ReleaseDate&quot;)) 还有一个十分重要的功能Incorporating Set Metadata这里就不讲了，有兴趣的可以参考这份文档 SessionInfo12345678910111213141516171819202122232425262728sessionInfo()## R version 3.4.2 (2017-09-28)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 15063)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] UpSetR_1.3.3## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.13 knitr_1.17 magrittr_1.5 munsell_0.4.3 ## [5] colorspace_1.3-2 rlang_0.1.2 stringr_1.2.0 highr_0.6 ## [9] plyr_1.8.4 tools_3.4.2 grid_3.4.2 gtable_0.2.0 ## [13] htmltools_0.3.6 yaml_2.1.14 lazyeval_0.2.0 rprojroot_1.2 ## [17] digest_0.6.12 tibble_1.3.4 gridExtra_2.3 ggplot2_2.2.1 ## [21] evaluate_0.10.1 rmarkdown_1.6 labeling_0.3 stringi_1.1.5 ## [25] compiler_3.4.2 scales_0.5.0 backports_1.1.1 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>UpSetR</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ggplot2高效实用指南]]></title>
    <url>%2F2017%2F09%2F19%2Fggplot2%E9%AB%98%E6%95%88%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[简介本文内容基本是来源于STHDA，这是一份十分详细的ggplot2使用指南，因此我将其翻译成中文，一是有助于我自己学习理解，另外其他R语言爱好者或者可视化爱好者可以用来学习。翻译过程肯定不能十全十美，各位读者有建议或改进的话，十分欢迎发Email(tyan@zju.edu.cn)给我。 ggplot2是由Hadley Wickham创建的一个十分强大的可视化R包。按照ggplot2的绘图理念，Plot(图)= data(数据集)+ Aesthetics(美学映射)+ Geometry(几何对象)： data: 数据集，主要是data frame； Aesthetics: 美学映射，比如将变量映射给x,y坐标轴，或者映射给颜色、大小、形状等图形属性； Geometry: 几何对象，比如柱形图、直方图、散点图、线图、密度图等。 在ggplot2中有两个主要绘图函数：qplot()以及ggplot()。 qplot(): 顾名思义，快速绘图； ggplot()：此函数才是ggplot2的精髓，远比qplot()强大，可以一步步绘制十分复杂的图形。 由ggplot2绘制出来的ggplot图可以作为一个变量，然后由print()显示出来。 图形类型根据数据集，ggplot2提供不同的方法绘制图形，主要是为下面几类数据类型提供绘图方法： 一个变量x: 连续或离散 两个变量x&amp;y：连续和(或)离散 连续双变量分布x&amp;y: 都是连续 误差棒 地图 三变量 安装及加载安装ggplot2提供三种方式： 123456#直接安装tidyverse，一劳永逸（推荐,数据分析大礼包）install.packages(&quot;tidyverse&quot;)#直接安装ggplot2install.packages(&quot;ggplot2&quot;)#从Github上安装最新的版本，先安装devtools(如果没安装的话)devtools::install_github(&quot;tidyverse/ggplot2&quot;) 加载1library(ggplot2) 数据准备 数据集应该数据框data.frame 本文将使用数据集mtcars。123456#load the data setdata(mtcars)df &lt;- mtcars[, c(&quot;mpg&quot;,&quot;cyl&quot;,&quot;wt&quot;)]#将cyl转为因子型factordf$cyl &lt;- as.factor(df$cyl)head(df) 1234567## mpg cyl wt## Mazda RX4 21.0 6 2.620## Mazda RX4 Wag 21.0 6 2.875## Datsun 710 22.8 4 2.320## Hornet 4 Drive 21.4 6 3.215## Hornet Sportabout 18.7 8 3.440## Valiant 18.1 6 3.460 qplot()qplot()类似于R基本绘图函数plot(),可以快速绘制常见的几种图形：散点图、箱线图、小提琴图、直方图以及密度曲线图。其绘图格式为：1qplot(x, y=NULL, data, geom=&quot;auto&quot;) 其中： x,y: 根据需要绘制的图形使用; data：数据集; geom：几何图形，变量x,y同时指定的话默认为散点图，只指定x的话默认为直方图。 散点图1qplot(x=mpg, y=wt, data=df, geom = &quot;point&quot;) 也可以添加平滑曲线1qplot(x=mpg, y=wt, data = df, geom = c(&quot;point&quot;, &quot;smooth&quot;)) 还有其他参数可以修改，比如点的形状、大小、颜色等12#将变量cyl映射给颜色和形状qplot(x=mpg, y=wt, data = df, colour=cyl, shape=cyl) 箱线图、小提琴图、点图1234567#构造数据集set.seed(1234)wdata &lt;- data.frame( sex=factor(rep(c(&quot;F&quot;, &quot;M&quot;), each=200)), weight=c(rnorm(200, 55), rnorm(200, 58)))head(wdata) 1234567## sex weight## 1 F 53.79293## 2 F 55.27743## 3 F 56.08444## 4 F 52.65430## 5 F 55.42912## 6 F 55.50606 箱线图1qplot(sex, weight, data = wdata, geom = &quot;boxplot&quot;, fill=sex) 小提琴图1qplot(sex, weight, data = wdata, geom = &quot;violin&quot;) 点图1qplot(sex, weight, data = wdata, geom = &quot;dotplot&quot;, stackdir=&quot;center&quot;, binaxis=&quot;y&quot;, dotsize=0.5, color=sex) 直方图、密度图直方图1qplot(weight, data = wdata, geom = &quot;histogram&quot;, fill=sex) 密度图1qplot(weight, data = wdata, geom = &quot;density&quot;, color=sex, linetype=sex) ggplot()上文中的qplot()绘制散点图：1qplot(x=mpg, y=wt, data=df, geom = &quot;point&quot;) 在ggplot()中完全可以如下实现：12ggplot(data=df, aes(x=mpg, y=wt))+ geom_point() 改变点形状、大小、颜色等属性1ggplot(data=df, aes(x=mpg, y=wt))+geom_point(color=&quot;blue&quot;, size=2, shape=23) 绘图过程中常常要用到转换(transformation),这时添加图层的另一个方法是用stat_*()函数。下例中的geom_density()与stat_density()是等价的1ggplot(wdata, aes(x=weight))+geom_density() 等价于1ggplot(wdata, aes(x=weight))+stat_density() 对于每一种几何图形。ggplot2 基本都提供了 geom()和 stat() 一个变量：连续型使用数据集wdata，先计算出不同性别的体重平均值12library(plyr)mu &lt;- ddply(wdata, &quot;sex&quot;, summarise, grp.mean=mean(weight)) 先绘制一个图层a,后面逐步添加图层1a &lt;- ggplot(wdata, aes(x=weight)) 可能添加的图层有： 对于一个连续变量： 面积图geom_area() 密度图geom_density() 点图geom_dotplot() 频率多边图geom_freqpoly() 直方图geom_histogram() 经验累积密度图stat_ecdf() QQ图stat_qq() 对于一个离散变量： 条形图geom_bar() 面积图1a+geom_area(stat = &quot;bin&quot;) 改变颜色12a+geom_area(aes(fill=sex), stat = &quot;bin&quot;, alpha=0.6)+ theme_classic() 注意：y轴默认为变量weight的数量即count，如果y轴要显示密度，可用以下代码： 1a+geom_area(aes(y=..density..), stat = &quot;bin&quot;) 可以通过修改不同属性如透明度、填充颜色、大小、线型等自定义图形： 密度图使用以下函数： geom_density():绘制密度图 geom_vline():添加竖直线 scale_color_manual():手动修改颜色 1a+geom_density() 根据sex修改颜色，将sex映射给line颜色1a+geom_density(aes(color=sex)) 修改填充颜色以及透明度1a+geom_density(aes(fill=sex), alpha=0.4) 添加均值线以及手动修改颜色123a+geom_density(aes(color=sex))+ geom_vline(data=mu, aes(xintercept=grp.mean, color=sex), linetype=&quot;dashed&quot;)+ scale_color_manual(values = c(&quot;red&quot;, &quot;blue&quot;)) 点图1a+geom_dotplot() 将sex映射给颜色1a+geom_dotplot(aes(fill=sex)) 手动修改颜色12a+geom_dotplot(aes(fill=sex))+ scale_fill_manual(values=c(&quot;#999999&quot;, &quot;#E69F00&quot;)) 频率多边图1a+geom_freqpoly() y轴显示为密度12a+geom_freqpoly(aes(y=..density..))+ theme_minimal() 修改颜色以及线型12a+geom_freqpoly(aes(color=sex, linetype=sex))+ theme_minimal() 直方图1a+geom_histogram() 将sex映射给线颜色1a+geom_histogram(aes(color=sex), fill=&quot;white&quot;, position = &quot;dodge&quot;)+theme_classic() 经验累积密度图1a+stat_ecdf() QQ图1ggplot(data = mtcars, aes(sample=mpg))+stat_qq() 一个离散变量1234#加载数据集data(mpg)b &lt;- ggplot(mpg, aes(x=fl))b+geom_bar() 修改填充颜色1b+geom_bar(fill=&quot;steelblue&quot;, color=&quot;black&quot;)+theme_classic() 两个变量：x,y皆连续使用数据集mtcars， 先创建一个ggplot图层1b &lt;- ggplot(data = mtcars, aes(x=wt, y=mpg)) 可能添加的图层有： geom_point():散点图 geom_smooth():平滑线 geom_quantile():分位线 geom_rug():边际地毯线 geom_jitter():避免重叠 geom_text():添加文本注释 散点图1b+geom_point() 将变量cyl映射给点的颜色和形状1b + geom_point(aes(color = factor(cyl), shape = factor(cyl))) 自定义颜色12b+geom_point(aes(color=factor(cyl), shape=factor(cyl)))+ scale_color_manual(values=c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;))+theme_classic() 平滑线可以添加回归曲线1b+geom_smooth() 散点图+回归线12b+geom_point()+ geom_smooth(method = &quot;lm&quot;, se=FALSE)#去掉置信区间 使用loess方法12b+geom_point()+ geom_smooth(method = &quot;loess&quot;) 将变量映射给颜色和形状12b+geom_point(aes(color=factor(cyl), shape=factor(cyl)))+ geom_smooth(aes(color=factor(cyl), shape=factor(cyl)), method = &quot;lm&quot;, se=FALSE, fullrange=TRUE) 分位线123ggplot(data = mpg, aes(cty, hwy))+ geom_point()+geom_quantile()+ theme_minimal() 边际地毯线使用数据集faithful12ggplot(data = faithful, aes(x=eruptions, y=waiting))+ geom_point()+geom_rug() 避免重叠实际上geom_jitter()是geom_point(position=&quot;jitter&quot;)的简称,下面使用数据集mpg12p &lt;- ggplot(data = mpg, aes(displ, hwy))p+geom_point() 增加抖动防止重叠1p+geom_jitter(width = 0.5, height = 0.5) 其中两个参数： width：x轴方向的抖动幅度 height：y轴方向的抖动幅度 文本注释参数label用来指定注释标签1b+geom_text(aes(label=rownames(mtcars))) 两个变量：连续二元分布使用数据集diamonds1head(diamonds[, c(&quot;carat&quot;, &quot;price&quot;)]) 123456789## # A tibble: 6 x 2## carat price## &lt;dbl&gt; &lt;int&gt;## 1 0.23 326## 2 0.21 326## 3 0.23 327## 4 0.29 334## 5 0.31 335## 6 0.24 336 创建ggplot图层,后面再逐步添加图层1c &lt;- ggplot(data=diamonds, aes(carat, price)) 可添加的图层有： geom_bin2d(): 二维封箱热图 geom_hex(): 六边形封箱图 geom_density_2d(): 二维等高线密度图 二维封箱热图geom_bin2d()将点的数量用矩形封装起来，通过颜色深浅来反映点密度1c+geom_bin2d() 设置bin的数量1c+geom_bin2d(bins=150) 六边形封箱图geom_hex()依赖于另一个R包hexbin，所以没安装的先安装：1install.packages(&quot;hexbin&quot;) 12library(hexbin)c+geom_hex() 修改bin的数目1c+geom_hex(bins=10) 二维等高线密度图12sp &lt;- ggplot(faithful, aes(x=eruptions, y=waiting))sp+geom_point()+ geom_density_2d() 两个变量：连续函数主要是如何通过线来连接两个变量，使用数据集economics。1head(economics) 123456789## # A tibble: 6 x 6## date pce pop psavert uempmed unemploy## &lt;date&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;## 1 1967-07-01 507.4 198712 12.5 4.5 2944## 2 1967-08-01 510.5 198911 12.5 4.7 2945## 3 1967-09-01 516.3 199113 11.7 4.6 2958## 4 1967-10-01 512.9 199311 12.5 4.9 3143## 5 1967-11-01 518.1 199498 12.5 4.7 3066## 6 1967-12-01 525.8 199657 12.1 4.8 3018 先创建一个ggplot图层，后面逐步添加图层1d &lt;- ggplot(data = economics, aes(x=date, y=unemploy)) 可添加的图层有： geom_area():面积图 geom_line()：折线图 geom_step(): 阶梯图 面积图1d+geom_area() 线图1d+geom_line() 阶梯图1234set.seed(1111)ss &lt;- economics[sample(1:nrow(economics), 20),]ggplot(ss, aes(x=date, y=unemploy))+ geom_step() 两个变量：x离散，y连续使用数据集ToothGrowth,其中的变量len(Tooth length)是连续变量，dose是离散变量。12ToothGrowth$dose &lt;- as.factor(ToothGrowth$dose)head(ToothGrowth) 1234567## len supp dose## 1 4.2 VC 0.5## 2 11.5 VC 0.5## 3 7.3 VC 0.5## 4 5.8 VC 0.5## 5 6.4 VC 0.5## 6 10.0 VC 0.5 创建图层1e &lt;- ggplot(data = ToothGrowth, aes(x=dose, y=len)) 可添加的图层有： geom_boxplot(): 箱线图 geom_violin()：小提琴图 geom_dotplot()：点图 geom_jitter(): 带状图 geom_line(): 线图 geom_bar(): 条形图 箱线图1e+geom_boxplot() 添加有缺口的箱线图1e+geom_boxplot(notch = TRUE) 按dose分组映射给颜色1e+geom_boxplot(aes(color=dose)) 将dose映射给填充颜色1e+geom_boxplot(aes(fill=dose)) 按supp进行分类并映射给填充颜色1ggplot(ToothGrowth, aes(x=dose, y=len))+ geom_boxplot(aes(fill=supp)) 小提琴图1e+geom_violin(trim = FALSE) 添加中值点123e+geom_violin(trim = FALSE)+ stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), geom=&quot;pointrange&quot;, color=&quot;red&quot;) 与箱线图结合12e+geom_violin(trim = FALSE)+ geom_boxplot(width=0.2) 将dose映射给颜色进行分组1e+geom_violin(aes(color=dose), trim = FALSE) 点图1e+geom_dotplot(binaxis = &quot;y&quot;, stackdir = &quot;center&quot;) 添加中值点12e + geom_dotplot(binaxis = &quot;y&quot;, stackdir = &quot;center&quot;) + stat_summary(fun.data=mean_sdl, color = &quot;red&quot;,geom = &quot;pointrange&quot;,fun.args=list(mult=1)) 与箱线图结合12e + geom_boxplot() + geom_dotplot(binaxis = &quot;y&quot;, stackdir = &quot;center&quot;) 添加小提琴图12e + geom_violin(trim = FALSE) + geom_dotplot(binaxis=&apos;y&apos;, stackdir=&apos;center&apos;) 将dose映射给颜色以及填充色12e + geom_dotplot(aes(color = dose, fill = dose), binaxis = &quot;y&quot;, stackdir = &quot;center&quot;) 带状图带状图是一种一维散点图，当样本量很小时，与箱线图相当1e + geom_jitter(position=position_jitter(0.2)) 添加中值点123e + geom_jitter(position=position_jitter(0.2)) + stat_summary(fun.data=&quot;mean_sdl&quot;, fun.args = list(mult=1), geom=&quot;pointrange&quot;, color = &quot;red&quot;) 与点图结合12e + geom_jitter(position=position_jitter(0.2)) + geom_dotplot(binaxis = &quot;y&quot;, stackdir = &quot;center&quot;) 与小提琴图结合12e + geom_violin(trim = FALSE) + geom_jitter(position=position_jitter(0.2)) 将dose映射给颜色和形状12e + geom_jitter(aes(color = dose, shape = dose), position=position_jitter(0.2)) 线图12345#构造数据集df &lt;- data.frame(supp=rep(c(&quot;VC&quot;, &quot;OJ&quot;), each=3), dose=rep(c(&quot;D0.5&quot;, &quot;D1&quot;, &quot;D2&quot;),2), len=c(6.8, 15, 33, 4.2, 10, 29.5))head(df) 1234567## supp dose len## 1 VC D0.5 6.8## 2 VC D1 15.0## 3 VC D2 33.0## 4 OJ D0.5 4.2## 5 OJ D1 10.0## 6 OJ D2 29.5 将supp映射线型123ggplot(df, aes(x=dose, y=len, group=supp)) + geom_line(aes(linetype=supp))+ geom_point() 修改线型、点的形状以及颜色123ggplot(df, aes(x=dose, y=len, group=supp)) + geom_line(aes(linetype=supp, color = supp))+ geom_point(aes(shape=supp, color = supp)) 条形图1234#构造数据集df &lt;- data.frame(dose=c(&quot;D0.5&quot;, &quot;D1&quot;, &quot;D2&quot;), len=c(4.2, 10, 29.5))head(df) 1234## dose len## 1 D0.5 4.2## 2 D1 10.0## 3 D2 29.5 1234df2 &lt;- data.frame(supp=rep(c(&quot;VC&quot;, &quot;OJ&quot;), each=3), dose=rep(c(&quot;D0.5&quot;, &quot;D1&quot;, &quot;D2&quot;),2), len=c(6.8, 15, 33, 4.2, 10, 29.5))head(df2) 1234567## supp dose len## 1 VC D0.5 6.8## 2 VC D1 15.0## 3 VC D2 33.0## 4 OJ D0.5 4.2## 5 OJ D1 10.0## 6 OJ D2 29.5 创建图层12f &lt;- ggplot(df, aes(x = dose, y = len))f + geom_bar(stat = &quot;identity&quot;) 修改填充色以及添加标签123f + geom_bar(stat=&quot;identity&quot;, fill=&quot;steelblue&quot;)+ geom_text(aes(label=len), vjust=-0.3, size=3.5)+ theme_minimal() 将dose映射给条形图颜色12f + geom_bar(aes(color = dose), stat=&quot;identity&quot;, fill=&quot;white&quot;) 修改填充色1f + geom_bar(aes(fill = dose), stat=&quot;identity&quot;) 将变量supp映射给填充色，从而达到分组效果12g &lt;- ggplot(data=df2, aes(x=dose, y=len, fill=supp)) g + geom_bar(stat = &quot;identity&quot;)#position默认为stack 修改position为dodge1g + geom_bar(stat=&quot;identity&quot;, position=position_dodge()) 两个变量：x、y皆离散使用数据集diamonds中的两个离散变量color以及cut12ggplot(diamonds, aes(cut, color)) + geom_jitter(aes(color = cut), size = 0.5) 两个变量：绘制误差图123df &lt;- ToothGrowthdf$dose &lt;- as.factor(df$dose)head(df) 1234567## len supp dose## 1 4.2 VC 0.5## 2 11.5 VC 0.5## 3 7.3 VC 0.5## 4 5.8 VC 0.5## 5 6.4 VC 0.5## 6 10.0 VC 0.5 绘制误差图需要知道均值以及标准误，下面这个函数用来计算每组的均值以及标准误。12345678910data_summary &lt;- function(data, varname, grps)&#123; require(plyr) summary_func &lt;- function(x, col)&#123; c(mean = mean(x[[col]], na.rm=TRUE), sd = sd(x[[col]], na.rm=TRUE)) &#125; data_sum&lt;-ddply(data, grps, .fun=summary_func, varname) data_sum &lt;- rename(data_sum, c(&quot;mean&quot; = varname)) return(data_sum)&#125; 计算均值以及标准误1234df2 &lt;- data_summary(df, varname=&quot;len&quot;, grps= &quot;dose&quot;)# Convert dose to a factor variabledf2$dose=as.factor(df2$dose)head(df2) 1234## dose len sd## 1 0.5 10.605 4.499763## 2 1 19.735 4.415436## 3 2 26.100 3.774150 创建图层12f &lt;- ggplot(df2, aes(x = dose, y = len, ymin = len-sd, ymax = len+sd)) 可添加的图层有： geom_crossbar(): 空心柱，上中下三线分别代表ymax、mean、ymin geom_errorbar(): 误差棒 geom_errorbarh(): 水平误差棒 geom_linerange()：竖直误差线 geom_pointrange()：中间为一点的误差线 具体如下： geom_crossbar()1f+geom_crossbar() 将dose映射给颜色1f+geom_crossbar(aes(color=dose)) 自定义颜色12f+geom_crossbar(aes(color=dose))+ scale_color_manual(values = c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;))+theme_classic() 修改填充色123f+geom_crossbar(aes(fill=dose))+ scale_fill_manual(values = c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;))+ theme_classic() 通过将supp映射给颜色实现分组，可以利用函数stat_summary()来计算mean和sd12f &lt;- ggplot(df, aes(x=dose, y=len, color=supp))f+stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), geom=&quot;crossbar&quot;, width=0.6, position = position_dodge(0.8)) 误差棒1f &lt;- ggplot(df2, aes(x=dose, y=len, ymin=len-sd, ymax=len+sd)) 将dose映射给颜色1f+geom_errorbar(aes(color=dose), width=0.2) 与线图结合12f+geom_line(aes(group=1))+ geom_errorbar(width=0.15) 与条形图结合，并将变量dose映射给颜色12f+geom_bar(aes(color=dose), stat = &quot;identity&quot;, fill=&quot;white&quot;)+ geom_errorbar(aes(color=dose), width=0.1) 水平误差棒1234#构造数据集df2 &lt;- data_summary(ToothGrowth, varname=&quot;len&quot;, grps = &quot;dose&quot;)df2$dose &lt;- as.factor(df2$dose)head(df2) 1234## dose len sd## 1 0.5 10.605 4.499763## 2 1 19.735 4.415436## 3 2 26.100 3.774150 创建图层1f &lt;- ggplot(data = df2, aes(x=len, y=dose,xmin=len-sd, xmax=len+sd)) 参数xmin与xmax用来设置水平误差棒 1f+geom_errorbarh() 通过映射实现分组1f+geom_errorbarh(aes(color=dose)) geom_linerange()与geom_pointrange()1f &lt;- ggplot(df2, aes(x=dose, y=len, ymin=len-sd, ymax=len+sd)) line range1f+geom_linerange() point range1f+geom_pointrange() 点图+误差棒12g &lt;- ggplot(df, aes(x=dose, y=len))+ geom_dotplot(binaxis = &quot;y&quot;, stackdir = &quot;center&quot;) 添加geom_crossbar()1g+stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), geom=&quot;crossbar&quot;, color=&quot;red&quot;, width=0.1) 添加geom_errorbar()123g + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1), geom=&quot;errorbar&quot;, color=&quot;red&quot;, width=0.2) + stat_summary(fun.y=mean, geom=&quot;point&quot;, color=&quot;red&quot;) 添加geom_pointrange()12g + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1), geom=&quot;pointrange&quot;, color=&quot;red&quot;) 两个变量：地图绘制ggplot2提供了绘制地图的函数geom_map()，依赖于包maps提供地理信息。安装map1install.paclages(&quot;maps&quot;) 下面将绘制美国地图，数据集采用USArrests12library(maps)head(USArrests) 1234567## Murder Assault UrbanPop Rape## Alabama 13.2 236 58 21.2## Alaska 10.0 263 48 44.5## Arizona 8.1 294 80 31.0## Arkansas 8.8 190 50 19.5## California 9.0 276 91 40.6## Colorado 7.9 204 78 38.7 对数据进行整理一下,添加一列state12crimes &lt;- data.frame(state=tolower(rownames(USArrests)), USArrests)head(crimes) 1234567## Murder Assault UrbanPop Rape## Alabama 13.2 236 58 21.2## Alaska 10.0 263 48 44.5## Arizona 8.1 294 80 31.0## Arkansas 8.8 190 50 19.5## California 9.0 276 91 40.6## Colorado 7.9 204 78 38.7 1234#数据重铸library(reshape2)crimesm &lt;- melt(crimes, id=1)head(crimesm) 1234567## state variable value## 1 alabama Murder 13.2## 2 alaska Murder 10.0## 3 arizona Murder 8.1## 4 arkansas Murder 8.8## 5 california Murder 9.0## 6 colorado Murder 7.9 12345map_data &lt;- map_data(&quot;state&quot;)#绘制地图，使用Murder进行着色ggplot(crimes, aes(map_id=state))+ geom_map(aes(fill=Murder), map=map_data)+ expand_limits(x=map_data$long, y=map_data$lat) 三个变量使用数据集mtcars，首先绘制一个相关性图123#构造数据df &lt;- mtcars[, c(1,3,4,5,6,7)]head(df) 1234567## mpg disp hp drat wt qsec## Mazda RX4 21.0 160 110 3.90 2.620 16.46## Mazda RX4 Wag 21.0 160 110 3.90 2.875 17.02## Datsun 710 22.8 108 93 3.85 2.320 18.61## Hornet 4 Drive 21.4 258 110 3.08 3.215 19.44## Hornet Sportabout 18.7 360 175 3.15 3.440 17.02## Valiant 18.1 225 105 2.76 3.460 20.22 123cormat &lt;- round(cor(df), 2)cormat_melt &lt;- melt(cormat)head(cormat) 1234567## mpg disp hp drat wt qsec## mpg 1.00 -0.85 -0.78 0.68 -0.87 0.42## disp -0.85 1.00 0.79 -0.71 0.89 -0.43## hp -0.78 0.79 1.00 -0.45 0.66 -0.71## drat 0.68 -0.71 -0.45 1.00 -0.71 0.09## wt -0.87 0.89 0.66 -0.71 1.00 -0.17## qsec 0.42 -0.43 -0.71 0.09 -0.17 1.00 创建图层：1g &lt;- ggplot(cormat_melt, aes(x=Var1, y=Var2)) 在此基础上可添加的图层有： geom_tile(): 瓦片图 geom_raster(): 光栅图，瓦片图的一种，只不过所有的tiles都是一样的大小 现在使用使用geom_tile()绘制相关性矩阵图，我们这里这绘制下三角矩阵图，首先要整理数据：123456789101112#获得相关矩阵的下三角get_lower_tri &lt;- function(cormat)&#123; cormat[upper.tri(cormat)] &lt;- NA return(cormat)&#125;#获得相关矩阵的上三角get_upper_tri &lt;- function(cormat)&#123; cormat[lower.tri(cormat)] &lt;- NA return(cormat)&#125;upper_tri &lt;- get_upper_tri(cormat = cormat)head(upper_tri) 1234567## mpg disp hp drat wt qsec## mpg 1 -0.85 -0.78 0.68 -0.87 0.42## disp NA 1.00 0.79 -0.71 0.89 -0.43## hp NA NA 1.00 -0.45 0.66 -0.71## drat NA NA NA 1.00 -0.71 0.09## wt NA NA NA NA 1.00 -0.17## qsec NA NA NA NA NA 1.00 绘制相关矩阵图12345678#数据重铸upper_tri_melt &lt;- melt(upper_tri, na.rm = TRUE)ggplot(data=upper_tri_melt, aes(Var1, y=Var2, fill=value))+ geom_tile(color=&quot;white&quot;)+ scale_fill_gradient2(low = &quot;blue&quot;, high = &quot;red&quot;, mid = &quot;white&quot;, midpoint = 0, limit=c(-1, 1), space = &quot;Lab&quot;, name=&quot;Person\nCorrelation&quot;)+ theme_minimal()+ theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1))+ coord_fixed() 上图中蓝色代表互相关，红色代表正相关，至于coord_fixed()保证x，y轴比例为1 可以看出上图顺序有点乱，我们可以对相关矩阵进行排序12345678910#构造函数reorder_cormat &lt;- function(cormat)&#123; dd &lt;- as.dist((1-cormat)/2) hc &lt;- hclust(dd) cormat &lt;- cormat[hc$order, hc$order]&#125;cormat &lt;- reorder_cormat(cormat)lower_tri &lt;- get_lower_tri(cormat)lower_tri_melt &lt;- melt(lower_tri, na.rm = TRUE)head(lower_tri_melt) 1234567## Var1 Var2 value## 1 hp hp 1.00## 2 disp hp 0.79## 3 wt hp 0.66## 4 qsec hp -0.71## 5 mpg hp -0.78## 6 drat hp -0.45 绘制图形12345678ggheatmap &lt;- ggplot(lower_tri_melt, aes(Var1, Var2, fill=value))+ geom_tile(color=&quot;white&quot;)+ scale_fill_gradient2(low = &quot;blue&quot;, high = &quot;red&quot;, mid = &quot;white&quot;, midpoint = 0, limit=c(-1, 1), space = &quot;Lab&quot;, name=&quot;Person\nCorrelation&quot;)+ theme_minimal()+ theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1))+ coord_fixed()print(ggheatmap) 图元：多边形、路径、带状、射线（线段）、矩形等本节主要讲述的是添加图形元件，将用到一下函数： geom_polygon()：添加多边形 geom_path(): 路径 geom_ribbon(): 带状 geom_segment(): 射线、线段 geom_curve(): 曲线 geom_rect(): 二维矩形 添加多边形12345library(dplyr)map_data(&quot;world&quot;)%&gt;% filter(region==c(&quot;China&quot;, &quot;Taiwan&quot;))%&gt;% ggplot(aes(x=long, y=lat, group=group))+ geom_polygon(fill=&quot;red&quot;, color=&quot;black&quot;) 添加路径、带状、矩形创建图层1h &lt;- ggplot(economics, aes(date, unemploy)) 添加路径1h+geom_path() 添加带状1h+geom_ribbon(aes(ymin=unemploy-800, ymax=unemploy+800), fill = &quot;grey70&quot;)+geom_line(aes(y=unemploy)) 添加矩形123h+ geom_path()+ geom_rect(aes(xmin=as.Date(&quot;1980-01-01&quot;), ymin=-Inf, xmax=as.Date(&quot;1985-01-01&quot;), ymax=Inf), fill=&quot;steelblue&quot;) 添加线段123i &lt;- ggplot(mtcars, aes(wt, mpg))+geom_point()#添加线段i+geom_segment(aes(x=2, y=15, xend=3, yend=15)) 添加箭头1i+geom_segment(aes(x=5, y=30, xend=3.5, yend=25), arrow = arrow(length = unit(0.5, &quot;cm&quot;))) 添加曲线1i+geom_curve(aes(x=2, y=15, xend=3, yend=15), color=&quot;red&quot;) 图形参数：主标题、坐标轴标签、图例标题创建图层12ToothGrowth$dose &lt;- as.factor(ToothGrowth$dose)p &lt;- ggplot(ToothGrowth, aes(x=dose, y=len))+geom_boxplot() 修改标题以及标签的函数有： ggtitle(“New main title”): 添加主标题 xlab(“New X axis label”): 修改x轴标签 ylab(“New Y axis label”): 修改y轴标签 labs(title = “New main title”, x = “New X axis label”, y = “New Y axis label”): 可同时添加主标题以及坐标轴标签，另外，图例标题也可以用此函数修改 修改主标题以及标签1(p &lt;- p+labs(title=&quot;Plot of length\nby dose&quot;, x=&quot;Dose (mg)&quot;, y=&quot;teeth length&quot;)) 修改标签属性：颜色、字体、大小等使用theme()修改,element_text()可以具体修改图形参数，element_blank()隐藏标签123456#修改标签p+theme(plot.title = element_text(color = &quot;red&quot;, size = 14, face = &quot;bold.italic&quot;),axis.title.x = element_text(color=&quot;blue&quot;, size = 14, face = &quot;bold&quot;),axis.title.y = element_text(color=&quot;#993333&quot;, size = 14, face = &quot;bold&quot;)) 123456#隐藏标签p+theme( plot.title = element_blank(), axis.title.x = element_blank(), axis.title.y = element_blank()) 修改图例标题123p &lt;- ggplot(ToothGrowth, aes(x=dose, y=len, fill=dose))+ geom_boxplot()p 12#修改图例标题p+labs(fill=&quot;Dose (mg)&quot;) 图例位置以及外观修改图例位置以及外观12#图例位置在最上面，有五个选项：&quot;left&quot;,&quot;top&quot;, &quot;right&quot;, &quot;bottom&quot;, &quot;none&quot;p+theme(legend.position = &quot;top&quot;) 移除图例1p+theme(legend.position = &quot;none&quot;) 修改图例标题以及标签外观1234p+theme( legend.title = element_text(color=&quot;blue&quot;), legend.text = element_text(color=&quot;red&quot;)) 修改图例背景1p+theme(legend.background = element_rect(fill=&quot;lightblue&quot;)) 利用scale()函数自定义图例主要两个函数： scale_x_discrete()：修改图例标签顺序 scale_fill_discrete(): 修改图例标题以及标签 12#修改顺序p+scale_x_discrete(limits=c(&quot;2&quot;, &quot;0.5&quot;, &quot;1&quot;)) 12#修改标题以及标签p+scale_fill_discrete(name=&quot;Dose&quot;, label=c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;)) 自动/手动修改颜色1mtcars$cyl &lt;- as.factor(mtcars$cyl) 创建图层1234# boxplotbp &lt;- ggplot(ToothGrowth, aes(x=dose, y=len))# scatter plotsp &lt;- ggplot(mtcars, aes(x=wt, y=mpg)) 修改填充色、轮廓线颜色1bp+geom_boxplot(fill=&quot;steelblue&quot;, color=&quot;red&quot;) 1sp+geom_point(color=&quot;darkblue&quot;) 通过映射分组修改颜色1(bp &lt;- bp+geom_boxplot(aes(fill=dose))) 1(sp &lt;- sp+geom_point(aes(color=cyl))) 手动修改颜色主要两个函数： scale_fill_manual(): 填充色 scale_color_manual()：轮廓色，如点线 12# Box plotbp + scale_fill_manual(values=c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;)) 12# Scatter plotsp + scale_color_manual(values=c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;)) 使用RColorBrewer调色板 scale_fill_brewer(): 填充色 scale_color_brewer()：轮廓色，如点线 12# Box plotbp + scale_fill_brewer(palette=&quot;Dark2&quot;) 12# Scatter plotsp + scale_color_brewer(palette=&quot;Dark2&quot;) RColorBrewer包提供以下调色板 还专门有一个灰度调色板：12# Box plotbp + scale_fill_grey() + theme_classic() 12# Scatter plotsp + scale_color_grey() + theme_classic() 梯度或连续颜色有时我们会将某个连续变量映射给颜色，这时修改这种梯度或连续型颜色就可以使用以下函数： scale_color_gradient(), scale_fill_gradient()：两种颜色的连续梯度 scale_color_gradient2(), scale_fill_gradient2()：不同梯度 scale_color_gradientn(), scale_fill_gradientn()：多种颜色梯度 1234# Color by qsec valuessp2&lt;-ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point(aes(color = qsec))sp2 123# Change the low and high colors# Sequential color schemesp2+scale_color_gradient(low=&quot;blue&quot;, high=&quot;red&quot;) 1234# Diverging color schememid&lt;-mean(mtcars$qsec)sp2+scale_color_gradient2(midpoint=mid, low=&quot;blue&quot;, mid=&quot;white&quot;, high=&quot;red&quot;, space = &quot;Lab&quot; ) 点颜色、大小、形状R提供的点形状是由数字表示的，具体如下： 123# Basic scatter plotggplot(mtcars, aes(x=wt, y=mpg)) + geom_point(shape = 18, color = &quot;steelblue&quot;, size = 4) 123# Change point shapes and colors by groupsggplot(mtcars, aes(x=wt, y=mpg)) + geom_point(aes(shape = cyl, color = cyl)) 可通过以下方法对点的颜色、大小、形状进行修改： scale_shape_manual() : to change point shapes scale_color_manual() : to change point colors scale_size_manual() : to change the size of points 123456# Change colors and shapes manuallyggplot(mtcars, aes(x=wt, y=mpg, group=cyl)) + geom_point(aes(shape=cyl, color=cyl), size=2)+ scale_shape_manual(values=c(3, 16, 17))+ scale_color_manual(values=c(&apos;#999999&apos;,&apos;#E69F00&apos;, &apos;#56B4E9&apos;))+ theme(legend.position=&quot;top&quot;) 文本注释对图形进行文本注释有以下方法： geom_text(): 文本注释 geom_label(): 文本注释,类似于geom_text(),只是多了个背景框 annotate(): 文本注释 annotation_custom(): 分面时可以在所有的面板进行文本注释 123set.seed(1234)df &lt;- mtcars[sample(1:nrow(mtcars), 10), ]df$cyl &lt;- as.factor(df$cyl) 散点图注释12345# Scatter plotsp &lt;- ggplot(df, aes(x=wt, y=mpg))+ geom_point() # Add text, change colors by groupssp + geom_text(aes(label = rownames(df), color = cyl), size = 3, vjust = -1) 123# Add text at a particular coordinatesp + geom_text(x = 3, y = 30, label = &quot;Scatter plot&quot;, color=&quot;red&quot;) 12# geom_label()进行注释sp + geom_label(aes(label=rownames(df))) 1234567# annotation_custom(),需要用到textGrob()library(grid)# Create a textgrob &lt;- grobTree(textGrob(&quot;Scatter plot&quot;, x=0.1, y=0.95, hjust=0, gp=gpar(col=&quot;red&quot;, fontsize=13, fontface=&quot;italic&quot;)))# Plotsp + annotation_custom(grob) 12#分面注释sp + annotation_custom(grob)+facet_wrap(~cyl, scales=&quot;free&quot;) 线型R里的线型有七种：“blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash”, “twodash”，对应数字0，1，2，3，4，5，6. 具体如下： 12345# Create some datadf2 &lt;- data.frame(sex = rep(c(&quot;Female&quot;, &quot;Male&quot;), each=3), time=c(&quot;breakfeast&quot;, &quot;Lunch&quot;, &quot;Dinner&quot;), bill=c(10, 30, 15, 13, 40, 17) )head(df2) 1234567## sex time bill## 1 Female breakfeast 10## 2 Female Lunch 30## 3 Female Dinner 15## 4 Male breakfeast 13## 5 Male Lunch 40## 6 Male Dinner 17 123456# Line plot with multiple groups# Change line types and colors by groups (sex)ggplot(df2, aes(x=time, y=bill, group=sex)) + geom_line(aes(linetype = sex, color = sex))+ geom_point(aes(color=sex))+ theme(legend.position=&quot;top&quot;) 同点一样，线也可以类似修改： scale_linetype_manual() : to change line types scale_color_manual() : to change line colors scale_size_manual() : to change the size of lines 12345678# Change line types, colors and sizesggplot(df2, aes(x=time, y=bill, group=sex)) + geom_line(aes(linetype=sex, color=sex, size=sex))+ geom_point()+ scale_linetype_manual(values=c(&quot;twodash&quot;, &quot;dotted&quot;))+ scale_color_manual(values=c(&apos;#999999&apos;,&apos;#E69F00&apos;))+ scale_size_manual(values=c(1, 1.5))+ theme(legend.position=&quot;top&quot;) 主题与背景颜色12# Convert the column dose from numeric to factor variableToothGrowth$dose &lt;- as.factor(ToothGrowth$dose) 创建箱线图12p &lt;- ggplot(ToothGrowth, aes(x=dose, y=len))+ geom_boxplot() 修改主题ggplot2提供了好几种主题，另外有一个扩展包ggthemes专门提供了一主题，可以安装利用。1install.packages(&quot;ggthemes&quot;) theme_gray(): gray background color and white grid lines theme_bw() : white background and gray grid lines 1p+theme_gray(base_size = 14) 1p+theme_bw() theme_linedraw : black lines around the plot theme_light : light gray lines and axis (more attention towards the data) 1p + theme_linedraw() 1p + theme_light() theme_minimal: no background annotations theme_classic : theme with axis lines and no grid lines 1p + theme_minimal() 1p + theme_classic() ggthemes提供的主题1p+ggthemes::theme_economist() 坐标轴：最大最小值1p &lt;- ggplot(cars, aes(x=speed, y=dist))+geom_point() 修改坐标轴范围有以下几种方式：1、不删除数据 p+coord_cartesian(xlim=c(5, 20), ylim=c(0, 50)):笛卡尔坐标系，这是设定修改不会删除数据 2、会删除部分数据：不在此范围内的数据都会被删除,因此在此基础上添加图层时数据是不完整的 p+xlim(5, 20)+ylim(0, 50) p+scale_x_continuous(limits=c(5, 20))+scale_y_continuous(limits=c(0, 50)) 3、扩展图形范围：expand()函数，扩大范围 p+expand_limits(x=0, y=0):设置截距为0，即过原点 p+expand_limits(x=c(5, 50), y=c(0, 150))：扩大坐标轴范围，这样图形显示就小了 下面通过图形演示 1p 12#通过coord_cartesian()函数修改坐标轴范围p+coord_cartesian(xlim =c (5, 20), ylim = c(0, 50)) 12#通过xlim()和ylim()函数修改p+xlim(5, 20)+ylim(0, 50) 12#expand limitsp+expand_limits(x=c(5, 50), y=c(0, 150)) 坐标变换1p &lt;- ggplot(cars, aes(x=speed, y=dist))+geom_point() 坐标变换有以下几种： p+scale_x_log10(),p+scale_y_log10(): 绘图时对x，y取10的对数 p+scale_x_sqrt(),p+scale_x_sqrt(): 开根号 p+scale_x_reverse(),p+scale_x_reverse()：坐标轴反向 p+coord_trans(x =“log10”, y=“log10”): 同上，可以对坐标轴取对数、根号等 p+scale_x_continuous(trans=”log2”),p+scale_x_continuous(trans=”log2”): 同上，取对数的另外一种方法 下面实例演示：1p 12p+scale_x_continuous(trans = &quot;log2&quot;)+ scale_y_continuous(trans = &quot;log2&quot;) 12345#修改坐标刻度标签require(scales)p+scale_y_continuous(trans=log2_trans(), breaks = trans_breaks(&quot;log2&quot;, function(x) 2^x), labels=trans_format(&quot;log2&quot;, math_format(2^.x))) 12#坐标轴反向p+scale_y_reverse() 坐标刻度：刻度线、标签、顺序等更改坐标轴刻度线标签等函数： element_text(face, color, size, angle): 修改文本风格 element_blank(): 隐藏文本 1(p &lt;- ggplot(ToothGrowth, aes(x=dose, y=len))+geom_boxplot()) 修改刻度标签等12p+theme(axis.text.x = element_text(face = &quot;bold&quot;, color=&quot;#993333&quot;, size=14, angle = 45), axis.text.y = element_text(face = &quot;bold&quot;, size = 14, color = &quot;blue&quot;, angle = 45)) 移除刻度标签等1234p + theme( axis.text.x = element_blank(), # Remove x axis tick labels axis.text.y = element_blank(), # Remove y axis tick labels axis.ticks = element_blank()) # Remove ticks 当然可以自定义坐标轴了 离散非连续坐标轴 scale_x_discrete(name, breaks, labels, limits) scale_y_discrete(name, breaks, labels, limits) 连续型坐标轴 scale_x_conyinuous(name, breaks, labels, limits) scale_y_continuous(name, breaks, labels, limits) 详细情况如下： name: x,y轴的标题 breaks: 刻度，分成几段 labels：坐标轴刻度线标签 limits: 坐标轴范围 其中scale_xx()函数可以修改坐标轴的如下参数： 坐标轴标题 坐标轴范围 刻度标签位置 手动设置刻度标签 具体演示： 离散坐标轴 12#修改标签以及顺序p+scale_x_discrete(name=&quot;Dose (mg)&quot;, limits=c(&quot;2&quot;, &quot;1&quot;, &quot;0.5&quot;)) 12#修改刻度标签p+scale_x_discrete(breaks=c(&quot;0.5&quot;, &quot;1&quot;, &quot;2&quot;),labels=c(&quot;Dose 0.5&quot;, &quot;Dose 1&quot;, &quot;Dose 2&quot;)) 12#修改要显示的项p+scale_x_discrete(limits=c(&quot;0.5&quot;, &quot;2&quot;)) 连续型坐标轴12#散点图(sp &lt;- ggplot(cars, aes(x=speed, y=dist))+geom_point()) 修改坐标轴标签以及范围12(sp &lt;- sp+scale_x_continuous(name = &quot;Speed of cars&quot;, limits = c(0, 30))+ scale_y_continuous(name = &quot;Stopping distance&quot;, limits = c(0, 150))) 更改y轴刻度，间隔501sp+scale_y_continuous(breaks = seq(0, 150, 50)) 修改y轴标签为百分数12require(scales)sp+scale_y_continuous(labels = percent) 添加直线：水平线、竖直线、回归线ggplot2提供以下方法为图形添加直线： geom_hline(yintercept, linetype, color, size): 添加水平线 geom_vline(xintercept, linetype, color, size)：添加竖直线 geom_abline(intercept, slope, linetype, color, size)：添加回归线 geom_segment()：添加线段 实例演示：1sp &lt;- ggplot(data=mtcars, aes(x=wt, y=mpg))+ geom_point() 添加直线：12#在y=20处添加一水平线，并设置颜色等sp+geom_hline(yintercept = 20, linetype=&quot;dashed&quot;, color=&apos;red&apos;) 12#在x=3处添加一竖直线，并设置颜色等sp+geom_vline(xintercept = 3, color=&quot;blue&quot;, size=1.5) 12#添加回归线sp+geom_abline(intercept = 37, slope = -5, color=&quot;blue&quot;) 12#添加水平线段sp+geom_segment(aes(x=2, y=15, xend=3, yend=15), color=&quot;red&quot;) 图形旋转：旋转、反向主要是下面两个函数： coord_flip()：创建水平方向图 scale_x_reverse(),scale_y_reverse()：坐标轴反向 12set.seed(1234)(hp &lt;- qplot(x=rnorm(200), geom = &quot;histogram&quot;)) 12#水平柱形图hp+coord_flip() 12#y轴反向hp+scale_y_reverse() 分面分面就是根据一个或多个变量将图形分为几个图形以便于可视化，主要有两个方法实现： facet_grid() facet_wrap() 123ToothGrowth$dose &lt;- as.factor(ToothGrowth$dose)(p &lt;- ggplot(ToothGrowth, aes(x=dose, y=len, group=dose))+ geom_boxplot(aes(fill=dose))) 针对上面图形进行分面： p+facet_grid(supp~.): 按变量supp进行竖直方向分面 p+facet_grid(.~supp): 按变量supp进行水平方向分面 p+facet_wrap(dose~supp)：按双变量supp和dose进行水平竖直方向分面 p+facet_wrap(~fl): 将分成的面板边靠边置于一个矩形框内 1、按一个离散变量进行分面：12#竖直方向进行分面p+facet_grid(supp~.) 12#水平方向分面p+facet_grid(.~supp) 2、按两个离散变量进行分面12#行按dose分面，列按supp分面p+facet_grid(dose~supp) 12#行按supp，列按dose分面p+facet_grid(supp~dose) 从上面图形可以看出，每个面板的坐标轴比例都是一样的，我们可以通过设置参数scales来控制坐标轴比例1p + facet_grid(dose ~ supp, scales=&apos;free&apos;) 位置调整很多图形需要我们调整位置，比如直方图时，由堆叠式、百分式、分离式等，具体的要通过实例说明123p &lt;- ggplot(mpg, aes(fl, fill=drv))#直方图边靠边排列，参数position=&quot;dodge&quot;p+geom_bar(position = &quot;dodge&quot;) 堆叠式position=”stack”1p+geom_bar(position = &quot;stack&quot;) position=”fill”类似玉堆叠图，只不过按百分比排列，所有柱子都被标准化成同样高度1p+geom_bar(position = &quot;fill&quot;) position=”jitter”,（主要适用于散点图）增加扰动，避免重叠，前面讲的geom_jitter()就是来源于此12ggplot(mpg, aes(cty, hwy))+ geom_point(position = &quot;jitter&quot;) 上面几个函数有两个重要的参数：heigth、weight。 position_dodge(width, height) position_fill(width, height) position_stack(width, height) position_jitter(width, height) 1p+geom_bar(position = position_dodge(width = 1)) 坐标系1p &lt;- ggplot(mpg, aes(fl))+geom_bar() ggplot2中的坐标系主要有： p+coord_cartesian(xlim=NULL, ylim=NULL)：笛卡尔坐标系(默认) p+coord_fixed(ratio=1, clim=NULL, ylim=NULL)：固定了坐标轴比例的笛卡尔坐标系。默认比例为1 p+coord_flip(…)：旋转笛卡尔坐标系 p+coord_polar(theta=”x”, start=0, direction=1)：极坐标系 p+coord_trans(x,y,limx,limy)：变换笛卡尔坐标系 coord_map()：地图坐标系 各个坐标系参数如下：1、笛卡尔坐标系：coord_cartesian(), coord_fixed() and coord_flip() xlim：x轴范围 ylim：y轴范围 ratio：y/x …：其他参数 2、极坐标系：coord_polar() theta：外延坐标，x或y start：坐标开始的位置，默认为12点钟 direction：方向：顺时针(1),逆时针(-1) 3、变换坐标系：coord_trans() x,y：变换的坐标轴 limx,limy：坐标轴范围 实例演示：1p+coord_cartesian(ylim = c(0,200)) 1p+coord_fixed(ratio = 1/50) 1p+coord_flip() 1p+coord_polar(theta = &quot;x&quot;, direction = 1) 1p+coord_trans(y=&quot;sqrt&quot;) ggplot2包资料扩展：包、函数 ggplot2有一个官方网站，里面有十分详细的说明，点击这里直达 ggplot2还有十分多的扩展包，点击这里直达 SessionInfo12345678910111213141516171819202122232425262728293031323334353637383940414243sessionInfo()## R version 3.4.1 (2017-06-30)## Platform: x86_64-pc-linux-gnu (64-bit)## Running under: Ubuntu 16.04.3 LTS## ## Matrix products: default## BLAS: /usr/lib/atlas-base/atlas/libblas.so.3.0## LAPACK: /usr/lib/atlas-base/atlas/liblapack.so.3.0## ## locale:## [1] LC_CTYPE=zh_CN.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=zh_CN.UTF-8 LC_COLLATE=zh_CN.UTF-8 ## [5] LC_MONETARY=zh_CN.UTF-8 LC_MESSAGES=zh_CN.UTF-8 ## [7] LC_PAPER=zh_CN.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages:## [1] grid stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages:## [1] scales_0.5.0 bindrcpp_0.2 dplyr_0.7.3 reshape2_1.4.2## [5] maps_3.2.0 hexbin_1.27.1 plyr_1.8.4 ggplot2_2.2.1 ## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.12 bindr_0.1 compiler_3.4.1 ## [4] RColorBrewer_1.1-2 base64enc_0.1-3 tools_3.4.1 ## [7] rpart_4.1-11 digest_0.6.12 checkmate_1.8.3 ## [10] htmlTable_1.9 evaluate_0.10.1 tibble_1.3.4 ## [13] gtable_0.2.0 lattice_0.20-35 pkgconfig_2.0.1 ## [16] rlang_0.1.2 Matrix_1.2-11 yaml_2.1.14 ## [19] gridExtra_2.3 stringr_1.2.0 knitr_1.17 ## [22] cluster_2.0.6 htmlwidgets_0.9 rprojroot_1.2 ## [25] nnet_7.3-12 glue_1.1.1 data.table_1.10.4 ## [28] R6_2.2.2 survival_2.41-3 foreign_0.8-69 ## [31] rmarkdown_1.6 latticeExtra_0.6-28 Formula_1.2-2 ## [34] magrittr_1.5 ggthemes_3.4.0 backports_1.1.0 ## [37] Hmisc_4.0-3 htmltools_0.3.6 MASS_7.3-47 ## [40] splines_3.4.1 assertthat_0.2.0 colorspace_1.3-2 ## [43] labeling_0.3 stringi_1.1.5 acepack_1.4.1 ## [46] lazyeval_0.2.0 munsell_0.4.3 联系方式： wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介： 严涛浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tidyverse实践之绘制简单地图]]></title>
    <url>%2F2017%2F09%2F16%2Ftidyverse%E5%AE%9E%E8%B7%B5%E4%B9%8B%E7%BB%98%E5%88%B6%E7%AE%80%E5%8D%95%E5%9C%B0%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[简介tidyverse是一个数据科学的综合包，里面包含了数据分析一系列流程涉及的包，今天主要利用它绘制地图。这并不是它的强项，绘制地图leaflet才是利器，本文只是tidyverse的一个小练习。目前该包支持有限的几个国家，比如美国，新西兰、意大利等，当然世界地图是支持的。 绘图1234library(tidyverse)map_data(&quot;usa&quot;)%&gt;% ggplot(aes(x=long, y=lat, group=group))+ geom_polygon() 可以绘制美国的不同州，就行我国的省份一样123map_data(&quot;state&quot;)%&gt;% ggplot(aes(x=long, y=lat, group=group))+ geom_polygon(color=&quot;white&quot;) 另外我们可以只单独绘制几个state1234map_data(&quot;state&quot;)%&gt;% filter(region%in%c(&quot;california&quot;,&quot;nevada&quot;,&quot;oregon&quot;,&quot;washington&quot;))%&gt;% ggplot(aes(x=long, y=lat, group=group))+ geom_polygon(color=&quot;red&quot;) 再绘制细一点的地图，相当于市、县等fig.height=6, fig.width=4&#125;1234map_data(&quot;county&quot;)%&gt;% filter(region %in% c(&quot;california&quot;,&quot;nevada&quot;,&quot;oregon&quot;,&quot;washington&quot;))%&gt;% ggplot(aes(x=long, y=lat, group=group))+ geom_polygon(color=&quot;white&quot;) 世界地图很简单，只需将map_data()里的usa换成world就行 12map_data(&quot;world&quot;)%&gt;%ggplot(aes(x=long, y=lat, group=group))+ geom_polygon(color=&quot;white&quot;) 在世界地图中标出中国1234map_data(&quot;world&quot;)%&gt;% filter(region==&quot;China&quot;)%&gt;% ggplot(aes(x=long, y=lat, group=group))+ geom_polygon(fill=&quot;red&quot;) 美帝用心险恶，不承认台湾属于中国,自己添上去就是了1234map_data(&quot;world&quot;)%&gt;% filter(region==c(&quot;China&quot;,&quot;Taiwan&quot;))%&gt;% ggplot(aes(x=long, y=lat, group=group))+ geom_polygon(fill=&quot;red&quot;) SessionInfo123456789101112131415161718192021222324252627282930313233343536sessionInfo()## R version 3.4.1 (2017-06-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 15063)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] bindrcpp_0.2 maps_3.2.0 dplyr_0.7.2 ## [4] purrr_0.2.3 readr_1.1.1 tidyr_0.7.1 ## [7] tibble_1.3.4 ggplot2_2.2.1 tidyverse_1.1.1 ## [10] RevoUtilsMath_10.0.0## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.12 cellranger_1.1.0 compiler_3.4.1 plyr_1.8.4 ## [5] bindr_0.1 forcats_0.2.0 tools_3.4.1 digest_0.6.12 ## [9] lubridate_1.6.0 jsonlite_1.5 evaluate_0.10.1 nlme_3.1-131 ## [13] gtable_0.2.0 lattice_0.20-35 pkgconfig_2.0.1 rlang_0.1.2 ## [17] psych_1.7.8 yaml_2.1.14 parallel_3.4.1 haven_1.1.0 ## [21] xml2_1.1.1 httr_1.3.1 stringr_1.2.0 knitr_1.17 ## [25] hms_0.3 RevoUtils_10.0.5 rprojroot_1.2 grid_3.4.1 ## [29] glue_1.1.1 R6_2.2.2 readxl_1.0.0 foreign_0.8-69 ## [33] rmarkdown_1.6 modelr_0.1.1 reshape2_1.4.2 magrittr_1.5 ## [37] backports_1.1.0 scales_0.5.0 htmltools_0.3.6 rvest_0.3.2 ## [41] assertthat_0.2.0 mnormt_1.5-5 colorspace_1.3-2 labeling_0.3 ## [45] stringi_1.1.5 lazyeval_0.2.0 munsell_0.4.3 broom_0.4.2 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>tidyverse</tag>
        <tag>map</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建及自定义ggplot分面图形参数]]></title>
    <url>%2F2017%2F09%2F14%2F%E5%88%9B%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89ggplot%E5%88%86%E9%9D%A2%E5%9B%BE%E5%BD%A2%E5%8F%82%E6%95%B0%2F</url>
    <content type="text"><![CDATA[简介ggplot2有一个十分重要的功能就是分面，而今天要讲得R包ggpubr中也有一个函数facet()专门用来进行分面操作。 安装1234install.packages(&quot;ggpubr&quot;)#orif(!require(devtools)) install.packages(&quot;devtools&quot;)devtools::install_github(&quot;kassambara/ggpubr&quot;) 绘图1234library(ggpubr)df &lt;- ToothGrowthdf$dose &lt;- as.factor(df$dose)head(df) 1234567## len supp dose## 1 4.2 VC 0.5## 2 11.5 VC 0.5## 3 7.3 VC 0.5## 4 5.8 VC 0.5## 5 6.4 VC 0.5## 6 10.0 VC 0.5 12p &lt;- ggdensity(df, x=&quot;len&quot;, fill = &quot;dose&quot;, palette = &quot;jco&quot;, ggtheme = theme_light(), legend=&quot;top&quot;)p 分面水平方向分面按照变量supp进行水平方向的分面1facet(p, facet.by = &quot;supp&quot;) 竖直方向分面按照变量supp进行竖直方向的分面1facet(p, facet.by = &quot;supp&quot;, ncol = 1) 双变量分面12#divide with &quot;supp&quot; vertical, &quot;dose&quot; horizontalfacet(p, facet.by = c(&quot;supp&quot;, &quot;dose&quot;), short.panel.labs = FALSE) 修改面板外观主要有以下参数进行修改： short.panel.label:默认为TRUE，此时变量名不会显示 panel.label: 通过自定义label来设置面板label,是一个list panel.labs.background: 控制面板背景，里面参数设置很多 panel.labs.font: 设置字体 下面演示一下 1234567891011#divide with &quot;supp&quot; vertical, &quot;sode&quot; horizontalfacet(p, facet.by = c(&quot;supp&quot;, &quot;dose&quot;), panel.labs = list( supp=c(&quot;Orange Juice&quot;, &quot;Vitamin C&quot;), dose=c(&quot;D0.5&quot;, &quot;D1&quot;, &quot;D2&quot;)), panel.labs.background = list( color=&quot;steelblue&quot;, fill=&quot;steelblue&quot;, size=0.5), panel.labs.font = list(color=&quot;white&quot;), panel.labs.font.x = list(angle=45, color=&quot;white&quot;)) SessionInfo123456789101112131415161718192021222324252627282930313233sessionInfo()## R version 3.4.1 (2017-06-30)## Platform: x86_64-pc-linux-gnu (64-bit)## Running under: Ubuntu 16.04.3 LTS## ## Matrix products: default## BLAS: /usr/lib/atlas-base/atlas/libblas.so.3.0## LAPACK: /usr/lib/atlas-base/atlas/liblapack.so.3.0## ## locale:## [1] LC_CTYPE=zh_CN.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=zh_CN.UTF-8 LC_COLLATE=zh_CN.UTF-8 ## [5] LC_MONETARY=zh_CN.UTF-8 LC_MESSAGES=zh_CN.UTF-8 ## [7] LC_PAPER=zh_CN.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] ggpubr_0.1.5 magrittr_1.5 ggplot2_2.2.1## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.12 bindr_0.1 knitr_1.17 munsell_0.4.3 ## [5] colorspace_1.3-2 R6_2.2.2 rlang_0.1.2 stringr_1.2.0 ## [9] plyr_1.8.4 dplyr_0.7.3 tools_3.4.1 grid_3.4.1 ## [13] gtable_0.2.0 htmltools_0.3.6 yaml_2.1.14 lazyeval_0.2.0 ## [17] rprojroot_1.2 digest_0.6.12 assertthat_0.2.0 tibble_1.3.4 ## [21] bindrcpp_0.2 ggsci_2.7 reshape2_1.4.2 purrr_0.2.3 ## [25] glue_1.1.1 evaluate_0.10.1 rmarkdown_1.6 labeling_0.3 ## [29] stringi_1.1.5 compiler_3.4.1 scales_0.5.0 backports_1.1.0 ## [33] pkgconfig_2.0.1 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggpubr</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ggpubr包学习笔记之轻松修改图形参数]]></title>
    <url>%2F2017%2F09%2F13%2Fggpubr%E5%8C%85%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%BD%BB%E6%9D%BE%E4%BF%AE%E6%94%B9%E5%9B%BE%E5%BD%A2%E5%8F%82%E6%95%B0%2F</url>
    <content type="text"><![CDATA[简介越学习包ggpubr越感觉其功能强大，本文主要讲解一下如何修改图形参数，我们知道ggplot2有着十分强大的绘图功能，但是其参数之复杂足以让人望而却步。ggpubr提供的函数ggpar()可以十分轻松地让我们修改图形参数，并且可以无缝对接到ggplot图形中。ggpar()可以修改以下图形参数： 图形标题，包括坐标轴标题以及图例标题 图例的位置以及外观 颜色必需的能修改 坐标轴limits 坐标转换 坐标刻度 主题 翻转等 安装包1234#two ways to isntall the ggpubr packageinstall.packages(&quot;ggpubr&quot;)#install the packages from the Githubdevtools::install_github(&quot;kassambara/ggpubr&quot;) 绘图1234library(ggpubr)#load ggpubr#basic plotsp &lt;- ggboxplot(ToothGrowth, x=&quot;dose&quot;, y=&quot;len&quot;, color=&quot;dose&quot;)p 12#add grids by the function grids()p+grids(linetype=&quot;dashed&quot;) 12#add panel borders lines by the function border()p+border(&quot;black&quot;) 12#change background colorp+bgcolor(&quot;#BFD5E3&quot;)+border(&quot;#BFD5E3&quot;) 修改标题以及坐标轴标签12345678p2 &lt;- ggpar(p, title = &quot;Box plot created with ggpubr&quot;, subtitle = &quot;Length by dose&quot;, caption = &quot;Source: ggpubr&quot;, xlab = &quot;Dose (mg)&quot;, ylab = &quot;Teeth length&quot;, legend.title = &quot;Dose (mg)&quot;)p2 修改标题以及标签的字体123456ggpar(p2, font.title = c(14, &quot;bold.italic&quot;, &quot;red&quot;), font.subtitle = c(10, &quot;orange&quot;), font.caption = c(10, &quot;orange&quot;), font.x = c(14, &quot;blue&quot;), font.y = c(14, &quot;#993333&quot;)) 当然也可以直接用函数font()123456p2+ font(&quot;title&quot;, size = 14, color = &quot;red&quot;, face = &quot;bold.italic&quot;)+ font(&quot;subtitle&quot;, size = 10, color = &quot;orange&quot;)+ font(&quot;caption&quot;, size = 10, color = &quot;orange&quot;)+ font(&quot;xlab&quot;, size = 12, color = &quot;blue&quot;)+ font(&quot;ylab&quot;, size = 12, color = &quot;#993333&quot;) 从上面可以看出我们可以一次性完成添加标题以及修改字体1234567ggpar(p, title = &quot;Plot of length \n by dose&quot;, xlab = &quot;Dose (mg)&quot;, legend.title = &quot;Dose (mg)&quot;, font.title = c(14, &quot;bold.italic&quot;, &quot;red&quot;), font.x = c(14, &quot;bold&quot;, &quot;#2E9FDF&quot;), font.y = c(14, &quot;bold&quot;, &quot;#E7B800&quot;)) 修改图例位置与外观1234ggpar(p, legend = &quot;right&quot;, legend.title = &quot;Dose (mg)&quot;)+ font(&quot;legend.title&quot;, color=&quot;blue&quot;, face = &quot;bold&quot;)+ font(&quot;legend.text&quot;, color = &quot;red&quot;) 颜色修改ggpar()中有一个参数palette，即调色板，除了可以我们自定义颜色外，还可以调用RColorBrewer中的调色板以及包ggsci中的专门用于学术杂志的配色。12#use custom color paletteggpar(p, palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;)) 12#use the RColorBrewer paletteggpar(p, palette = &quot;Dark2&quot;) 1ggpar(p, palette = &quot;grey&quot;) 12#use the ggsci paletteggpar(p, palette = &quot;npg&quot;)#nature 当然也可以直接用ggpubr中的函数color_palette()以及fill_palette()12#jco color palettep+color_palette(&quot;jco&quot;) 12#custom colorp+color_palette(c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;)) 颜色梯度ggpubr提供了两个函数用来处理颜色梯度：gradient_color()和gradient_fill()通过一个例子来看如何运作12345#first create a scatter plotp3 &lt;- ggscatter(mtcars, x=&quot;wt&quot;, y=&quot;mpg&quot;, color=&quot;mpg&quot;, size = 2)#change the gradient color#use one custom colorp3+gradient_color(&quot;red&quot;) 12#use two colorsp3+gradient_color(c(&quot;blue&quot;, &quot;red&quot;)) 12#three colorsp3+gradient_color(c(&quot;blue&quot;, &quot;white&quot;, &quot;red&quot;)) 12#use the RColorBrewer palettep3+gradient_color(&quot;RdYlBu&quot;) gradient_fill()用法也一样，不过是填充，这里就不演示了。 修改坐标轴limits、scales12#change y axis limitsggpar(p, ylim = c(0, 50)) 12#change y axis cale to log2ggpar(p, yscale = &quot;log2&quot;) 12#format axis scaleggpar(p, yscale = &quot;log2&quot;, format.scale = TRUE)#format.scale=TRUE说明y轴刻度也会scale 12#也可以直接用yscale()p+yscale(&quot;log2&quot;, .format = TRUE) 自定义坐标轴标签及刻度123456#change the font of x and y axis texts#rotate x and y textsp+ font(&quot;xy.text&quot;, size = 12, color = &quot;blue&quot;, face = &quot;bold&quot;)+ rotate_x_text(45)+ rotate_y_text(45) 123#remove ticks and axis textsp+rremove(&quot;ticks&quot;)+ rremove(&quot;axis.text&quot;) 修改主题默认主题为theme_pubr(),可以调用包ggthemes里面的主题12library(ggthemes)p+ggthemes::theme_economist() 移除ggplot组件通过ggpubr::rremove()可以移除组件：12p &lt;- ggboxplot(ToothGrowth, x=&quot;dose&quot;, y=&quot;len&quot;, ggtheme = theme_igray())p 1p+rremove(&quot;grid&quot;) SessionInfo1sessionInfo() 12345678910111213141516171819202122232425262728293031323334## R version 3.4.1 (2017-06-30)## Platform: x86_64-pc-linux-gnu (64-bit)## Running under: Ubuntu 16.04.3 LTS## ## Matrix products: default## BLAS: /usr/lib/atlas-base/atlas/libblas.so.3.0## LAPACK: /usr/lib/atlas-base/atlas/liblapack.so.3.0## ## locale:## [1] LC_CTYPE=zh_CN.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=zh_CN.UTF-8 LC_COLLATE=zh_CN.UTF-8 ## [5] LC_MONETARY=zh_CN.UTF-8 LC_MESSAGES=zh_CN.UTF-8 ## [7] LC_PAPER=zh_CN.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] ggthemes_3.4.0 ggpubr_0.1.5 magrittr_1.5 ggplot2_2.2.1 ## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.12 bindr_0.1 knitr_1.17 ## [4] munsell_0.4.3 colorspace_1.3-2 R6_2.2.2 ## [7] rlang_0.1.2 stringr_1.2.0 plyr_1.8.4 ## [10] dplyr_0.7.3 tools_3.4.1 grid_3.4.1 ## [13] gtable_0.2.0 htmltools_0.3.6 yaml_2.1.14 ## [16] lazyeval_0.2.0 rprojroot_1.2 digest_0.6.12 ## [19] assertthat_0.2.0 tibble_1.3.4 bindrcpp_0.2 ## [22] ggsci_2.7 RColorBrewer_1.1-2 purrr_0.2.3 ## [25] glue_1.1.1 evaluate_0.10.1 rmarkdown_1.6 ## [28] labeling_0.3 stringi_1.1.5 compiler_3.4.1 ## [31] scales_0.5.0 backports_1.1.0 pkgconfig_2.0.1 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>visualization</tag>
        <tag>ggpubr</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一篇关于国旗与奥运会奖牌的可视化笔记]]></title>
    <url>%2F2017%2F09%2F12%2F%E4%B8%80%E7%AF%87%E5%85%B3%E4%BA%8E%E5%9B%BD%E6%97%97%E4%B8%8E%E5%A5%A5%E8%BF%90%E4%BC%9A%E5%A5%96%E7%89%8C%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[简介本文主要介绍一个R包ggflags，可以用于绘制国旗。安装的话从Github上利用包devtools安装。 1devtools::install_github(&quot;baptiste/ggflags&quot;) 下面看个小例子来介绍一下 数据集1234567891011121314library(ggflags)#load packageset.seed(1111)#create the datasetdata &lt;- data.frame(x=rnorm(50), y=rnorm(50), country=sample(c(&quot;ar&quot;, &quot;us&quot;, &quot;cn&quot;, &quot;fr&quot;, &quot;gb&quot;, &quot;es&quot;), 50 ,replace = TRUE), stringsAsFactors=FALSE)head(data) x y country-0.0865801 -0.7055274 gb1.3225244 -0.5910791 fr0.6397020 -0.2796410 us1.1747866 -1.3209782 cn0.1162903 0.5851085 gb-2.9308464 0.0198323 ar 绘图12345library(ggplot2)ggplot(data, aes(x=x, y=y, country=country, size=x))+ geom_flag()+ scale_country()+ scale_size(range = c(0, 10)) 国旗的图片是来自于EmojiOne数据集,有兴趣的可以去看看了解一下。题目有奥运会奖牌，所以接下来就可视化一下索契冬奥运会各国奖牌，本次用国旗与国家联系起来。 爬取数据12345678library(dplyr)library(rvest)url &lt;- &quot;http://www.nbcolympics.com/medals&quot;medals &lt;- read_html(url)%&gt;% html_nodes(&quot;table&quot;)%&gt;% .[[1]]%&gt;% html_table()knitr::kable(head(medals)) 1234567Country Gold Silver Bronze TotalRussia 13 11 9 33United States 9 7 12 28Norway 11 5 10 26Canada 10 10 5 25Netherlands 8 7 9 24Germany 8 6 5 19 爬取完数据之后进行清洗 数据清洗本文重要的一环是将国家与国旗联系起来，因此首先要将国家名缩写弄出来，这就要用到countrycode这个包了。 12#install the packageinstall.packages(&quot;countrycode&quot;) 数据清洗123456789library(countrycode)library(tidyr)medals &lt;- medals%&gt;% mutate(code=countrycode(Country, &quot;country.name&quot;, &quot;iso2c&quot;))%&gt;% mutate(code=tolower(code))%&gt;% gather(medal_color, count, Gold, Silver, Bronze)%&gt;% mutate(medal_color=factor(medal_color, levels = c(&quot;Gold&quot;, &quot;Silver&quot;, &quot;Bronze&quot;)))%&gt;% drop_na(Country, code)knitr::kable(head(medals)) 1234567Country Total code medal_color countRussia 33 ru Gold 13United States 28 us Gold 9Norway 26 no Gold 11Canada 25 ca Gold 10Netherlands 24 nl Gold 8Germany 19 de Gold 8 绘图由于国家数量太多，并且好多国家奖牌数基本为零，因此我们筛选一下：只绘制总奖牌数不小于5的国家。 123456789101112131415161718medals%&gt;%filter(Total&gt;=5)%&gt;% ggplot(aes(x=reorder(Country, Total), y=count))+ geom_bar(stat = &quot;identity&quot;, aes(fill=medal_color))+ geom_flag(aes(y=-2,country=code), size=10)+ theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 7, vjust = 0.5))+ scale_fill_manual(values = c( &quot;Gold&quot;=&quot;gold&quot;, &quot;Bronze&quot; = &quot;#cd7f32&quot;, &quot;Silver&quot; = &quot;#C0C0C0&quot; ))+ scale_y_continuous(expand = c(0.1, 1))+ xlab(&quot;Country&quot;)+ ylab(&quot;Number of medals&quot;)+ theme_bw()+ theme(panel.grid = element_blank())+ theme(legend.justification = c(1, 0), legend.position = c(1, 0))+ theme(legend.title = element_blank())+ coord_flip() SessionInfo12345678910111213141516171819202122232425262728293031323334sessionInfo()## R version 3.4.1 (2017-06-30)## Platform: x86_64-pc-linux-gnu (64-bit)## Running under: Ubuntu 16.04.3 LTS## ## Matrix products: default## BLAS: /usr/lib/atlas-base/atlas/libblas.so.3.0## LAPACK: /usr/lib/atlas-base/atlas/liblapack.so.3.0## ## locale:## [1] LC_CTYPE=zh_CN.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=zh_CN.UTF-8 LC_COLLATE=zh_CN.UTF-8 ## [5] LC_MONETARY=zh_CN.UTF-8 LC_MESSAGES=zh_CN.UTF-8 ## [7] LC_PAPER=zh_CN.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] bindrcpp_0.2 tidyr_0.7.1 countrycode_0.19 rvest_0.3.2 ## [5] xml2_1.1.1 dplyr_0.7.3 ggflags_0.0.1 ggplot2_2.2.1 ## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.12 compiler_3.4.1 plyr_1.8.4 highr_0.6 ## [5] bindr_0.1 tools_3.4.1 digest_0.6.12 evaluate_0.10.1 ## [9] tibble_1.3.4 gtable_0.2.0 pkgconfig_2.0.1 rlang_0.1.2 ## [13] curl_2.8.1 yaml_2.1.14 stringr_1.2.0 httr_1.3.1 ## [17] knitr_1.17 tidyselect_0.2.0 rprojroot_1.2 grid_3.4.1 ## [21] glue_1.1.1 R6_2.2.2 XML_3.98-1.9 rmarkdown_1.6 ## [25] purrr_0.2.3 selectr_0.3-1 magrittr_1.5 backports_1.1.0 ## [29] scales_0.5.0 htmltools_0.3.6 assertthat_0.2.0 colorspace_1.3-2## [33] labeling_0.3 stringi_1.1.5 lazyeval_0.2.0 munsell_0.4.3 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>ggflags</tag>
        <tag>爬虫rvest</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[About me]]></title>
    <url>%2F2017%2F09%2F12%2FREADME%2F</url>
    <content type="text"><![CDATA[Introductiom The posts resource of my personal blog code &amp; data &amp; graph R &amp; RStudio If you are interested in my blog, you can go to the home of my blog About me 严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源 wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/]]></content>
  </entry>
  <entry>
    <title><![CDATA[利用tximport进行RNA-seq分析]]></title>
    <url>%2F2017%2F09%2F08%2F%E5%88%A9%E7%94%A8tximport%E8%BF%9B%E8%A1%8CRNA-seq%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[简介RNA-seq后续分析可以利用R包edgeR、DESeq2以及limma-voom等，而tximport包则可以将RNA-seq上游定量分析软件产生的结果导入到R语言中，进而方便后续的分析。具体的情况可以参考这篇文献： Charlotte Soneson, Michael I. Love, Mark D. Robinson (2015): Differential analyses for RNA-seq: transcript-level estimates improve gene-level inferences. F1000Research http://sci-hub.cc/10.12688/f1000research.7563.1 tximport具有以下优点： 对于样本之间因基因长度不同导致的差异具有纠正功能 一些上游分析软件(Salmon, Sailfish, kallisto)等的结果可以完美对接到R语言中，这些软件运行速度更快更稳定，且占用更少的内存 更高的灵敏度，因为它可以避免那些比对到多基因的片段的丢失 导入转录组数据下面我们将使用包tximportData中的数据进行演示，tximport可以处理多种类型的上游定量结果，只需要在参数type中设定就行。 先安装包123source(&quot;https://bioconductor.org/biocLite.R&quot;)options(BioC_mirror=&quot;http://mirrors.ustc.edu.cn/bioc/&quot;)#设置中科大镜像biocLite(&quot;tximportData&quot;) 123library(tximportData)dir &lt;- system.file(&quot;extdata&quot;, package = &quot;tximportData&quot;)#set directorylist.files(dir) 1234## [1] &quot;cufflinks&quot; &quot;kallisto&quot; &quot;kallisto_boot&quot; ## [4] &quot;rsem&quot; &quot;sailfish&quot; &quot;salmon&quot; ## [7] &quot;salmon_gibbs&quot; &quot;samples.txt&quot; &quot;samples_extended.txt&quot;## [10] &quot;tx2gene.csv&quot; 可以看到dir中存在这些文件，接下来我们其中的samples.txt读进来123456789samples &lt;- read.table(file.path(dir, &quot;samples.txt&quot;), header = TRUE)samples## pop center assay sample experiment run## 1 TSI UNIGE NA20503.1.M_111124_5 ERS185497 ERX163094 ERR188297## 2 TSI UNIGE NA20504.1.M_111124_7 ERS185242 ERX162972 ERR188088## 3 TSI UNIGE NA20505.1.M_111124_6 ERS185048 ERX163009 ERR188329## 4 TSI UNIGE NA20507.1.M_111124_7 ERS185412 ERX163158 ERR188288## 5 TSI UNIGE NA20508.1.M_111124_2 ERS185362 ERX163159 ERR188021## 6 TSI UNIGE NA20514.1.M_111124_4 ERS185217 ERX163062 ERR188356 再将salmon与samples以及quant.sf一起创建每个样本的文件地址1234files &lt;- file.path(dir, &quot;salmon&quot;, samples$run, &quot;quant.sf&quot;)names(files) &lt;- paste0(&quot;sample&quot;, 1:6)all(file.exists(files))## [1] TRUE 结果显示TRUE说明运行成功，可以进行下一步，要进行基因表达差异分析，首先要将转录本与基因名关联起来，这就需要我们创建一个两列的名为tx2gene的数据框，最简单的就是通过TxDb创建,再通过AnnotationDbi包里的函数select()进行选取123456789101112131415library(TxDb.Hsapiens.UCSC.hg19.knownGene)txdb &lt;- TxDb.Hsapiens.UCSC.hg19.knownGenek &lt;- keys(txdb, keytype = &quot;GENEID&quot;)df &lt;- select(txdb, keys = k, keytype = &quot;GENEID&quot;, columns = &quot;TXNAME&quot;)tx2gene &lt;- df[, 2:1]#tx ID在前，gene ID在后#这里我们演示就使用现有的tx2genetx2gene &lt;- read.csv(file.path(dir, &quot;tx2gene.csv&quot;))head(tx2gene)## TXNAME GENEID## 1 NM_130786 A1BG## 2 NR_015380 A1BG-AS1## 3 NM_001198818 A1CF## 4 NM_001198819 A1CF## 5 NM_001198820 A1CF## 6 NM_014576 A1CF 最后就是将转录组水平的数据导入就行了1234567891011121314library(tximport)library(readr)txi &lt;- tximport(files, type = &quot;salmon&quot;, tx2gene = tx2gene)names(txi)## [1] &quot;abundance&quot; &quot;counts&quot; &quot;length&quot; ## [4] &quot;countsFromAbundance&quot;head(txi$counts)## sample1 sample2 sample3 sample4 sample5 sample6## A1BG 109.232000 316.22400 110.638000 116.00000 86.38430 76.91630## A1BG-AS1 83.969700 138.44900 119.274000 151.08300 123.98500 103.25100## A1CF 9.030691 10.01847 5.019242 13.01820 25.21914 25.07356## A2M 24.000000 2.00000 21.000000 6.00000 38.00000 8.00000## A2M-AS1 1.000000 1.00000 1.000000 1.00000 0.00000 0.00000## A2ML1 3.047950 1.02987 4.076160 1.04945 3.07761 5.12409 差异分析下游分析主要使用Bioconductor包进行1234567library(edgeR)cts &lt;- txi$countsnormMat &lt;- txi$lengthnormMat &lt;- normMat/exp(rowMeans(log(normMat)))o &lt;- log(calcNormFactors(cts/normMat))+log(colSums(cts/normMat))y &lt;- DGEList(cts)y$offset &lt;- t(t(log(normMat))+o) 接下来的y就可以用来后续的分析 SessionInfo12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758sessionInfo()## R version 3.4.1 (2017-06-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 15063)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats4 parallel stats graphics grDevices utils datasets ## [8] methods base ## ## other attached packages:## [1] edgeR_3.18.1 ## [2] limma_3.32.5 ## [3] readr_1.1.1 ## [4] tximport_1.4.0 ## [5] TxDb.Hsapiens.UCSC.hg19.knownGene_3.2.2## [6] GenomicFeatures_1.28.4 ## [7] AnnotationDbi_1.38.2 ## [8] Biobase_2.36.2 ## [9] GenomicRanges_1.28.4 ## [10] GenomeInfoDb_1.12.2 ## [11] IRanges_2.10.3 ## [12] S4Vectors_0.14.3 ## [13] BiocGenerics_0.22.0 ## [14] tximportData_1.4.0 ## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.12 compiler_3.4.1 ## [3] XVector_0.16.0 bitops_1.0-6 ## [5] tools_3.4.1 zlibbioc_1.22.0 ## [7] biomaRt_2.32.1 digest_0.6.12 ## [9] bit_1.1-12 lattice_0.20-35 ## [11] evaluate_0.10.1 RSQLite_2.0 ## [13] memoise_1.1.0 tibble_1.3.4 ## [15] pkgconfig_2.0.1 rlang_0.1.2 ## [17] Matrix_1.2-11 DelayedArray_0.3.12 ## [19] DBI_0.7 yaml_2.1.14 ## [21] GenomeInfoDbData_0.99.0 rtracklayer_1.36.4 ## [23] stringr_1.2.0 knitr_1.17 ## [25] hms_0.3 Biostrings_2.44.2 ## [27] locfit_1.5-9.1 grid_3.4.1 ## [29] rprojroot_1.2 bit64_0.9-7 ## [31] R6_2.2.2 XML_3.98-1.9 ## [33] BiocParallel_1.10.1 rmarkdown_1.6 ## [35] blob_1.1.0 magrittr_1.5 ## [37] matrixStats_0.52.2 GenomicAlignments_1.12.2 ## [39] backports_1.1.0 Rsamtools_1.28.0 ## [41] htmltools_0.3.6 SummarizedExperiment_1.6.3## [43] stringi_1.1.5 RCurl_1.95-4.8 ## [45] rjson_0.2.15 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>RNA-seq</category>
      </categories>
      <tags>
        <tag>RNA-seq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[A brief introduction of salmon]]></title>
    <url>%2F2017%2F09%2F06%2FA-brief-introduction-of-salmon%2F</url>
    <content type="text"><![CDATA[简介Salmon是一款定量分析RNA-seq的软件，号称Fast、accurate、bias-aware and Don’t count…quantify定量分析转录本。本文主要简要的介绍一下Salmon。具体的情况可移步Salmon官网 安装可以去Github里下载Salmon进行安装123$ mkdir Salmon &amp;&amp; cd Salmon$ wget https://github.com/COMBINE-lab/salmon/releases/download/v0.8.2/Salmon-0.8.2_linux_x86_64.tar.gz$ tar zxvf Salmon-0.8.2_linux_x86_64.tar.gz 至于路径则根据自己电脑进行配置，这里不讲，安装成功的话则可以用salmon -h查看帮助文件。应该可以看到如下输出： 12345678910111213$ salmon -hSalmon v0.8.1Usage: salmon -h|--help or salmon -v|--version or salmon -c|--cite or salmon [--no-version-check] &lt;COMMAND&gt; [-h | options]Commands: cite Show salmon citation information index Create a salmon index quant Quantify a sample swim Perform super-secret operation 也可以利用conda安装，这样就可以省去很多麻烦。1$ conda install salmon 获取转录组Salmon是直接将原始序列map到转录组上而不是全基因组上(这是很重要的一点，千万不要搞混了，这也是作者一直在强调的)，这里我们就以拟南芥为例下载其转录组。 123#Creat a directory $ mkdir RNA-seq_test cd RNA-seq_test$ wget ftp://ftp.ensemblgenomes.org/pub/plants/release-28/fasta/arabidopsis_thaliana/cdna/Arabidopsis_thaliana.TAIR10.28.cdna.all.fa.gz -o athal.fa.gz 好了，现在转录组已下载好，接下来就是建立索引了 建立索引利用Salmon建立索引十分简单，一行命令就搞定12$ salmon index -t athal.fa.gz -i athal_index``` 这里解释一下几个参数： -t: 表示需要用到的转录组，这里是拟南芥的，我们刚下载好的athal.fa.gz -i: 表示我们建立的索引的名称，它是一个文件夹 更多的参数设置可以参考说明 获取序列数据一次试验数据往往很多，我们可以写一个脚本进行下载，这里简单示例一下：123456789101112#!/bin/bashmkdir datacd datafor i in &apos;seq 25 40&apos;;do madir DRR0161$&#123;i&#125;; cd DRR0161$&#123;i&#125;; wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/DRR016/DRR0161$&#123;i&#125;/DRR0161$&#123;i&#125;_1.fastq.gz; wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/DRR016/DRR0161$&#123;i&#125;/DRR0161$&#123;i&#125;_2.fastq.gz; cd ..; donecd .. 将其保存为obtain_reads.sh,将其运行只需以下命令就行：1$ bash obtain_reads.sh 定量样本这次也写一个简单脚本进行定量12345678910#!/bin/bashfor fn in data/DRR0161&#123;25..40&#125;;dosamp=`basename $&#123;fn&#125;`echo &quot;Processing sample $&#123;samp&#125;&quot;salmon quant -i athal_index -l A \ -1 $&#123;fn&#125;/$&#123;samp&#125;_1.fastq.gz \ -2 $&#123;fn&#125;/$&#123;samp&#125;_2.fastq.gz \ -p 8 -o quants/$&#123;samp&#125;_quantdone 这里简单说明一下几个参数： -i: 用来告诉salmon哪里寻找索引index -l A: 告诉salmon自行决定是何种类型的序列数据 -1，-2：就是两端测序的两个序列了 -p 8: 8线程 -o: 输出文件，这里是所有输出文件都保存至quants，并且文件命名为sample_quant 更多参数选择及说明可以参考说明文件这里每个样品文件里都含有一个主文件quant.sf。在后续的差异分析中有重要作用，后续再讲。定量之后接下来就是进行具体分析了，一般来说都在R里面进行，R&amp;Bioconductor有大量的包进行下游的分析，比如DESeq2、edgeR、limma以及sleuth等，后续文章我会讲解如何通过 tximport将定量化的转录组数据导入到R语言中进行差异分析。 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>RNA-seq</category>
      </categories>
      <tags>
        <tag>RNA-seq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图像处理R包magick学习笔记]]></title>
    <url>%2F2017%2F09%2F03%2F%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86R%E5%8C%85magick%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[简介本文主要简单介绍一下magick包，主要用于图像处理 12#安装的话就直接从CRAN安装进行install.packages(&quot;magick&quot;) 1234#Load the packagelibrary(magick)#查看支持哪些格式str(magick_config()) 1234567891011121314151617181920212223## List of 21## $ version :Class &apos;numeric_version&apos; hidden list of 1## ..$ : int [1:4] 6 9 9 9## $ modules : logi FALSE## $ cairo : logi TRUE## $ fontconfig : logi FALSE## $ freetype : logi TRUE## $ fftw : logi TRUE## $ ghostscript : logi TRUE## $ jpeg : logi TRUE## $ lcms : logi TRUE## $ libopenjp2 : logi FALSE## $ lzma : logi TRUE## $ pangocairo : logi TRUE## $ pango : logi TRUE## $ png : logi TRUE## $ rsvg : logi TRUE## $ tiff : logi TRUE## $ webp : logi TRUE## $ wmf : logi FALSE## $ x11 : logi FALSE## $ xml : logi TRUE## $ zero-configuration: logi FALSE 可以看出大部分格式都是支持的 读取图像读取的话可以直接从本地读取，也可以读取URL格式的图片，主要通过image_read()来读取，image_info()则可以显示图像的一些属性数据。123#读取网上随便选的图片night_king &lt;- image_read(&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/170903/ha6Cchfk38.jpg?imageslim&quot;)image_info(night_king) 12## format width height colorspace filesize## 1 JPEG 189 267 sRGB 6449 12#通过image_write()可以讲图片以任何格式输出，比如将刚读取的图片以png格式输出。image_write(night_king, path = &quot;night_king.png&quot;, format = &quot;png&quot;) 转换格式通过image_convert()可以将图片转换为我们需要的格式，比如这里我们可以将night_king的格式转换为png格式12night_king.png &lt;- image_convert(night_king, &quot;png&quot;)image_info(night_king.png) 12## format width height colorspace filesize## 1 PNG 189 267 sRGB 0 可以看到这里的filesize为0，直到被渲染（这里涉及到ImageMagick方面，我不是很懂）。 预览在RStudio中可以查看我们读取的图片 转换(transformations)magick提供一系列函数对图片进行裁剪以及编辑，主要有以下函数： image_crop(image, “100x150+50”):裁剪 image_scale(image, “200”):按宽比例进行放大缩小 image_scale(image, “x200”):按高比例进行放大缩小 image_fill(image, “blue”, “+100+200”):对特定部位着色 image_border(image, “red”, “20x10”):添加边框 下面我们来试试这些函数123#Example imagewolf &lt;- image_read(&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/170903/4h96Df21AI.png?imageslim&quot;)print(wolf) 12#Add 20px left/right and 10px top/bottomimage_border(image_background(wolf, &quot;hotpink&quot;), &quot;#000080&quot;, &quot;20x10&quot;) 12#trim marginsimage_trim(wolf) 12#裁剪image_crop(wolf, &quot;500x300+50&quot;) 12#Resizeimage_scale(wolf, &quot;300&quot;)#width:300px 12#Resizeimage_scale(wolf, &quot;x300&quot;)#heigth:300px 12#Rotate or mirrorimage_rotate(wolf, 45) 12#Flipimage_flip(wolf) 12#Flopimage_flop(wolf) 12#Paint image_fill(wolf, &quot;red&quot;, point = &quot;+190+100&quot;, fuzz = 4000) 这个函数最难掌握，我本来是想将wolf的眼睛渲染成红色，但是不断调整point以及fuzz都没弄成，感兴趣的可以自己捣鼓捣鼓。 12#Add randomnessimage_blur(wolf, 10, 5) 可以通过调整参数来设置模糊度 1image_noise(wolf) 12#Silly filtersimage_charcoal(wolf) 1image_oilpaint(wolf) 1image_negate(wolf) 文字注释12#Add some text on the imageimage_annotate(wolf, &quot;I am the King of wolf&quot;, size=25, gravity = &quot;southeast&quot;, color=&quot;gold&quot;) 当然也可以自定义text 12#customize the textimage_annotate(wolf, &quot;I am the King&quot;, size=30, color=&quot;red&quot;, boxcolor = &quot;pink&quot;, degrees = 45, location = &quot;+30+30&quot;) 还可以设置字体 12#Set the font times-new-romanimage_annotate(wolf, &quot;I am the King&quot;, size=30, color=&quot;red&quot;, boxcolor = &quot;pink&quot;, degrees = 45, location = &quot;+30+30&quot;, font = &apos;times-new-roman&apos;) 管道操作你没看错，magick支持管道操作，下面试试 123456library(magrittr)wolf%&gt;% image_rotate(270)%&gt;% image_background(&quot;white&quot;, flatten = TRUE)%&gt;% image_border(&quot;red&quot;, &quot;10x10&quot;)%&gt;% image_annotate(&quot;I am the King&quot;, color=&apos;red&apos;, size = 25, location = &quot;+100+300&quot;) 图片向量magick除了支持管道操作外，还支持图层叠加、拼图以及动图处理，来个经典的动态地球123earth &lt;- image_read(&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/170903/a9CjAEGiC5.gif&quot;)length(earth)print(earth) 123rev(earth) %&gt;% image_flip() %&gt;% image_annotate(&quot;This is the Earth&quot;, size = 20, color = &quot;white&quot;) 不知什么鬼，图片竟然显示出来乱的，电脑渣的话还是别搞动画 图层123456bigdata &lt;- image_read(&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/170903/JclK3efbB3.jpg?imageslim&quot;)logo &lt;- image_read(&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/170903/JdjdB88CLm.png?imageslim&quot;)frink &lt;- image_read(&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/170903/E5fbmb1FIb.png?imageslim&quot;)img &lt;- c(bigdata, logo, frink)img &lt;- image_scale(img, &quot;300x300&quot;)image_mosaic(img) 动画1image_animate(image_scale(img, &quot;200x200&quot;), fps = 1, dispose = &quot;previous&quot;)#fps控制放映速度 静图+动图静图就用我以前绘制过的，具体可看博客123456789101112image1 &lt;- image_read(&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/170903/kLeL888DbI.png?imageslim&quot;)dance_man &lt;- image_read(&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/170903/86iEDe36lf.gif&quot;)dance_man &lt;- image_scale(dance_man, &quot;200&quot;)#Background imagebackground &lt;- image_background(image_scale(image1, &quot;800&quot;), &quot;white&quot;, flatten = TRUE)#Combine and flatten framesframes &lt;- image_apply(dance_man, function(frame)&#123; image_composite(background, frame, offset = &quot;+500+270&quot;)&#125;)#Turn frames into animationanimation &lt;- image_animate(frames, fps = 10)print(animation) 还有一些有趣的功能这里我就不讲了，有兴趣的可以试试，还是很好玩的。 SessionInfo1234567891011121314151617181920212223242526sessionInfo()## R version 3.4.1 (2017-06-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 15063)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] magrittr_1.5 magick_1.2 ## ## loaded via a namespace (and not attached):## [1] compiler_3.4.1 backports_1.1.0 rprojroot_1.2 tools_3.4.1 ## [5] htmltools_0.3.6 curl_2.8.1 yaml_2.1.14 Rcpp_0.12.12 ## [9] stringi_1.1.5 rmarkdown_1.6 knitr_1.17 stringr_1.2.0 ## [13] digest_0.6.12 evaluate_0.10.1 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>magick</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化学习笔记之基因组数据可视化]]></title>
    <url>%2F2017%2F08%2F25%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E5%9B%A0%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%2F</url>
    <content type="text"><![CDATA[本文主要利用ggpubr包来探索基因组数据,主要是可视化TCGA基因组数据的基因表达谱。1library(ggpubr)#加载包 TCGA是一个包含大量癌症数据的数据库，由Marcin Kosinski创建的RTCGA包可以让我们很方便的获取这些数据。主要有三个包：RTCGA、RTCGA.clininal、RTCGA.mRNA。安装方法如下：1234567#Load the bioconductor installersource(&quot;http://bioconductor.org/biocLite.R&quot;&quot;)#设置镜像，这里我们选择中科大的镜像options(BioC_mirror=&quot;http://ustc.edu.cn/bioc&quot;)#下载包biocLite(&quot;RTCGA&quot;)biocLite(&quot;RTCGA.clininal&quot;)biocLite(&quot;RTCGA.mRNA&quot;) 123library(RTCGA)#查看每一种癌症的数据集infoTCGA() RTCGA包里的函数expressionTCGA()可以十分方便地从不同数据集中提取基因的表达值，下面我们将从三个数据集BRCA(乳腺癌)、OV(卵巢癌)、LUSC(肺癌)中提取五个基因的表达值。12345library(RTCGA)library(RTCGA.mRNA)expr &lt;- expressionsTCGA(BRCA.mRNA, OV.mRNA, LUSC.mRNA, extract.cols = c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;, &quot;ESR1&quot;, &quot;MUC1&quot;))expr 查看每个数据集中的样品数量12345nb_samples &lt;- table(expr$dataset)nb_samples## ## BRCA.mRNA LUSC.mRNA OV.mRNA ## 590 154 561 为了方便，我们将部分数据集名称简化123expr$dataset &lt;- gsub(pattern = &quot;.mRNA&quot;, replacement = &quot;&quot;, expr$dataset)expr$bcr_patient_barcode &lt;- paste0(expr$dataset, c(1:590, 1:561, 1:154))expr 接下来绘制图形：1、箱线图123library(ggpubr)ggboxplot(expr, x=&quot;dataset&quot;, y=&quot;GATA3&quot;, title=&quot;GATA3&quot;, ylab = &quot;Expression&quot;, color = &quot;dataset&quot;, palette = &quot;jco&quot;) 我们可以一次性绘制多个基因，然后一一查看，而不用每次写代码：123456#Creat a list of plotsp &lt;- ggboxplot(expr, x=&quot;dataset&quot;, y=c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;, &quot;ESR1&quot;, &quot;MUC1&quot;),title = c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;, &quot;ESR1&quot;, &quot;MUC1&quot;), ylab = &quot;EXpression&quot;, color = &quot;dataset&quot;, palette = &quot;jco&quot;)#接下来一一查看每个plotp$GATA3 1p$PTEN 1p$XBP1 1p$ESR1 1p$MUC1 当一次性绘制多个基因时，xlab,ylab,title也可以是一个跟y等长的向量。 接下来就是添加p-value以及显著性了123my_comparisons &lt;- list(c(&quot;BRCA&quot;, &quot;OV&quot;), c(&quot;OV&quot;, &quot;LUSC&quot;))ggboxplot(expr, x=&quot;dataset&quot;, y=&quot;GATA3&quot;, title = &quot;GATA3&quot;, ylab = &quot;Expression&quot;, color = &quot;dataset&quot;, palette = &quot;jco&quot;)+ stat_compare_means(comparisons = my_comparisons) 也可以查看每个类型中每一个基因的比较：1compare_means(c(GATA3, PTEN, XBP1)~dataset, data = expr) 可以通过select以及remove来决定比较那几个类型，比如这里我们只比较BRCA和OV12ggboxplot(expr, x=&quot;dataset&quot;, y=&quot;GATA3&quot;, title = &quot;GATA3&quot;, ylab = &quot;Expression&quot;, color = &quot;dataset&quot;, palette = &quot;jco&quot;, select = c(&quot;BRCA&quot;, &quot;OV&quot;))#通过select选择 12ggboxplot(expr, x=&quot;dataset&quot;, y=&quot;GATA3&quot;, title = &quot;GATA3&quot;, ylab = &quot;Expression&quot;, color = &quot;dataset&quot;, palette = &quot;jco&quot;, remove = &quot;BRCA&quot;)#通过remove选择 通过order来改变各类型在x轴上的顺序12ggboxplot(expr, x=&quot;dataset&quot;, y=&quot;GATA3&quot;, title = &quot;GATA3&quot;, ylab = &quot;Expression&quot;, color = &quot;dataset&quot;, palette = &quot;jco&quot;, order = c(&quot;LUSC&quot;, &quot;OV&quot;, &quot;BRCA&quot;)) 通过rotate=TRUE来变换坐标轴12ggboxplot(expr, x=&quot;dataset&quot;, y=&quot;GATA3&quot;, title = &quot;GATA3&quot;, ylab = &quot;Expression&quot;, color = &quot;dataset&quot;, palette = &quot;jco&quot;, rotate=TRUE) 通过combine=TRUE来进行分面（类似于facet）12ggboxplot(expr, x=&quot;dataset&quot;, y=c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;), ylab = &quot;Expression&quot;, color = &quot;dataset&quot;, palette = &quot;jco&quot;, combine = TRUE) 通过merge=TRUE或者merge=“axis”将三个类型的plot绘制在一个panel中12ggboxplot(expr, x=&quot;dataset&quot;, y=c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;), ylab = &quot;Expression&quot;,color = &quot;dataset&quot;, palette = &quot;jco&quot;, merge = TRUE) 通过merge=flip利用不同癌症类型进行group12ggboxplot(expr, x=&quot;dataset&quot;, y=c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;), ylab = &quot;Expression&quot;, palette = &quot;jco&quot;, merge = &quot;flip&quot;) 通过add=jitter增加抖动点123ggboxplot(expr, x=&quot;dataset&quot;, y=c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;), combine = TRUE,color = &quot;dataset&quot;, palette = &quot;jco&quot;, ylab = &quot;Expression&quot;, add = &quot;jitter&quot;, add.params = list(size=0.1, jitter=0.2)) 通过add=dotplot增加dotplot123ggboxplot(expr, x=&quot;dataset&quot;, y=c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;), combine = TRUE, color = &quot;dataset&quot;, palette = &quot;jco&quot;, ylab = &quot;Expression&quot;, add = &quot;dotplot&quot;, add.params = list(binwidth=0.1, dotsize=0.2)) 很多时候我们很像知道箱线图两端的数据，我们可以通过label来进行展示12345ggboxplot(expr, x=&quot;dataset&quot;, y=c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;), combine = TRUE,color = &quot;dataset&quot;, palette = &quot;jco&quot;, ylab = &quot;Expression&quot;, add = &quot;jitter&quot;, add.params = list(size=0.1, jitter=0.2), label = &quot;bcr_patient_barcode&quot;, label.select = list(top.up=2, top.down=2), font.label = list(size=9, face=&quot;italic&quot;), repel = TRUE) 2、小提琴图12ggviolin(expr,x=&quot;dataset&quot;, y=c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;), combine = TRUE, color = &quot;dataset&quot;, palette = &quot;jco&quot;, ylab = &quot;Expression&quot;, add = &quot;boxplot&quot;) 通过修改add来更改添加小提琴图里的图形12ggviolin(expr,x=&quot;dataset&quot;, y=c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;), combine = TRUE, color = &quot;dataset&quot;, palette = &quot;jco&quot;, ylab = &quot;Expression&quot;, add = &quot;median_iqr&quot;) add有好多选项可以选择：“mean”, “mean_se”, “mean_sd”, “mean_ci”, “mean_range”, “median”, “median_iqr”, “median_mad”, “median_range”.有兴趣的可以自己试试。 3、带状图123ggstripchart(expr, x=&quot;dataset&quot;, y=c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;), combine = TRUE,color = &quot;dataset&quot;, palette = &quot;jco&quot;, size = 0.1, jitter=0.2, ylab = &quot;Expression&quot;, add = &quot;median_iqr&quot;, add.params = list(color=&quot;red&quot;)) 4、dotplot123ggdotplot(expr, x=&quot;dataset&quot;, y=c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;), combine = TRUE, color = &quot;dataset&quot;, palette = &quot;jco&quot;, fill = &quot;white&quot;, binwidth = 0.1, ylab = &quot;Expression&quot;,add = &quot;median_iqr&quot;, add.params = list(size=0.9)) 5、密度图12ggdensity(expr, x=c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;), y=&quot;..density..&quot;, combine = TRUE, xlab = &quot;Expression&quot;, add = &quot;median&quot;, rug = TRUE) 将dataset映射给颜色123ggdensity(expr, x=c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;), y=&quot;..density..&quot;, combine = TRUE,xlab = &quot;Expression&quot;, add = &quot;median&quot;, rug = TRUE, color = &quot;dataset&quot;, fill = &quot;dataset&quot;, palette = &quot;jco&quot;) 将三幅图整合进一个panel中，并对y轴进行..count..，而不是..density..123ggdensity(expr, x=c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;), y=&quot;..count..&quot;, xlab = &quot;Expression&quot;,add = &quot;median&quot;, rug = TRUE, palette = &quot;jco&quot;)## $GATA3 1## ## $PTEN 1## ## $XBP1 颜色映射，将x轴变量映射给颜色12ggdensity(expr, x=c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;), y=&quot;..count..&quot;, color = &quot;.x.&quot;, fill = &quot;.x.&quot;, merge = TRUE, xlab = &quot;Expression&quot;, add = &quot;median&quot;, rug = TRUE, palette = &quot;jco&quot;) 按dataset进行分面123ggdensity(expr, x=c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;), y=&quot;..count..&quot;, color = &quot;.x.&quot;, fill = &quot;.x.&quot;, merge = TRUE, xlab = &quot;Expression&quot;, add = &quot;median&quot;, rug = TRUE, palette = &quot;jco&quot;, facet.by = &quot;dataset&quot;) 6、直方图123gghistogram(expr, x=c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;), y=&quot;..density..&quot;, xlab = &quot;Expression&quot;, add = &quot;median&quot;, rug = TRUE)## $GATA3 1## ## $PTEN 1## ## $XBP1 将dataset映射给颜色123gghistogram(expr, x=c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;), y=&quot;..density..&quot;, xlab = &quot;Expression&quot;, add = &quot;median&quot;, rug = TRUE, color = &quot;dataset&quot;, fill = &quot;dataset&quot;, palette = &quot;jco&quot;)## $GATA3 1## ## $PTEN 1## ## $XBP1 后面还有一些将几幅图整合在一个panel以及分面等大同小异就不讲了。7、Q-Q图1ggqqplot(expr, x=c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;), combine = TRUE, size = 0.5) 颜色映射12ggqqplot(expr, x=c(&quot;GATA3&quot;, &quot;PTEN&quot;, &quot;XBP1&quot;), combine = TRUE, size = 0.5, color = &quot;dataset&quot;, palette = &quot;jco&quot;) #sessionInfo123456789101112131415161718192021222324252627282930313233343536373839404142434445sessionInfo()## R version 3.4.0 (2017-04-21)## Platform: x86_64-pc-linux-gnu (64-bit)## Running under: Ubuntu 16.04.2 LTS## ## Matrix products: default## BLAS: /usr/lib/libblas/libblas.so.3.6.0## LAPACK: /usr/lib/lapack/liblapack.so.3.6.0## ## locale:## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=zh_CN.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=zh_CN.UTF-8 LC_MESSAGES=en_US.UTF-8## [7] LC_PAPER=zh_CN.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] bindrcpp_0.2 RTCGA.mRNA_1.4.0 RTCGA_1.6.0 ggpubr_0.1.3 ## [5] magrittr_1.5 ggplot2_2.2.1 ## ## loaded via a namespace (and not attached):## [1] zoo_1.8-0 reshape2_1.4.2 purrr_0.2.2.2 ## [4] splines_3.4.0 ggthemes_3.4.0 lattice_0.20-35 ## [7] colorspace_1.3-2 htmltools_0.3.6 viridisLite_0.2.0## [10] yaml_2.1.14 survival_2.41-3 XML_3.98-1.9 ## [13] survMisc_0.5.4 rlang_0.1.1 foreign_0.8-68 ## [16] glue_1.1.0 bindr_0.1 plyr_1.8.4 ## [19] stringr_1.2.0 ggsignif_0.2.0 munsell_0.4.3 ## [22] gtable_0.2.0 ggsci_2.7 rvest_0.3.2 ## [25] psych_1.7.5 evaluate_0.10 labeling_0.3 ## [28] knitr_1.16 parallel_3.4.0 broom_0.4.2 ## [31] Rcpp_0.12.11 xtable_1.8-2 scales_0.4.1## [34] backports_1.1.0 cmprsk_2.2-7 km.ci_0.5-2 ## [37] gridExtra_2.2.1 mnormt_1.5-5 digest_0.6.12 ## [40] stringi_1.1.5 ggrepel_0.6.5 dplyr_0.7.0 ## [43] KMsurv_0.1-5 grid_3.4.0 rprojroot_1.2 ## [46] tools_3.4.0 lazyeval_0.2.0 tibble_1.3.3 ## [49] tidyr_0.6.3 Matrix_1.2-10 data.table_1.10.4## [52] xml2_1.1.1 survminer_0.4.0 assertthat_0.2.0 ## [55] rmarkdown_1.6 httr_1.2.1 viridis_0.4.0 ## [58] R6_2.2.2 nlme_3.1-131 compiler_3.4.0 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggpubr</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ggplot2学习笔记之图形排列]]></title>
    <url>%2F2017%2F08%2F24%2Fggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9B%BE%E5%BD%A2%E6%8E%92%E5%88%97%2F</url>
    <content type="text"><![CDATA[R语言基本绘图函数中可以利用par()以及layout()来进行图形排列，但是这两个函数对于ggplot图则不太适用，本文主要讲解如何对多ggplot图形多页面进行排列。主要讲解如何利用包gridExtra、cowplot以及ggpubr中的函数进行图形排列。 绘制图形12345678#load packageslibrary(gridExtra)library(cowplot)library(ggpubr)#dataset ToothGrowth and mtcarsmtcars$name &lt;- rownames(mtcars)mtcars$cyl &lt;- as.factor(mtcars$cyl)head(mtcars[, c(&quot;name&quot;, &quot;wt&quot;,&quot;mpg&quot;, &quot;cyl&quot;)]) 12345678910111213#First let&apos;s create some plots#Box plot(bxp)bxp &lt;- ggboxplot(ToothGrowth, x=&quot;dose&quot;, y=&quot;len&quot;, color = &quot;dose&quot;, palette = &quot;jco&quot;)#Dot plot(dp)dp &lt;- ggdotplot(ToothGrowth, x=&quot;dose&quot;, y=&quot;len&quot;, color = &quot;dose&quot;, palette = &quot;jco&quot;, binwidth = 1)#An ordered Bar plot(bp)bp &lt;- ggbarplot(mtcars, x=&quot;name&quot;, y=&quot;mpg&quot;, fill=&quot;cyl&quot;, #change fill color by cyl color=&quot;white&quot;, #Set bar border colors to white palette = &quot;jco&quot;, #jco jourbal color palette sort.val = &quot;asc&quot;, #Sort the value in ascending order sort.by.groups = TRUE, #Sort inside each group x.text.angle=90 #Rotate vertically x axis texts )bp+font(&quot;x.text&quot;, size = 8) 1234567#Scatter plots(sp)sp &lt;- ggscatter(mtcars, x=&quot;wt&quot;, y=&quot;mpg&quot;, add = &quot;reg.line&quot;, #Add regression line conf.int = TRUE, #Add confidence interval color = &quot;cyl&quot;, palette = &quot;jco&quot;,#Color by group cyl shape = &quot;cyl&quot; #Change point shape by groups cyl )+ stat_cor(aes(color=cyl), label.x = 3) #Add correlation coefficientsp 图形排列 多幅图形排列于一面 ggpubr::ggarrange()1ggarrange(bxp, dp, bp+rremove(&quot;x.text&quot;), labels = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), ncol = 2, nrow = 2) cowplot::plot.grid()1plot_grid(bxp, dp, bp+rremove(&quot;x.text&quot;), labels = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), ncol = 2, nrow = 2) gridExtra::grid.arrange()1grid.arrange(bxp, dp, bp+rremove(&quot;x.text&quot;), ncol=2, nrow=2) 排列图形注释 ggpubr::annotate_figure() 12345figure &lt;- ggarrange(sp, bp+font(&quot;x.text&quot;, size = 10), ncol = 1, nrow = 2)annotate_figure(figure, top=text_grob(&quot;Visualizing mpg&quot;, color = &quot;red&quot;, face = &quot;bold&quot;, size=14), bottom = text_grob(&quot;Data source:\n mtcars data set&quot;, color = &quot;blue&quot;, hjust = 1, x=1, face = &quot;italic&quot;, size=10), left = text_grob(&quot;Figure arranged using ggpubr&quot;, color = &quot;green&quot;, rot = 90), right = &quot;I&apos;m done, thanks :-)!&quot;, fig.lab = &quot;Figure 1&quot;, fig.lab.face = &quot;bold&quot;) 绘图面板对齐 绘制生存曲线12345678910library(survival)head(colon[, c(1:4)])#Fit survival curvesfit &lt;- survfit(Surv(time, status)~adhere, data = colon)library(survminer)ggsurv &lt;- ggsurvplot(fit, data = colon, palette = &quot;jco&quot;, #jco palette pval = TRUE, pval.coord=c(500, 0.4), #Add p-value risk.table = TRUE #Add risk table)names(ggsurv)` 1## [1] &quot;plot&quot; &quot;table&quot; &quot;data.survplot&quot; &quot;data.survtable&quot; ggsurv是一个包含两部分的list plot：生存曲线 table：风险表可以用ggarrange()进行排列这两者1ggarrange(ggsurv$plot, ggsurv$table, heights = c(2, 0.7), ncol = 1, nrow = 2) 上图中的坐标轴没有对齐，可以通过参数align来设置1ggarrange(ggsurv$plot, ggsurv$table, heights = c(2, 0.7), ncol = 1, nrow = 2, align = &quot;v&quot;) 改变排列图的行列设置面板为两行两列，其中sp占据第一行的两列，bxp以及dp置于第二行的两列123ggarrange(sp, #First row with scatter plot(sp) ggarrange(bxp, dp, ncol = 2, labels = c(&quot;B&quot;,&quot;C&quot;)),#Second row with box and dot plot nrow = 2, labels = &quot;A&quot; #Labels of the scatter plot) R包cowplot cowplot::ggdraw()可以将图形置于特定位置, ggdraw()首先会初始化一个绘图面板， 接下来draw_plot()则是将图形绘制于初始化的绘图面板中，通过参数设置可以将图形置于特定位置。1draw_plot(plot, x=0, y=0, width=1, height=1) 其中： plot:将要放置的图形 x,y:控制图形位置 width,height:图形的宽度和高度 draw_plot_label():为图形添加标签1draw_plot_label(label, x=0, y=1, size=16, ...) 其中： label:标签 x,y:控制标签位置 size:标签字体大小 下面通过一个例子来讲解如何将多个图形放置在特定的位置。1234ggdraw()+ draw_plot(bxp, x=0, y=0.5, width=0.5, height = 0.5)+draw_plot(dp, x=0.5, y=0.5, width = 0.5, height = 0.5)+ draw_plot(bp, x=0, y=0, width = 1.5, height = 0.5)+ draw_plot_label(label = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), size = 15, x=c(0, 0.5, 0), y=c(1, 1, 0.5)) R包gridExtra gridExtra::arrangeGrop()改变行列分布 下面将sp置于第一行并横跨两列，而bxp和dp分别分布于第二行两列123grid.arrange(sp, #First row with one plot spaning over 2 columnsarrangeGrob(bxp, dp, ncol = 2), #Second row with 2plots in 2 different columns nrow=2) #number of rows 也可以通过函数grid.arrange中的layout_matrix来设置复杂的图形布局123grid.arrange(bp, #bar plot spaning two columns bxp, sp, #box plot amd scatter plot ncol=2, nrow=2, layout_matrix=rbind(c(1, 1), c(2, 3))) 要相对grid.arrange()以及arrangeGrob()的输出进行注释，首先要利用as_ggplot()将其转化为ggplot图形，进而利用函数draw_plot_label()对其进行注释。1234gt &lt;- arrangeGrob(bp, bxp, sp, layout_matrix = rbind(c(1,1),c(2, 3)))p &lt;- as_ggplot(gt)+ draw_plot_label(label = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), size = 15, x=c(0, 0, 0.5), y=c(1, 0.5, 0.5))p R包grid R包grid中的grid.layout()可以设置复杂的图形布局，viewport()可以定义一个区域用来安置图形排列，print()则用来将图形置于特定区域。 总结起来步骤如下： 创建图形p1,p2,p3,… grid.newpage()创建一个画布 创建图形布局，几行几列 定义布局的矩形区域 print：将图形置于特定区域12345678910111213library(grid)#Move to a new pagegrid.newpage()#Create layout:nrow=3, ncol=2pushViewport(viewport(layout = grid.layout(nrow=3, ncol=2)))#A helper function to define a region on the layoutdefine_region &lt;- function(row, col)&#123; viewport(layout.pos.row = row, layout.pos.col = col)&#125;#Arrange the plotsprint(sp, vp=define_region(row=1, col=1:2)) #Span over two columnsprint(bxp, vp=define_region(row=2, col=1))print(dp, vp=define_region(row=2, col=2))print(bp+rremove(&quot;x.text&quot;), vp=define_region(row=3, col=1:2)) 设置共同图例 ggpubr::ggarrange()可以为组合图形添加共同图例 common.legeng=TRUE:在图形旁边添加图例 legend：指定legend的位置，主要选项有：top、bottom、left、right。1ggarrange(bxp, dp, labels = c(&quot;A&quot;, &quot;B&quot;), common.legend = TRUE, legend = &quot;bottom&quot;) 含有边际密度图的散点图1234567891011sp &lt;- ggscatter(iris, x=&quot;Sepal.Length&quot;, y=&quot;Sepal.Width&quot;, color=&quot;Species&quot;, palette = &quot;jco&quot;, size=3, alpha=0.6)+border()#Marginal density plot of x(top panel) and y(right panel)xplot &lt;- ggdensity(iris, &quot;Sepal.Length&quot;, fill=&quot;Species&quot;,palette = &quot;jco&quot;)yplot &lt;- ggdensity(iris, &quot;Sepal.Width&quot;, fill=&quot;Species&quot;, palette = &quot;jco&quot;)+rotate()#Clean the plotsxplot &lt;- xplot+clean_theme()yplot &lt;- yplot+clean_theme()#Arrange the plotsggarrange(xplot, NULL, sp, yplot, ncol = 2, nrow = 2, align = &quot;hv&quot;, widths = c(2, 1), heights = c(1, 2), common.legend = TRUE) ggplot图、文本、表格组合12345678910density.p &lt;- ggdensity(iris, x=&quot;Sepal.Length&quot;, fill=&quot;Species&quot;, palette = &quot;jco&quot;)#Compute the summary table of Sepal.Lengthstable &lt;- desc_statby(iris, measure.var = &quot;Sepal.Length&quot;, grps = &quot;Species&quot;)stable &lt;- stable[, c(&quot;Species&quot;, &quot;length&quot;, &quot;mean&quot;, &quot;sd&quot;)]#Summary table plot, medium and themestable.p &lt;- ggtexttable(stable, rows = NULL, theme = ttheme(&quot;mOrange&quot;))text &lt;- paste(&quot;iris data set gives the measurements in cm&quot;, &quot;of the variables sepal length and width&quot;, &quot;and petal length and width, respectively,&quot;, &quot;for 50 flowers from each of 3 species of iris.&quot;, &quot;The species are Iris setosa, versicolor, and virginica.&quot;, sep = &quot; &quot;)text.p &lt;- ggparagraph(text = text, face = &quot;italic&quot;, size = 11, color = &quot;black&quot;)#Arrange the plots on the same pageggarrange(density.p, stable.p, text.p, ncol = 1, nrow = 3, heights = c(1, 0.5, 0.3)) ggplot图形中嵌入图形元素 ggplot2::annotation_custom()可以添加各种图形元素到ggplot图中1annotation_custom(grob, xmin, xmax, ymin, ymax) 其中： grob:要添加的图形元素 xmin, xmax: x轴方向位置（水平方向） ymin, ymax: y轴方向位置（竖直方向） ggplot图形中添加table1density.p+annotation_custom(ggplotGrob(stable.p), xmin = 5.5, xmax = 8, ymin = 0.7) ggplot图形中添加box plot1234567891011121314151617181920sp &lt;- ggscatter(iris, x=&quot;Sepal.Length&quot;, y=&quot;Sepal.Width&quot;, color = &quot;Species&quot;, palette = &quot;jco&quot;, size = 3, alpha=0.6)xbp &lt;- ggboxplot(iris$Sepal.Length, width = 0.3, fill = &quot;lightgray&quot;)+ rotate()+theme_transparent()ybp &lt;- ggboxplot(iris$Sepal.Width, width = 0.3, fill=&quot;lightgray&quot;)+theme_transparent()# Create the external graphical objects# called a &quot;grop&quot; in Grid terminologyxbp_grob &lt;- ggplotGrob(xbp)ybp_grob &lt;- ggplotGrob(ybp)#place box plots inside the scatter plotxmin &lt;- min(iris$Sepal.Length)xmax &lt;- max(iris$Sepal.Length)ymin &lt;- min(iris$Sepal.Width)ymax &lt;- max(iris$Sepal.Width)yoffset &lt;- (1/15)*ymaxxoffset &lt;- (1/15)*xmax# Insert xbp_grob inside the scatter plotsp+annotation_custom(grob = xbp_grob, xmin = xmin, xmax = xmax, ymin = ymin-yoffset, ymax = ymin+yoffset)+# Insert ybp_grob inside the scatter plotannotation_custom(grob = ybp_grob, xmin = xmin-xoffset, xmax=xmin+xoffset, ymin=ymin, ymax=ymax) ggplot图形添加背景12#import the imageimg.file &lt;- system.file(file.path(&quot;images&quot;, &quot;background-image.png&quot;), package = &quot;ggpubr&quot;)img &lt;- png::readPNG(img.file) 利用ggpubr::background_image()为ggplot图形添加背景图12345library(ggplot2)library(ggpubr)ggplot(iris, aes(Species,Sepal.Length))+background_image(img)+geom_boxplot(aes(fill=Species), color=&quot;white&quot;)+ fill_palette(&quot;jco&quot;) 修改透明度123ggplot(iris, aes(Species,Sepal.Length))+background_image(img)+geom_boxplot(aes(fill=Species), color=&quot;white&quot;, alpha=0.5)+ fill_palette(&quot;jco&quot;) 多页排列 日常工作中我们有时要绘制许多图，假如我们有16幅图，每页排列4张的话就需要4页才能排完，而ggpubr::ggarrange()可以通过制定行列数自动在多页之间进行图形排列1multi.page &lt;-ggarrange(bxp, dp, bp, sp, nrow = 1, ncol = 2) 上述代码返回两页每页两图1multi.page[[1]] 1multi.page[[2]] 利用ggarrange()嵌套布局1234p1 &lt;- ggarrange(sp, bp+font(&quot;x.text&quot;, size = 9), ncol = 1, nrow = 2)p2 &lt;- ggarrange(density.p, stable.p, text.p, ncol = 1, nrow = 3, heights = c(1, 0.5, 0.3))ggarrange(p1, p2, ncol = 2, nrow = 1) SessionInfo12345678910111213141516171819202122232425262728293031323334353637383940sessionInfo()## R version 3.4.1 (2017-06-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 15063)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] grid stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages:## [1] survminer_0.4.0 survival_2.41-3 ggpubr_0.1.5 magrittr_1.5 ## [5] cowplot_0.8.0 ggplot2_2.2.1 gridExtra_2.2.1## ## loaded via a namespace (and not attached):## [1] zoo_1.8-0 purrr_0.2.3 reshape2_1.4.2 ## [4] splines_3.4.1 lattice_0.20-35 colorspace_1.3-2 ## [7] htmltools_0.3.6 yaml_2.1.14 survMisc_0.5.4## [10] rlang_0.1.2 foreign_0.8-69 glue_1.1.1 ## [13] bindrcpp_0.2 bindr_0.1 plyr_1.8.4 ## [16] stringr_1.2.0 munsell_0.4.3 gtable_0.2.0 ## [19] ggsci_2.7 psych_1.7.5 evaluate_0.10.1 ## [22] labeling_0.3 knitr_1.17 parallel_3.4.1 ## [25] broom_0.4.2 Rcpp_0.12.12 xtable_1.8-2 ## [28] scales_0.4.1 backports_1.1.0 cmprsk_2.2-7 ## [31] km.ci_0.5-2 mnormt_1.5-5 png_0.1-7 ## [34] digest_0.6.12 stringi_1.1.5 dplyr_0.7.2 ## [37] KMsurv_0.1-5 rprojroot_1.2 tools_3.4.1 ## [40] lazyeval_0.2.0 tibble_1.3.3 tidyr_0.7.0 ## [43] pkgconfig_2.0.1 Matrix_1.2-11 data.table_1.10.4## [46] assertthat_0.2.0 rmarkdown_1.6 R6_2.2.2 ## [49] nlme_3.1-131 compiler_3.4.1 联系方式： wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggpubr</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言学习笔记之热图绘制]]></title>
    <url>%2F2017%2F08%2F21%2FR%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%83%AD%E5%9B%BE%E7%BB%98%E5%88%B6%2F</url>
    <content type="text"><![CDATA[简介本文将绘制静态与交互式热图，需要使用到以下R包和函数：heatmap():用于绘制简单热图的函数heatmap.2():绘制增强热图的函数d3heatmap:用于绘制交互式热图的R包ComplexHeatmap:用于绘制、注释和排列复杂热图的R&amp;bioconductor包（非常适用于基因组数据分析） 数据准备使用R内置数据集mtcars1df &lt;- as.matrix((scale(mtcars)))#归一化、矩阵化 使用基本函数绘制简单简单热图主要是函数heatmap(x, scale=&quot;row&quot;) x:数据矩阵 scale：表示不同方向，可选值有：row, columa, none Default plotheatmap(df, scale = “none”)123Use custom colorscol &lt;- colorRampPalette(c(&quot;red&quot;, &quot;white&quot;, &quot;blue&quot;))(256)heatmap(df, scale = &quot;none&quot;, col=col) 123#Use RColorBrewer color palette nameslibrary(RColorBrewer)col &lt;- colorRampPalette(brewer.pal(10, &quot;RdYlBu&quot;))(256)#自设置调色板dim(df)#查看行列数## [1] 32 11 123heatmap(df, scale = &quot;none&quot;, col=col, RowSideColors = rep(c(&quot;blue&quot;, &quot;pink&quot;), each=16), ColSideColors = c(rep(&quot;purple&quot;, 5), rep(&quot;orange&quot;, 6)))#参数RowSideColors和ColSideColors用于分别注释行和列颜色等,可help(heatmap)详情 增强热图函数heatmap.2()在热图绘制方面提供许多扩展，此函数包装在gplots包里。12library(gplots)heatmap.2(df, scale = &quot;none&quot;, col=bluered(100), trace = &quot;none&quot;, density.info = &quot;none&quot;)#还有其他参数可参考help(heatmap.2()) 交互式热图绘制d3heatmap包可用于生成交互式热图绘制,可通过以下代码生成：123if (!require(&quot;devtools&quot;)) install.packages(&quot;devtools&quot;) devtools::install_github(&quot;rstudio/d3heatmap&quot;) 函数d3heatmap()用于创建交互式热图，有以下功能： 将鼠标放在感兴趣热图单元格上以查看行列名称及相应值 可选择区域进行缩放1library(d3heatmap)d3heatmap(df, colors = &quot;RdBu&quot;, k_row = 4, k_col = 2) k_row、k_col分别指定用于对行列中树形图分支进行着色所需组数。进一步信息可help(d3heatmap())获取。 使用dendextend包增强热图软件包dendextend可以用于增强其他软件包的功能123456789101112library(dendextend)# order for rowsRowv &lt;- mtcars %&gt;% scale %&gt;% dist %&gt;% hclust %&gt;% as.dendrogram %&gt;% set(&quot;branches_k_color&quot;, k = 3) %&gt;% set(&quot;branches_lwd&quot;, 1.2) %&gt;% ladderize# Order for columns# We must transpose the dataColv &lt;- mtcars %&gt;% scale %&gt;% t %&gt;% dist %&gt;% hclust %&gt;% as.dendrogram %&gt;% set(&quot;branches_k_color&quot;, k = 2, value = c(&quot;orange&quot;, &quot;blue&quot;)) %&gt;% set(&quot;branches_lwd&quot;, 1.2) %&gt;% ladderize增强heatmap()函数---heatmap(df, Rowv = Rowv, Colv = Colv, scale = &quot;none&quot;) 12#增强heatmap.2()函数heatmap.2(df, scale = &quot;none&quot;, col = bluered(100), Rowv = Rowv, Colv = Colv, trace = &quot;none&quot;, density.info = &quot;none&quot;) 12#增强交互式绘图函数d2heatmap()d3heatmap(scale(mtcars), colors = &quot;RdBu&quot;, Rowv = Rowv, Colv = Colv) 绘制复杂热图ComplexHeatmap包是bioconductor包，用于绘制复杂热图，它提供了一个灵活的解决方案来安排和注释多个热图。它还允许可视化来自不同来源的不同数据之间的关联热图。可通过以下代码安装：12if (!require(&quot;devtools&quot;)) install.packages(&quot;devtools&quot;) devtools::install_github(&quot;jokergoo/ComplexHeatmap&quot;) ComplexHeatmap包的主要功能函数是Heatmap(),格式为：Heatmap(matrix, col, name) matrix：矩阵 col：颜色向量（离散色彩映射）或颜色映射函数（如果矩阵是连续数） name：热图名称12library(ComplexHeatmap)Heatmap(df, name = &quot;mtcars&quot;) 123#自设置颜色library(circlize)Heatmap(df, name = &quot;mtcars&quot;, col = colorRamp2(c(-2, 0, 2), c(&quot;green&quot;, &quot;white&quot;, &quot;red&quot;))) 使用调色板1Heatmap(df, name = &quot;mtcars&quot;,col = colorRamp2(c(-2, 0, 2), brewer.pal(n=3, name=&quot;RdBu&quot;))) 12#自定义颜色mycol &lt;- colorRamp2(c(-2, 0, 2), c(&quot;blue&quot;, &quot;white&quot;, &quot;red&quot;)) #热图及行列标题设置12Heatmap(df, name = &quot;mtcars&quot;, col = mycol, column_title = &quot;Column title&quot;, row_title = &quot;Row title&quot;) 注意，行标题的默认位置是“left”，列标题的默认是“top”。可以使用以下选项更改： row_title_side：允许的值为“左”或“右”（例如：row_title_side =“right”） column_title_side：允许的值为“top”或“bottom”（例如：column_title_side =“bottom”） 也可以使用以下选项修改字体和大小： row_title_gp：用于绘制行文本的图形参数 column_title_gp：用于绘制列文本的图形参数123Heatmap(df, name = &quot;mtcars&quot;, col = mycol, column_title = &quot;Column title&quot;, column_title_gp = gpar(fontsize = 14, fontface = &quot;bold&quot;), row_title = &quot;Row title&quot;, row_title_gp = gpar(fontsize = 14, fontface = &quot;bold&quot;)) 在上面的R代码中，fontface的可能值可以是整数或字符串：1 = plain，2 = bold，3 =斜体，4 =粗体斜体。如果是字符串，则有效值为：“plain”，“bold”，“italic”，“oblique”和“bold.italic”。显示行/列名称： show_row_names：是否显示行名称。默认值为TRUE show_column_names：是否显示列名称。默认值为TRUE 1Heatmap(df, name = &quot;mtcars&quot;, show_row_names = FALSE) 更改聚类外观默认情况下，行和列是包含在聚类里的。可以使用参数修改： cluster_rows = FALSE。如果为TRUE，则在行上创建集群 cluster_columns = FALSE。如果为TRUE，则将列置于簇上12# Inactivate cluster on rowsHeatmap(df, name = &quot;mtcars&quot;, col = mycol, cluster_rows = FALSE) 如果要更改列集群的高度或宽度，可以使用选项column_dend_height和row_dend_width：12Heatmap(df, name = &quot;mtcars&quot;, col = mycol, column_dend_height = unit(2, &quot;cm&quot;), row_dend_width = unit(2, &quot;cm&quot;) ) 我们还可以利用color_branches()自定义树状图外观12345library(dendextend)row_dend = hclust(dist(df)) # row clusteringcol_dend = hclust(dist(t(df))) # column clusteringHeatmap(df, name = &quot;mtcars&quot;, col = mycol, cluster_rows = color_branches(row_dend, k = 4), cluster_columns = color_branches(col_dend, k = 2)) 不同的聚类距离计算方式参数clustering_distance_rows和clustering_distance_columns用于分别指定行和列聚类的度量标准，允许的值有“euclidean”, “maximum”, “manhattan”, “canberra”, “binary”, “minkowski”, “pearson”, “spearman”, “kendall”。12Heatmap(df, name = &quot;mtcars&quot;, clustering_distance_rows = &quot;pearson&quot;, clustering_distance_columns = &quot;pearson&quot;) 12#也可以自定义距离计算方式Heatmap(df, name = &quot;mtcars&quot;, clustering_distance_rows = function(m) dist(m)) 1Heatmap(df, name = &quot;mtcars&quot;, clustering_distance_rows = function(x, y) 1 - cor(x, y)) 请注意，在上面的R代码中，通常为指定行聚类的度量的参数 clustering_distance_rows显示示例。建议对参数clustering_distance_columns（列聚类的度量标准）使用相同的度量标准。 12345678# Clustering metric functionrobust_dist = function(x, y) &#123; qx = quantile(x, c(0.1, 0.9)) qy = quantile(y, c(0.1, 0.9)) l = x &gt; qx[1] &amp; x &lt; qx[2] &amp; y &gt; qy[1] &amp; y &lt; qy[2] x = x[l] y = y[l] sqrt(sum((x - y)^2))&#125;# HeatmapHeatmap(df, name = &quot;mtcars&quot;, clustering_distance_rows = robust_dist, clustering_distance_columns = robust_dist, col = colorRamp2(c(-2, 0, 2), c(&quot;purple&quot;, &quot;white&quot;, &quot;orange&quot;))) 聚类方法参数clustering_method_rows和clustering_method_columns可用于指定进行层次聚类的方法。允许的值是hclust()函数支持的值，包括“ward.D”，“ward.D2”，“single”，“complete”，“average”，…（见?hclust）。12Heatmap(df, name = &quot;mtcars&quot;, clustering_method_rows = &quot;ward.D&quot;, clustering_method_columns = &quot;ward.D&quot;) 热图拆分有很多方法来拆分热图。一个解决方案是应用k-means使用参数km。在执行k-means时使用set.seed()函数很重要，这样可以在稍后精确地再现结果12set.seed(1122)# split into 2 groupsHeatmap(df, name = &quot;mtcars&quot;, col = mycol, k = 2) 12# split by a vector specifying row classes， 有点类似于ggplot2里的分面Heatmap(df, name = &quot;mtcars&quot;, col = mycol, split = mtcars$cyl ) 123#split也可以是一个数据框，其中不同级别的组合拆分热图的行。# Split by combining multiple variablesHeatmap(df, name =&quot;mtcars&quot;, col = mycol, split = data.frame(cyl = mtcars$cyl, am = mtcars$am)) 12# Combine km and splitHeatmap(df, name =&quot;mtcars&quot;, col = mycol, km = 2, split = mtcars$cyl) 12345#也可以自定义分割library(&quot;cluster&quot;)set.seed(1122)pa = pam(df, k = 3)Heatmap(df, name = &quot;mtcars&quot;, col = mycol, split = paste0(&quot;pam&quot;, pa$clustering)) 还可以将用户定义的树形图和分割相结合。在这种情况下，split可以指定为单个数字： 123row_dend = hclust(dist(df)) # row clusteringrow_dend = color_branches(row_dend, k = 4)Heatmap(df, name = &quot;mtcars&quot;, col = mycol, cluster_rows = row_dend, split = 2) 热图注释利用HeatmapAnnotation()对行或列注释。格式为： HeatmapAnnotation(df, name, col, show_legend) df：带有列名的data.frame name：热图标注的名称 col：映射到df中列的颜色列表123# Transposedf &lt;- t(df)# Heatmap of the transposed dataHeatmap(df, name =&quot;mtcars&quot;, col = mycol) 12345678910# Annotation data frameannot_df &lt;- data.frame(cyl = mtcars$cyl, am = mtcars$am, mpg = mtcars$mpg)# Define colors for each levels of qualitative variables# Define gradient color for continuous variable (mpg)col = list(cyl = c(&quot;4&quot; = &quot;green&quot;, &quot;6&quot; = &quot;gray&quot;, &quot;8&quot; = &quot;darkred&quot;), am = c(&quot;0&quot; = &quot;yellow&quot;, &quot;1&quot; = &quot;orange&quot;), mpg = colorRamp2(c(17, 25), c(&quot;lightblue&quot;, &quot;purple&quot;)) )# Create the heatmap annotationha &lt;- HeatmapAnnotation(annot_df, col = col)# Combine the heatmap and the annotationHeatmap(df, name = &quot;mtcars&quot;, col = mycol, top_annotation = ha) 123#可以使用参数show_legend = FALSE来隐藏注释图例ha &lt;- HeatmapAnnotation(annot_df, col = col, show_legend = FALSE)Heatmap(df, name = &quot;mtcars&quot;, col = mycol, top_annotation = ha) 12345678910111213#注释名称可以使用下面的R代码添加library(&quot;GetoptLong&quot;)# Combine Heatmap and annotationha &lt;- HeatmapAnnotation(annot_df, col = col, show_legend = FALSE)Heatmap(df, name = &quot;mtcars&quot;, col = mycol, top_annotation = ha)# Add annotation names on the rightfor(an in colnames(annot_df)) &#123; seekViewport(qq(&quot;annotation_@&#123;an&#125;&quot;)) grid.text(an, unit(1, &quot;npc&quot;) + unit(2, &quot;mm&quot;), 0.5, default.units = &quot;npc&quot;, just = &quot;left&quot;)&#125;#要在左侧添加注释名称，请使用以下代码# Annotation names on the leftfor(an in colnames(annot_df)) &#123; seekViewport(qq(&quot;annotation_@&#123;an&#125;&quot;)) grid.text(an, unit(1, &quot;npc&quot;) - unit(2, &quot;mm&quot;), 0.5, default.units = &quot;npc&quot;, just = &quot;left&quot;)&#125; 复杂注释将热图与一些基本图形结合起来进行注释，利用anno_point(),anno_barplot(),anno_boxplot(),anno_density()和anno_histogram()。123456789101112# Define some graphics to display the distribution of columns.hist = anno_histogram(df, gp = gpar(fill = &quot;lightblue&quot;)).density = anno_density(df, type = &quot;line&quot;, gp = gpar(col = &quot;blue&quot;))ha_mix_top = HeatmapAnnotation(hist = .hist, density = .density)# Define some graphics to display the distribution of rows.violin = anno_density(df, type = &quot;violin&quot;, gp = gpar(fill = &quot;lightblue&quot;), which = &quot;row&quot;).boxplot = anno_boxplot(df, which = &quot;row&quot;)ha_mix_right = HeatmapAnnotation(violin = .violin, bxplt = .boxplot, which = &quot;row&quot;, width = unit(4, &quot;cm&quot;))# Combine annotation with heatmapHeatmap(df, name = &quot;mtcars&quot;, col = mycol, column_names_gp = gpar(fontsize = 8), top_annotation = ha_mix_top, top_annotation_height = unit(4, &quot;cm&quot;)) + ha_mix_right 热图组合123456# Heatmap 1ht1 = Heatmap(df, name = &quot;ht1&quot;, col = mycol, km = 2, column_names_gp = gpar(fontsize = 9))# Heatmap 2ht2 = Heatmap(df, name = &quot;ht2&quot;, col = colorRamp2(c(-2, 0, 2), c(&quot;green&quot;, &quot;white&quot;, &quot;red&quot;)), column_names_gp = gpar(fontsize = 9))# Combine the two heatmapsht1 + ht2 可以使用选项width = unit（3，“cm”））来控制热图大小。注意，当组合多个热图时，第一个热图被视为主热图。剩余热图的一些设置根据主热图的设置自动调整。这些设置包括：删除行集群和标题，以及添加拆分等。 12345678draw(ht1 + ht2, # Titles row_title = &quot;Two heatmaps, row title&quot;, row_title_gp = gpar(col = &quot;red&quot;), column_title = &quot;Two heatmaps, column title&quot;, column_title_side = &quot;bottom&quot;, # Gap between heatmaps gap = unit(0.5, &quot;cm&quot;)) 可以使用参数show_heatmap_legend = FALSE，show_annotation_legend = FALSE删除图例。 基因表达矩阵在基因表达数据中，行代表基因，列是样品值。关于基因的更多信息可以在表达热图之后附加，例如基因长度和基因类型。123456789expr = readRDS(paste0(system.file(package = &quot;ComplexHeatmap&quot;), &quot;/extdata/gene_expression.rds&quot;))mat = as.matrix(expr[, grep(&quot;cell&quot;, colnames(expr))])type = gsub(&quot;s\\d+_&quot;, &quot;&quot;, colnames(mat))ha = HeatmapAnnotation(df = data.frame(type = type))Heatmap(mat, name = &quot;expression&quot;, km = 5, top_annotation = ha, top_annotation_height = unit(4, &quot;mm&quot;), show_row_names = FALSE, show_column_names = FALSE) +Heatmap(expr$length, name = &quot;length&quot;, width = unit(5, &quot;mm&quot;), col = colorRamp2(c(0, 100000), c(&quot;white&quot;, &quot;orange&quot;))) +Heatmap(expr$type, name = &quot;type&quot;, width = unit(5, &quot;mm&quot;)) +Heatmap(expr$chr, name = &quot;chr&quot;, width = unit(5, &quot;mm&quot;), col = rand_color(length(unique(expr$chr)))) 也可以可视化基因组变化和整合不同的分子水平（基因表达，DNA甲基化，…） 可视化矩阵中列的分布使用函数densityHeatmap().1densityHeatmap(df) Infos1234567891011121314151617181920212223242526272829303132333435363738sessionInfo()## R version 3.3.3 (2017-03-06)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 8.1 x64 (build 9600)## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] grid stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages:## [1] GetoptLong_0.1.6 cluster_2.0.5 circlize_0.3.10 ## [4] ComplexHeatmap_1.12.0 dendextend_1.4.0 d3heatmap_0.6.1.1##[7] gplots_3.0.1 RColorBrewer_1.1-2 ## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.9 DEoptimR_1.0-8 plyr_1.8.4 ## [4] viridis_0.3.4 class_7.3-14 prabclus_2.2-6 ## [7] bitops_1.0-6 base64enc_0.1-3 tools_3.3.3 ## [10] digest_0.6.12 mclust_5.2.2 jsonlite_1.3 ## [13] evaluate_0.10 tibble_1.2 gtable_0.2.0 ## [16] lattice_0.20-34 png_0.1-7 yaml_2.1.14 ## [19] mvtnorm_1.0-6 gridExtra_2.2.1 trimcluster_0.1-2 ## [22] stringr_1.2.0 knitr_1.15.1 GlobalOptions_0.0.11## [25] htmlwidgets_0.8 gtools_3.5.0 caTools_1.17.1 ## [28] fpc_2.1-10 diptest_0.75-7 nnet_7.3-12 ## [31] stats4_3.3.3 rprojroot_1.2 robustbase_0.92-7 ## [34] flexmix_2.3-13 rmarkdown_1.3.9002 gdata_2.17.0 ## [37] kernlab_0.9-25 ggplot2_2.2.1 magrittr_1.5 ## [40] whisker_0.3-2 backports_1.0.5 scales_0.4.1 ## [43] htmltools_0.3.5 modeltools_0.2-21 MASS_7.3-45## [46] assertthat_0.1 shape_1.4.2 colorspace_1.3-2 ## [49] KernSmooth_2.23-15 stringi_1.1.2 lazyeval_0.2.0 ## [52] munsell_0.4.3 rjson_0.2.15 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>Heatmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ggplot2学习笔记系列之利用ggplot2绘制散点图]]></title>
    <url>%2F2017%2F07%2F12%2Fggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%A9%E7%94%A8ggplot2%E7%BB%98%E5%88%B6%E6%95%A3%E7%82%B9%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[1 简介散点图通常用来刻画两个连续型变量之间的关系。绘制散点图时数据集中的每一个观测值都由散点图中的一个点来表示。利用包ggplot2可以绘制十分漂亮的散点图。 利用ggplot2绘图前先确保我们所使用的数据集是data.frame形式。ggplot2绘图利用映射将数据赋予给坐标轴上进而添加几何对象形成图形。绘图前先加载包ggplot2 即library(ggplot2)。12#Load packageslibrary(ggplot2)#visualization 加载完包之后，本文利用数据集mtcars来演示散点图绘制。 先查看数据集的前几行来了解mtcars数据集。12#check datahead(mtcars) 2 绘制简单的散点图1ggplot(data=mtcars, aes(x=wt, y=mpg)) + geom_point() 2.1 shape参数修改图形的形状 可选点图形形状:1ggplot(data=mtcars, aes(x=wt, y=mpg)) +geom_point(shape=17) 2.2 size参数修改点的大小1ggplot(data = mtcars, aes(x=wt, y=mpg))+geom_point(size=5) 2.3 color参数修改点的颜色1ggplot(data=mtcars, aes(x=wt, y=mpg))+geom_point(color=&quot;red&quot;) 3 绘制分组的散点图可将分组变量（因子或字符变量，可通过factor()强制性将非因子变量转为因子变量）赋值给颜色或性状属性，实现分组散点图的绘制。3.1 首先将数值型变量cyl转换为因子型变量1mtcars$cyl &lt;- factor(mtcars$cyl) 3.2 分组变量赋值给颜色属性(变量赋值必须在aes里面)1ggplot(data=mtcars, aes(x=wt, y=mpg, color=cyl))+geom_point(size=3) 3.3 分组变量赋值给性状属性1ggplot(data=mtcars, aes(x=wt, y=mpg, shape=cyl))+geom_point(size=3) 如果对R语言默认的颜色或者形状不满意，可以通过scale_color_brewer()或者scale_color_manual()函数自定义点的颜色以及scale_shape_manual()函数自定义点的形状。 下面我们将分组变量cyl同时赋值给颜色和形状属性。123ggplot(data=mtcars, aes(x=wt, y=mpg, color=cyl, shape= cyl))+geom_point(size=3)+ scale_color_brewer(palette = &quot;Accent&quot;)+scale_shape_manual(values = c(2, 9, 16))#Accent是一调色板，可选点的形状见上 4 将连续变量映射给颜色、大小和形状等属性4.1 将连续性变量disp映射给颜色属性1ggplot(data=mtcars, aes(x=wt, y=mpg, color=disp))+geom_point(size=3) 从图中可以发现值越大对应的颜色越浅，以下是通过人为设置色阶使值大小与颜色深浅保持一致12ggplot(data=mtcars, aes(x=wt, y=mpg, color=disp))+geom_point(size=3)+ scale_color_gradient(low=&quot;lightblue&quot;, high=&quot;darkblue&quot;) 4.2 将连续性变量disp映射给大小属性1ggplot(data=mtcars, aes(x=wt, y=mpg, size=disp))+geom_point(color=&quot;red&quot;) 5 重叠点的处理当数据量非常大时，会导致数据重叠点非常严重，可通过使用半透明的点避免。alpha参数控制点的透明度。下面利用数据集diamonds来演示。12#check datahead(diamonds) 12#未使用透明点处理ggplot(data=diamonds, aes(x=carat, y=price))+geom_point() 12#使用alpha参数调整点透明度ggplot(data=diamonds, aes(x=carat, y=price))+geom_point(alpha=0.1) 6 为散点图添加拟合曲线12#使用数据集mtcarsggplot(data=mtcars, aes(x=wt, y=mpg))+geom_point()+stat_smooth(method=&quot;lm&quot;) 12#也可以去除掉拟合曲线的置信区间ggplot(data=mtcars, aes(x=wt, y=mpg))+geom_point()+stat_smooth(method=&quot;lm&quot;, se=FALSE) 123#也可以针对不同类型的cyl来进行拟合ggplot(data=mtcars, aes(x=wt, y=mpg, color=cyl))+geom_point()+stat_smooth(method=&quot;lm&quot;) 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>scatter plot</tag>
        <tag>visualization</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[r4ds学习笔记之ggplot2]]></title>
    <url>%2F2017%2F07%2F01%2Fr4ds%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bggplot2%2F</url>
    <content type="text"><![CDATA[为了进一步加强以及整合自己data science的能力，最近打算在我的博客开辟一个新类r4ds，专门用来记录学习Hadley Wickham大神的新作R for Data Science的读书笔记。该书推荐我们入门data science可以从可视化开始，这也是该书目录布局的第一章。因此开始学习R语言可视化。 前提本章主要聚焦于可视化包ggplot2,为了写这本书，大神专门整合了一系列神包成为一个包tidyverse，因此第一步就是要先安装该包并加载。1234#install tidyverseinstall.packages(&quot;tidyverse&quot;)#load tidyverselibrary(tidyverse) ggplot2简介利用数据集mpg来探究发动机大小跟好友耗油是否存在某种关系，先check一下该数据集。1head(mpg) 在各个变量中： disp:车发动机大小 hwy:衡量耗油率的一个指标，更多信息可？mpg查看 要探究displ与hwy的关系，最快就是画个图了1ggplot(data=mpg)+ geom_point(mapping = aes(x=displ, y=hwy)) 图中显示两者呈现负相关，disp越大，hwy越低。ggplot2绘图规则主要如下：12ggplot(data=&lt;DATA&gt;)+ &lt;GEOM_FUNCTION&gt;(mapping=aes(&gt;MAPPINGS&gt;)) ggplot()会创建一个底板，然后可以通过geom_function()不断地添加图形元素，进行丰富。12p &lt;- ggplot(mpg)#create an empty graphp+geom_point(aes(x=displ, y=hwy))#add a layer to the empty graph 美学映射Aesthetic Mappings美学映射在ggplot2中是一个十分重要的概念，比如前文我们将displ、hwy分别映射给x、y轴，同时还可以用来控制图形元素大小、形状、颜色等属性。12ggplot(mpg)+ geom_point(aes(x=displ, y=hwy, color=class))#将class映射给颜色属性，这样不同class就表现不同颜色 可以看到，通过颜色映射ggplot2会自动创建一个legend，需要注意的是这里颜色颜色我们是利用class，这是一个离散性变量，如果我们将之映射给点的size，则会出现warning,至于原因，看warning。1ggplot(mpg)+ geom_point(aes(x=displ, y=hwy, size=class)) 或者将class映射给alpha参数，这是一个控制点透明度的参数;shape是一个控制形状的参数1ggplot(mpg)+ geom_point(aes(x=displ, y=hwy, alpha=class)) 1ggplot(mpg)+ geom_point(aes(x=displ, y=hwy, shape=class)) 发现当映射shape其中SUV是没有形状的，这是因为ggplot2只默认6种形状，这个问题后续解决。 需要注意的是映射参数必须在aes(),不然就无法映射。1ggplot(mpg)+ geom_point(aes(x=displ, y=hwy), color=&quot;blue&quot;)#all the points are blue 今天就讲到这，下次继续 SessionInfo123456789101112131415161718192021222324252627282930313233343536373839sessionInfo()## R version 3.4.1 (2017-06-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 8.1 x64 (build 9600)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] forcats_0.2.0 stringr_1.2.0 dplyr_0.7.1 ## [4] purrr_0.2.2.2 readr_1.1.1 tidyr_0.6.3 ## [7] tibble_1.3.3 ggplot2_2.2.1 tidyverse_1.1.1.9000## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.11 cellranger_1.1.0 compiler_3.4.1 ## [4] plyr_1.8.4 bindr_0.1 tools_3.4.1 ## [7] digest_0.6.12 lubridate_1.6.0 jsonlite_1.5 ## [10] evaluate_0.10.1 nlme_3.1-131 gtable_0.2.0 ## [13] lattice_0.20-35 pkgconfig_2.0.1 rlang_0.1.1 ## [16] psych_1.7.5 rstudioapi_0.6 yaml_2.1.14 ## [19] parallel_3.4.1 haven_1.0.0 bindrcpp_0.2 ## [22] xml2_1.1.1 httr_1.2.1 knitr_1.16 ## [25] hms_0.3 rprojroot_1.2 grid_3.4.1 ## [28] glue_1.1.1 R6_2.2.2 readxl_1.0.0 ## [31] foreign_0.8-69 rmarkdown_1.6 modelr_0.1.0 ## [34] reshape2_1.4.2 magrittr_1.5 clisymbols_1.2.0 ## [37] boxes_0.0.0.9000 backports_1.1.0 scales_0.4.1 ## [40] htmltools_0.3.6 rvest_0.3.2 assertthat_0.2.0 ## [43] mnormt_1.5-5 colorspace_1.3-2 labeling_0.3 ## [46] stringi_1.1.5 lazyeval_0.2.0 munsell_0.4.3 ## [49] broom_0.4.2 crayon_1.3.2.9000 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>r4ds</category>
      </categories>
      <tags>
        <tag>visualization</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言data manipulation学习笔记之subset data]]></title>
    <url>%2F2017%2F06%2F29%2FR%E8%AF%AD%E8%A8%80data-manipulation%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bsubset-data%2F</url>
    <content type="text"><![CDATA[数据分析过程中我们常常需要从数据集中抽取部分数据，本文将介绍如何提取子数据集，主要利用R自带的函数，以后会专门介绍data manipulation包dplyr。 提取子数据集主要分为select以及exclude，这里主要介绍两种方法，一是利用操作符[]进行选取，二是利用subset()进行抽取。 利用[]进行提取123456789101112#use the iris datasethead(iris)## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa## 2 4.9 3.0 1.4 0.2 setosa## 3 4.7 3.2 1.3 0.2 setosa## 4 4.6 3.1 1.5 0.2 setosa## 5 5.0 3.6 1.4 0.2 setosa## 6 5.4 3.9 1.7 0.4 setosa# check the column namenames(iris)## [1] &quot;Sepal.Length&quot; &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; &quot;Species&quot; 加入我们想要提取Sepal.Length、Sepal.Width两列数据，可以使用如下代码：123456789dt1 &lt;- iris[, c(&quot;Sepal.Length&quot;,&quot;Sepal.Width&quot;)]head(dt1)## Sepal.Length Sepal.Width## 1 5.1 3.5## 2 4.9 3.0## 3 4.7 3.2## 4 4.6 3.1## 5 5.0 3.6## 6 5.4 3.9 123456789#也可以直接用列序号代替，比如这里我们想要提要前两列dt2 &lt;- iris[, c(1, 2)]head(dt2)## Sepal.Length Sepal.Width## 1 5.1 3.5## 2 4.9 3.0## 3 4.7 3.2## 4 4.6 3.1## 5 5.0 3.6## 6 5.4 3.9 如果我们需要删除前两列，只需在序号之前添加符号 - 就行123456789dt3 &lt;- iris[, c(-1, -2)]head(dt3)## Petal.Length Petal.Width Species ## 1 1.4 0.2 setosa## 2 1.4 0.2 setosa## 3 1.3 0.2 setosa## 4 1.5 0.2 setosa## 5 1.4 0.2 setosa## 6 1.7 0.4 setosa 可以看出十分简单就可以提取子数据集，下面介绍subset()，subset()相比于[]主要是可以方便的根据条件提取子数据集。 利用subset()进行提取1234567891011121314#create a datasetfy &lt;- c(2010,2011,2012,2010,2011,2012,2010,2011,2012)company &lt;- c(&quot;Apple&quot;,&quot;Apple&quot;,&quot;Apple&quot;,&quot;Google&quot;,&quot;Google&quot;,&quot;Google&quot;,&quot;Microsoft&quot;,&quot;Microsoft&quot;,&quot;Microsoft&quot;)revenue &lt;- c(65225,108249,156508,29321,37905,50175,62484,69943,73723)profit &lt;- c(14013,25922,41733,8505,9737,10737,18760,23150,16978) companiesData &lt;- data.frame(fy, company, revenue, profit)head(companiesData)## fy company revenue profit## 1 2010 Apple 65225 14013## 2 2011 Apple 108249 25922## 3 2012 Apple 156508 41733## 4 2010 Google 29321 8505## 5 2011 Google 37905 9737## 6 2012 Google 50175 10737 假如我们想要提取revenue超过十万的公司123456com1 &lt;- subset(companiesData, revenue&gt;100000)head(com1)## fy company revenue profit## 2 2011 Apple 108249 25922## 3 2012 Apple 156508 41733 或者我们想要提取在2012年revenue超过6万的公司123456com2 &lt;- subset(companiesData, fy==&quot;2012&quot;&amp;revenue&gt;60000)head(com2)## fy company revenue profit## 3 2012 Apple 156508 41733## 9 2012 Microsoft 73723 16978 或者提取在2012年revenue超过6万、profit超过4万的公司12345com3 &lt;- subset(companiesData, fy==&quot;2012&quot;&amp;revenue&gt;60000&amp;profit&gt;40000)com3## fy company revenue profit## 3 2012 Apple 156508 41733 条件选择也可以使用或，比如我们想要提取profit超过2万或者revenue低于5万的公司12345678com4 &lt;- subset(companiesData, revenue&lt;50000|profit&gt;20000)com4## fy company revenue profit ## 2 2011 Apple 108249 25922## 3 2012 Apple 156508 41733## 4 2010 Google 29321 8505## 5 2011 Google 37905 9737## 8 2011 Microsoft 69943 23150 本文只是粗略的讲解，其实subset()的用法很广，有兴趣的朋友可以自行探索。 sessionInfo1234567891011121314151617181920212223242526sessionInfo()## R version 3.4.0 (2017-04-21)## Platform: x86_64-pc-linux-gnu (64-bit)## Running under: Ubuntu 16.04.2 LTS## ## Matrix products: default## BLAS: /usr/lib/atlas-base/atlas/libblas.so.3.0## LAPACK: /usr/lib/atlas-base/atlas/liblapack.so.3.0## ## locale:## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## loaded via a namespace (and not attached):## [1] compiler_3.4.0 backports_1.1.0 magrittr_1.5 rprojroot_1.2 ## [5] tools_3.4.0 htmltools_0.3.6 yaml_2.1.14 Rcpp_0.12.11 ## [9] stringi_1.1.5 rmarkdown_1.6 knitr_1.16 stringr_1.2.0 ## [13] digest_0.6.12 evaluate_0.10.1 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>Data Manipulation</category>
      </categories>
      <tags>
        <tag>data management</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言data manipulation学习笔记之创建变量、重命名、数据融合]]></title>
    <url>%2F2017%2F06%2F28%2FR%E8%AF%AD%E8%A8%80data-manipulation%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%8F%98%E9%87%8F%E3%80%81%E9%87%8D%E5%91%BD%E5%90%8D%E3%80%81%E6%95%B0%E6%8D%AE%E8%9E%8D%E5%90%88%2F</url>
    <content type="text"><![CDATA[数据分析中数据处理也就是data manipulation是十分繁琐的，为此我将在博客里特意建一个分类：Data Manipulation。本文将讲讲如何在R语言中创建变量、重命名以及merge。 #create a dataset12345678910111213fy &lt;- c(2010,2011,2012,2010,2011,2012,2010,2011,2012)company &lt;- c(&quot;Apple&quot;,&quot;Apple&quot;,&quot;Apple&quot;,&quot;Google&quot;,&quot;Google&quot;,&quot;Google&quot;,&quot;Microsoft&quot;,&quot;Microsoft&quot;,&quot;Microsoft&quot;)revenue &lt;- c(65225,108249,156508,29321,37905,50175,62484,69943,73723)profit &lt;- c(14013,25922,41733,8505,9737,10737,18760,23150,16978) companiesData &lt;- data.frame(fy, company, revenue, profit)head(companiesData)## fy company revenue profit## 1 2010 Apple 65225 14013## 2 2011 Apple 108249 25922## 3 2012 Apple 156508 41733## 4 2010 Google 29321 8505## 5 2011 Google 37905 9737## 6 2012 Google 50175 10737 接下来我们需要查看数据集的结构，用str()函数查看123456str(companiesData)## &apos;data.frame&apos;: 9 obs. of 4 variables:## $ fy : num 2010 2011 2012 2010 2011 ...## $ company: Factor w/ 3 levels &quot;Apple&quot;,&quot;Google&quot;,..: 1 1 1 2 2 2 3 3 3## $ revenue: num 65225 108249 156508 29321 37905 ...## $ profit : num 14013 25922 41733 8505 9737 ... 可以看到年份fy这里是是数值型，我们需要更改为因子型，方便后期处理1companiesData$fy &lt;- factor(companiesData$fy, ordered = TRUE) 现在数据已经整理过好了，下面我们来添加变量，比如我们可以看看各个公司的利润率12345678910companiesData$margin &lt;- (companiesData$profit/companiesData$revenue)*100#查看数据head(companiesData)## fy company revenue profit margin## 1 2010 Apple 65225 14013 21.48409## 2 2011 Apple 108249 25922 23.94664## 3 2012 Apple 156508 41733 26.66509## 4 2010 Google 29321 8505 29.00651## 5 2011 Google 37905 9737 25.68790## 6 2012 Google 50175 10737 21.39910 小数点位数太多了，这里我们保留一位123456789companiesData$margin &lt;- round(companiesData$margin, 1)head(companiesData)## fy company revenue profit margin## 1 2010 Apple 65225 14013 21.5## 2 2011 Apple 108249 25922 23.9## 3 2012 Apple 156508 41733 26.7## 4 2010 Google 29321 8505 29.0## 5 2011 Google 37905 9737 25.7## 6 2012 Google 50175 10737 21.4 这样我们就创建了一个新的变量margin，当然也可以删除变量，只要复制需要删除的变量NULL就行了。12345678910#delete variable margincompaniesData$margin &lt;- NULLhead(companiesData)## fy company revenue profit## 1 2010 Apple 65225 14013## 2 2011 Apple 108249 25922## 3 2012 Apple 156508 41733## 4 2010 Google 29321 8505## 5 2011 Google 37905 9737## 6 2012 Google 50175 10737 再顺便介绍一下transform函数，用于创建变量，transform的格式如下12345678910dataFrame &lt;- transform(dataFrame, newColumn = oldColumn1 + oldColumn2)companiesData &lt;- transform(companiesData, margin=round((profit/revenue)*100), 1)head(companiesData)## fy company revenue profit margin X1## 1 2010 Apple 65225 14013 21 1## 2 2011 Apple 108249 25922 24 1## 3 2012 Apple 156508 41733 27 1## 4 2010 Google 29321 8505 29 1## 5 2011 Google 37905 9737 26 1## 6 2012 Google 50175 10737 21 1 接下来讲一下merge，主要是merge函数，它要求进行融合的两个数据集需要有共同的变量即id，使用格式如下：1finaldt &lt;- merge(dataset1, dataset2, by=&quot;id&quot;) 这里我们再创建一个数据集用于merge123456789#creat another datasetcompany &lt;- c(&quot;Apple&quot;,&quot;Google&quot;,&quot;Microsoft&quot;)ava1 &lt;- c(1,2,3)data2 &lt;- data.frame(company, ava1)head(data2)## company ava1## 1 Apple 1## 2 Google 2## 3 Microsoft 3 数据集data2与数据集companiesData具有共同的变量company(id)12#merge the two datasetnewdata &lt;- merge(companiesData, data2, by=&quot;company&quot;) 这样就得到一个完整的数据集了，当然添加行、列还有两个很有用的函数：rbind()以及cbind(),这里就不介绍了 最后讲一下重命名，其实很简单1234567891011companiesData$company &lt;- c(&quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;G&quot;, &quot;G&quot;, &quot;G&quot;, &quot;M&quot;, &quot;M&quot;, &quot;M&quot;)head(companiesData)## fy company revenue profit margin X1## 1 2010 A 65225 14013 21 1## 2 2011 A 108249 25922 24 1## 3 2012 A 156508 41733 27 1## 4 2010 G 29321 8505 29 1## 5 2011 G 37905 9737 26 1## 6 2012 G 50175 10737 21 1#rename the colnamecolnames(companiesData) &lt;- c(&quot;Year&quot;, &quot;Com&quot;, &quot;Rev&quot;, &quot;Pro&quot;, &quot;Mar&quot;) #seessioninfo12345678910111213141516171819202122sessionInfo()## R version 3.4.0 (2017-04-21)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 8.1 x64 (build 9600)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## loaded via a namespace (and not attached):## [1] compiler_3.4.0 backports_1.1.0 magrittr_1.5 rprojroot_1.2 ## [5] tools_3.4.0 htmltools_0.3.6 yaml_2.1.14 Rcpp_0.12.11 ## [9] stringi_1.1.5 rmarkdown_1.5 knitr_1.16 stringr_1.2.0 ## [13] digest_0.6.12 evaluate_0.10 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>Data Manipulation</category>
      </categories>
      <tags>
        <tag>manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化学习笔记之ggpubr包]]></title>
    <url>%2F2017%2F06%2F26%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bggpubr%E5%8C%85%2F</url>
    <content type="text"><![CDATA[Hadley Wickham创建的可视化包ggplot2可以流畅地进行优美的可视化，但是如果要通过ggplot2定制一套图形，尤其是适用于杂志期刊等出版物的图形，对于那些没有深入了解ggplot2的人来说就有点困难了，ggplot2的部分语法是很晦涩的。为此Alboukadel Kassambara创建了基于ggplot2的可视化包ggpubr用于绘制符合出版物要求的图形。 安装及加载ggpubr包安装方式有两种： 直接从CRAN安装： 1install.packages(&quot;ggpubr&quot;) 从GitHub上安装最新版本： 12if(!require(devtools)) install.packages(&quot;devtools&quot;) devtools::install_github(&quot;kassambara/ggpubr&quot;) 安装完之后直接加载就行：1library(ggpubr) #ggpubr可绘制图形：ggpubr可绘制大部分我们常用的图形，下面一一介绍。 ##分布图(Distribution)12345#构建数据集set.seed(1234)df &lt;- data.frame( sex=factor(rep(c(&quot;f&quot;, &quot;M&quot;), each=200)), weight=c(rnorm(200, 55), rnorm(200, 58)))head(df) 1234567## sex weight## 1 f 53.79293## 2 f 55.27743## 3 f 56.08444## 4 f 52.65430## 5 f 55.42912## 6 f 55.50606 ###密度分布图以及边际地毯线并添加平均值线12ggdensity(df, x=&quot;weight&quot;, add = &quot;mean&quot;, rug = TRUE, color = &quot;sex&quot;, fill = &quot;sex&quot;,palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;)) ###带有均值线和边际地毯线的直方图12gghistogram(df, x=&quot;weight&quot;, add = &quot;mean&quot;, rug = TRUE, color = &quot;sex&quot;, fill = &quot;sex&quot;,palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;)) ###箱线图与小提琴图1234#加载数据集ToothGrowthdata(&quot;ToothGrowth&quot;)df1 &lt;- ToothGrowthhead(df1) 1234567## len supp dose## 1 4.2 VC 0.5## 2 11.5 VC 0.5## 3 7.3 VC 0.5## 4 5.8 VC 0.5## 5 6.4 VC 0.5## 6 10.0 VC 0.5 123p &lt;- ggboxplot(df1, x=&quot;dose&quot;, y=&quot;len&quot;, color = &quot;dose&quot;, palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;), add = &quot;jitter&quot;, shape=&quot;dose&quot;)#增加了jitter点，点shape由dose映射p 增加不同组间的p-value值，可以自定义需要标注的组间比较123my_comparisons &lt;- list(c(&quot;0.5&quot;, &quot;1&quot;), c(&quot;1&quot;, &quot;2&quot;), c(&quot;0.5&quot;, &quot;2&quot;))p+stat_compare_means(comparisons = my_comparisons)+#不同组间的比较stat_compare_means(label.y = 50) ###内有箱线图的小提琴图12345ggviolin(df1, x=&quot;dose&quot;, y=&quot;len&quot;, fill = &quot;dose&quot;, palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;), add = &quot;boxplot&quot;, add.params = list(fill=&quot;white&quot;))+ stat_compare_means(comparisons = my_comparisons, label = &quot;p.signif&quot;)+#label这里表示选择显著性标记（星号） stat_compare_means(label.y = 50) ###条形图12345data(&quot;mtcars&quot;)df2 &lt;- mtcarsdf2$cyl &lt;- factor(df2$cyl)df2$name &lt;- rownames(df2)#添加一行namehead(df2[, c(&quot;name&quot;, &quot;wt&quot;, &quot;mpg&quot;, &quot;cyl&quot;)]) 按从小到大顺序绘制条形图（不分组排序）12345ggbarplot(df2, x=&quot;name&quot;, y=&quot;mpg&quot;, fill = &quot;cyl&quot;, color = &quot;white&quot;, palette = &quot;jco&quot;,#杂志jco的配色 sort.val = &quot;desc&quot;,#下降排序 sort.by.groups=FALSE,#不按组排序 x.text.angle=60) 按组进行排序12345ggbarplot(df2, x=&quot;name&quot;, y=&quot;mpg&quot;, fill = &quot;cyl&quot;, color = &quot;white&quot;, palette = &quot;jco&quot;,#杂志jco的配色 sort.val = &quot;asc&quot;,#上升排序,区别于desc，具体看图演示 sort.by.groups=TRUE,#按组排序 x.text.angle=90) ###偏差图偏差图展示了与参考值之间的偏差123df2$mpg_z &lt;- (df2$mpg-mean(df2$mpg))/sd(df2$mpg)df2$mpg_grp &lt;- factor(ifelse(df2$mpg_z&lt;0, &quot;low&quot;, &quot;high&quot;), levels = c(&quot;low&quot;, &quot;high&quot;))head(df2[, c(&quot;name&quot;, &quot;wt&quot;, &quot;mpg&quot;, &quot;mpg_grp&quot;, &quot;cyl&quot;)]) 绘制排序过的条形图123ggbarplot(df2, x=&quot;name&quot;, y=&quot;mpg_z&quot;, fill = &quot;mpg_grp&quot;, color = &quot;white&quot;, palette = &quot;jco&quot;, sort.val = &quot;asc&quot;, sort.by.groups = FALSE, x.text.angle=60, ylab = &quot;MPG z-score&quot;, xlab = FALSE, legend.title=&quot;MPG Group&quot;) 坐标轴变换1234ggbarplot(df2, x=&quot;name&quot;, y=&quot;mpg_z&quot;, fill = &quot;mpg_grp&quot;, color = &quot;white&quot;, palette = &quot;jco&quot;, sort.val = &quot;desc&quot;, sort.by.groups = FALSE, x.text.angle=90, ylab = &quot;MPG z-score&quot;, xlab = FALSE, legend.title=&quot;MPG Group&quot;, rotate=TRUE, ggtheme = theme_minimal()) ##点图(Dot charts) ###棒棒糖图(Lollipop chart)棒棒图可以代替条形图展示数据123ggdotchart(df2, x=&quot;name&quot;, y=&quot;mpg&quot;, color = &quot;cyl&quot;, palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;), sorting = &quot;ascending&quot;, add = &quot;segments&quot;, ggtheme = theme_pubr()) 可以自设置各种参数12345ggdotchart(df2, x=&quot;name&quot;, y=&quot;mpg&quot;, color = &quot;cyl&quot;, palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;), sorting = &quot;descending&quot;, add = &quot;segments&quot;, rotate = TRUE, group = &quot;cyl&quot;, dot.size = 6, label = round(df2$mpg), font.label = list(color=&quot;white&quot;, size=9, vjust=0.5), ggtheme = theme_pubr()) ###偏差图123456ggdotchart(df2, x=&quot;name&quot;, y=&quot;mpg_z&quot;, color = &quot;cyl&quot;, palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;), sorting = &quot;descending&quot;, add = &quot;segment&quot;, add.params = list(color=&quot;lightgray&quot;, size=2), group = &quot;cyl&quot;, dot.size = 6, label = round(df2$mpg_z, 1), font.label = list(color=&quot;white&quot;, size=9, vjust=0.5), ggtheme = theme_pubr())+ geom_line(yintercept=0, linetype=2, color=&quot;lightgray&quot;) ###Cleveland点图1234ggdotchart(df2, x=&quot;name&quot;, y=&quot;mpg&quot;, color = &quot;cyl&quot;, palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;), sorting = &quot;descending&quot;, rotate = TRUE, dot.size = 2, y.text.col=TRUE, ggtheme = theme_pubr())+ theme_cleveland() #SessionInfo1sessionInfo() 12345678910111213141516171819202122232425262728## R version 3.4.0 (2017-04-21)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 8.1 x64 (build 9600)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] ggpubr_0.1.3 magrittr_1.5 ggplot2_2.2.1## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.11 knitr_1.16 munsell_0.4.3 colorspace_1.3-2## [5] R6_2.2.1 rlang_0.1.1 stringr_1.2.0 plyr_1.8.4 ## [9] dplyr_0.5.0 tools_3.4.0 grid_3.4.0 gtable_0.2.0 ## [13] DBI_0.6-1 htmltools_0.3.6 yaml_2.1.14 lazyeval_0.2.0 ## [17] rprojroot_1.2 digest_0.6.12 assertthat_0.2.0 tibble_1.3.3 ## [21] ggsignif_0.2.0 ggsci_2.4 purrr_0.2.2.2 evaluate_0.10 ## [25] rmarkdown_1.5 labeling_0.3 stringi_1.1.5 compiler_3.4.0 ## [29] scales_0.4.1 backports_1.1.0 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggpubr</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用circlize包绘制circos-plot]]></title>
    <url>%2F2017%2F06%2F25%2F%E7%94%A8circlize%E5%8C%85%E7%BB%98%E5%88%B6circos-plot%2F</url>
    <content type="text"><![CDATA[circlize包circlize包在德国癌症中心的华人博士Zuguang Gu开发的，有兴趣的可以去看看他的Github主页。这个包有两个文档，一个是介绍基本原理的绘制简单圈圈图的，也是本次要介绍的。另外一份文档专门介绍基因组数据绘制圈圈图Genomic Circos Plot,我自己还没看完，下次再介绍。根据我的学习发现这个包与ggplot2很相似，也是先创建一个图层，然后不断的添加图形元素（point、line、bar等），这些简单的图形元素都有circos.这个前缀进行绘制，比如要绘制点，则用circos.points()。具体的下面一一介绍。 用circlize绘制圈圈图 照例，没有安装这个包的先安装：install.packages(&quot;circlize&quot;)或者devtools::install_github(&quot;jokergoo/circlize&quot;)。绘图第一步是先初始化(circos.initialize),接下来绘制track，再添加基本元素。需要提一下的是，由于circlize绘制图是不断叠加的，因此如果我们一大段代码下来我们只能看到最终的图形，这里为了演示每端代码的结果，所以每次我都得初始化以及circlize.clear。 12345library(circlize)# 简单创建一个数据集set.seed(999)n &lt;- 1000a &lt;- data.frame(factors = sample(letters[1:8], n, replace = TRUE), x = rnorm(n), y = runif(n)) 绘制第一个track1234567891011par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)circos.par(track.height = 0.1)circos.initialize(factors = a$factors, x = a$x) #初始化，factors来控制track数目，初始化里只有x， 没有y。这一步相当于ggplot()circos.trackPlotRegion(factors = a$factors, y = a$y, panel.fun = function(x, y) &#123; circos.axis()&#125;)col &lt;- rep(c(&quot;#FF0000&quot;, &quot;#00FF00&quot;), 4) #自定义一下颜色# 这里先解释一下，一个track有好几个cell，具体数目由factors决定的，向本数据集中factors有八个，因此绘制一个track，其包含八个cell。含有前缀circos.track的函数会在所有的cel里添加基本元素，而只有前缀circos.的函数可以在特定的track、cell里添加基本元素。具体看下演示。circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5) #所有的cell里都绘制点图circos.text(-1, 0.5, &quot;left&quot;, sector.index = &quot;a&quot;, track.index = 1) #在track 1中的标记为a的cell里添加textcircos.text(1, 0.5, &quot;right&quot;, sector.index = &quot;a&quot;)circos.clear() ##接下来绘制第二个track circos.trackHist添加柱状图，由于柱状图相对高级一点，因此circos.trackHist会自动创建一个track，无需我们circos.trackPlotRegion进行创建。 12345678910111213par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)circos.par(track.height = 0.1)circos.initialize(factors = a$factors, x = a$x)circos.trackPlotRegion(factors = a$factors, y = a$y, panel.fun = function(x, y) &#123; circos.axis()&#125;)col &lt;- rep(c(&quot;#FF0000&quot;, &quot;#00FF00&quot;), 4)circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)circos.text(-1, 0.5, &quot;left&quot;, sector.index = &quot;a&quot;, track.index = 1)circos.text(1, 0.5, &quot;right&quot;, sector.index = &quot;a&quot;)bg.col &lt;- rep(c(&quot;#EFEFEF&quot;, &quot;#CCCCCC&quot;), 4)circos.trackHist(a$factors, a$x, bg.col = bg.col, col = NA)circos.clear() 创建第三个track 这里又得提一下，当我们绘制多个track时，我们添加基本元素时要指定添加到哪个track(track.index指定)、哪个cell(sector.index指定)里，如果不指定，那么将默认track是我们刚刚创建的那个。track.index、sector.index等参数可以通过get.cell.meta.data函数获取。 12345678910111213141516171819202122par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)circos.par(track.height = 0.1)circos.initialize(factors = a$factors, x = a$x)circos.trackPlotRegion(factors = a$factors, y = a$y, panel.fun = function(x, y) &#123; circos.axis()&#125;)col &lt;- rep(c(&quot;#FF0000&quot;, &quot;#00FF00&quot;), 4)circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)circos.text(-1, 0.5, &quot;left&quot;, sector.index = &quot;a&quot;, track.index = 1)circos.text(1, 0.5, &quot;right&quot;, sector.index = &quot;a&quot;)bg.col &lt;- rep(c(&quot;#EFEFEF&quot;, &quot;#CCCCCC&quot;), 4)circos.trackHist(a$factors, a$x, bg.col = bg.col, col = NA)circos.trackPlotRegion(factors = a$factors, x = a$x, y = a$y, panel.fun = function(x, y) &#123; grey = c(&quot;#FFFFFF&quot;, &quot;#CCCCCC&quot;, &quot;#999999&quot;) sector.index = get.cell.meta.data(&quot;sector.index&quot;) #这个是第三个track，因为我们刚刚创建，这里这一步不用也可。 xlim = get.cell.meta.data(&quot;xlim&quot;) ylim = get.cell.meta.data(&quot;ylim&quot;) circos.text(mean(xlim), mean(ylim), sector.index) circos.points(x[1:10], y[1:10], col = &quot;red&quot;, pch = 16, cex = 0.6) circos.points(x[11:20], y[11:20], col = &quot;blue&quot;, cex = 0.6)&#125;)circos.clear() 实际操作中我们常常会更新数据或者想更新图形，这是可以通过circos.updatePlotRegion函数在特定的track、cell里(先删除再添加)update，下面我们将通过circos.updatePlotRegion函数先删除track 2、sector d中的图形元素再添加点图。 123456789101112131415161718192021222324252627282930par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)circos.par(track.height = 0.1)circos.initialize(factors = a$factors, x = a$x)circos.trackPlotRegion(factors = a$factors, y = a$y, panel.fun = function(x, y) &#123; circos.axis()&#125;)col &lt;- rep(c(&quot;#FF0000&quot;, &quot;#00FF00&quot;), 4)circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)circos.text(-1, 0.5, &quot;left&quot;, sector.index = &quot;a&quot;, track.index = 1)circos.text(1, 0.5, &quot;right&quot;, sector.index = &quot;a&quot;)circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)circos.text(-1, 0.5, &quot;left&quot;, sector.index = &quot;a&quot;, track.index = 1)circos.text(1, 0.5, &quot;right&quot;, sector.index = &quot;a&quot;)bg.col &lt;- rep(c(&quot;#EFEFEF&quot;, &quot;#CCCCCC&quot;), 4)circos.trackHist(a$factors, a$x, bg.col = bg.col, col = NA)circos.trackPlotRegion(factors = a$factors, x = a$x, y = a$y, panel.fun = function(x, y) &#123; grey = c(&quot;#FFFFFF&quot;, &quot;#CCCCCC&quot;, &quot;#999999&quot;) sector.index = get.cell.meta.data(&quot;sector.index&quot;) xlim = get.cell.meta.data(&quot;xlim&quot;) ylim = get.cell.meta.data(&quot;ylim&quot;) circos.text(mean(xlim), mean(ylim), sector.index)circos.points(x[1:10], y[1:10], col = &quot;red&quot;, pch = 16, cex = 0.6) circos.points(x[11:20], y[11:20], col = &quot;blue&quot;, cex = 0.6)&#125;)# update第2个track中标记为d的sectorcircos.updatePlotRegion(sector.index = &quot;d&quot;, track.index = 2)circos.points(x = -2:2, y = rep(0, 5))xlim &lt;- get.cell.meta.data(&quot;xlim&quot;)ylim &lt;- get.cell.meta.data(&quot;ylim&quot;)circos.text(mean(xlim), mean(ylim), &quot;updated&quot;)circos.clear() 接下来绘制第四个track1234567891011121314151617181920212223242526272829303132par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)circos.par(track.height = 0.1)circos.initialize(factors = a$factors, x = a$x)circos.trackPlotRegion(factors = a$factors, y = a$y, panel.fun = function(x, y) &#123; circos.axis()&#125;)col &lt;- rep(c(&quot;#FF0000&quot;, &quot;#00FF00&quot;), 4)circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)circos.text(-1, 0.5, &quot;left&quot;, sector.index = &quot;a&quot;, track.index = 1)circos.text(1, 0.5, &quot;right&quot;, sector.index = &quot;a&quot;)circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)circos.text(-1, 0.5, &quot;left&quot;, sector.index = &quot;a&quot;, track.index = 1)circos.text(1, 0.5, &quot;right&quot;, sector.index = &quot;a&quot;)bg.col &lt;- rep(c(&quot;#EFEFEF&quot;, &quot;#CCCCCC&quot;), 4)circos.trackHist(a$factors, a$x, bg.col = bg.col, col = NA)circos.trackPlotRegion(factors = a$factors, x = a$x, y = a$y, panel.fun = function(x, y) &#123; grey = c(&quot;#FFFFFF&quot;, &quot;#CCCCCC&quot;, &quot;#999999&quot;) sector.index = get.cell.meta.data(&quot;sector.index&quot;) xlim = get.cell.meta.data(&quot;xlim&quot;) ylim = get.cell.meta.data(&quot;ylim&quot;) circos.text(mean(xlim), mean(ylim), sector.index) circos.points(x[1:10], y[1:10], col = &quot;red&quot;, pch = 16, cex = 0.6) circos.points(x[11:20], y[11:20], col = &quot;blue&quot;, cex = 0.6)&#125;)# update第2个track中标记为d的sectorcircos.updatePlotRegion(sector.index = &quot;d&quot;, track.index = 2)circos.points(x = -2:2, y = rep(0, 5))xlim &lt;- get.cell.meta.data(&quot;xlim&quot;)ylim &lt;- get.cell.meta.data(&quot;ylim&quot;)circos.text(mean(xlim), mean(ylim), &quot;updated&quot;)circos.clear()circos.trackPlotRegion(factors = a$factors, y = a$y)circos.trackLines(a$factors[1:100], a$x[1:100], a$y[1:100], type = &quot;h&quot;) 接下来添加links，links可以是point到point、point到interval、interval到interval 1234567891011121314151617181920212223242526272829303132333435par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)circos.par(track.height = 0.1)circos.initialize(factors = a$factors, x = a$x)circos.trackPlotRegion(factors = a$factors, y = a$y, panel.fun = function(x, y) &#123; circos.axis()&#125;)col &lt;- rep(c(&quot;#FF0000&quot;, &quot;#00FF00&quot;), 4)circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)circos.text(-1, 0.5, &quot;left&quot;, sector.index = &quot;a&quot;, track.index = 1)circos.text(1, 0.5, &quot;right&quot;, sector.index = &quot;a&quot;)circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)circos.text(-1, 0.5, &quot;left&quot;, sector.index = &quot;a&quot;, track.index = 1)circos.text(1, 0.5, &quot;right&quot;, sector.index = &quot;a&quot;)bg.col &lt;- rep(c(&quot;#EFEFEF&quot;, &quot;#CCCCCC&quot;), 4)circos.trackHist(a$factors, a$x, bg.col = bg.col, col = NA)circos.trackPlotRegion(factors = a$factors, x = a$x, y = a$y, panel.fun = function(x, y) &#123; grey = c(&quot;#FFFFFF&quot;, &quot;#CCCCCC&quot;, &quot;#999999&quot;) sector.index = get.cell.meta.data(&quot;sector.index&quot;) xlim = get.cell.meta.data(&quot;xlim&quot;) ylim = get.cell.meta.data(&quot;ylim&quot;)circos.text(mean(xlim), mean(ylim), sector.index) circos.points(x[1:10], y[1:10], col = &quot;red&quot;, pch = 16, cex = 0.6) circos.points(x[11:20], y[11:20], col = &quot;blue&quot;, cex = 0.6)&#125;)# update第2个track中标记为d的sectorcircos.updatePlotRegion(sector.index = &quot;d&quot;, track.index = 2)circos.points(x = -2:2, y = rep(0, 5))xlim &lt;- get.cell.meta.data(&quot;xlim&quot;)ylim &lt;- get.cell.meta.data(&quot;ylim&quot;)circos.text(mean(xlim), mean(ylim), &quot;updated&quot;)circos.clear()circos.trackPlotRegion(factors = a$factors, y = a$y)circos.trackLines(a$factors[1:100], a$x[1:100], a$y[1:100], type = &quot;h&quot;)circos.link(&quot;a&quot;, 0, &quot;b&quot;, 0, h = 0.3) #point to pointcircos.link(&quot;c&quot;, c(-0.5, 0.5), &quot;d&quot;, c(-0.5, 0.5), col = &quot;red&quot;, border = NA, h = 0.2) #intreval to intervalcircos.link(&quot;e&quot;, 0, &quot;g&quot;, c(-1, 1), col = &quot;green&quot;, border = &quot;black&quot;, lwd = 2, lty = 2) #point to interval circlize详述 circlize的绘图规则是初始化(initialize)-创建track-添加图形元素-创建track-添加图形元素-…-circos.clear。具体参数设置以及解释由于内容太多，有兴趣的可以自己参考文档。 我认为比较重要的是要理解track、sector。由于基本所有的图形元素我们都是添加在sector里面，因此就需要指定track.index以及sector.index。接下来就用个例子来讲解一下如何操纵track、sector。 12345678910par(mar = c(1, 1, 1, 1))factors &lt;- letters[1:8]circos.initialize(factors = factors, xlim = c(0, 1)) #初始化# 绘制三个track，并显示具体信息for (i in 1:3) &#123; circos.trackPlotRegion(ylim = c(0, 1))&#125;circos.info(plot = TRUE)# 通过draw.sector()来高亮某一sector，比如a：draw.sector(get.cell.meta.data(&quot;cell.start.degree&quot;, sector.index = &quot;a&quot;), get.cell.meta.data(&quot;cell.end.degree&quot;, sector.index = &quot;a&quot;), rou1 = 1, col = &quot;blue&quot;)circos.clear() 12345678# 高亮某一track， 比如第一个track：circos.initialize(factors = factors, xlim = c(0, 1))for (i in 1:3) &#123; circos.trackPlotRegion(ylim = c(0, 1))&#125;circos.info(plot = TRUE)draw.sector(0, 360, rou1 = get.cell.meta.data(&quot;cell.top.radius&quot;, track.index = 1), rou2 = get.cell.meta.data(&quot;cell.bottom.radius&quot;, track.index = 1), col = &quot;green&quot;)circos.clear() 123456789# 高亮某一track某一sector，比如地2、3track中的e、f(sector)：circos.initialize(factors = factors, xlim = c(0, 1))for (i in 1:3) &#123; circos.trackPlotRegion(ylim = c(0, 1))&#125;circos.info(plot = TRUE)draw.sector(get.cell.meta.data(&quot;cell.start.degree&quot;, sector.index = &quot;e&quot;), get.cell.meta.data(&quot;cell.end.degree&quot;, sector.index = &quot;f&quot;), get.cell.meta.data(&quot;cell.top.radius&quot;, track.index = 2), get.cell.meta.data(&quot;cell.bottom.radius&quot;, track.index = 3), col = &quot;red&quot;)circos.clear() #千万别忘了circos.clear，不然下次无法绘图。 放大某一特定区域123456789101112131415161718192021222324252627df &lt;- data.frame(factors = sample(letters[1:6], 100, replace = TRUE), x = rnorm(100), y = rnorm(100), stringsAsFactors = FALSE)# 放大a，b区域zoom_df &lt;- df %&gt;% dplyr::filter(factors %in% c(&quot;a&quot;, &quot;b&quot;))zoom_df$factors &lt;- paste0(&quot;zoom_&quot;, zoom_df$factors)df2 &lt;- rbind(df, zoom_df)xrange &lt;- tapply(df2$x, df2$factors, function(x) max(x) - min(x))normal_sector_index &lt;- unique(df$factors)zoomed_sector_index &lt;- unique(zoom_df$factors)sector.width &lt;- c(xrange[normal_sector_index]/sum(xrange[normal_sector_index]), xrange[zoomed_sector_index]/sum(xrange[zoomed_sector_index]))# 绘图par(mar = c(1, 1, 1, 1))circos.par(start.degree = 90)circos.initialize(df2$factors, x = df2$x, sector.width = sector.width)circos.trackPlotRegion(df2$factors, x = df2$x, y = df2$y, panel.fun = function(x, y) &#123; circos.points(x, y, col = &quot;red&quot;, pch = 16, cex = 0.5) xlim = get.cell.meta.data(&quot;xlim&quot;) ylim = get.cell.meta.data(&quot;ylim&quot;) sector.index = get.cell.meta.data(&quot;sector.index&quot;) circos.text(mean(xlim), mean(ylim), sector.index, niceFacing = TRUE)&#125;)# 添加linkscircos.link(&quot;a&quot;, get.cell.meta.data(&quot;cell.xlim&quot;, sector.index = &quot;a&quot;), &quot;zoom_a&quot;, get.cell.meta.data(&quot;cell.xlim&quot;, sector.index = &quot;zoom_a&quot;), border = NA, col = &quot;red&quot;) circos.clear() 举个栗子 圈圈图+热图+进化树 1234567891011121314151617181920212223242526272829set.seed(1234)data &lt;- matrix(rnorm(100 * 10), nrow = 10, ncol = 100)col &lt;- colorRamp2(c(-2, 0, 2), c(&quot;green&quot;, &quot;black&quot;, &quot;red&quot;))factors &lt;- rep(letters[1:2], times = c(30, 70))data_list &lt;- list(a = data[, factors == &quot;a&quot;], b = data[, factors == &quot;b&quot;])dend_list &lt;- list(a = as.dendrogram(hclust(dist(t(data_list[[&quot;a&quot;]])))), b = as.dendrogram(hclust(dist(t(data_list[[&quot;b&quot;]])))))circos.par(cell.padding = c(0, 0, 0, 0), gap.degree = 5)circos.initialize(factors = factors, xlim = cbind(c(0, 0), table(factors)))circos.track(ylim = c(0, 10), bg.border = NA, panel.fun = function(x, y) &#123; sector.index = get.cell.meta.data(&quot;sector.index&quot;) d = data_list[[sector.index]] dend = dend_list[[sector.index]] d2 = d[, order.dendrogram(dend)] col_data = col(d2)nr = nrow(d2)nc = ncol(d2) for (i in 1:nr) &#123; circos.rect(1:nc - 1, rep(nr - i, nc), 1:nc, rep(nr - i + 1, nc),border = col_data[i, ], col = col_data[i, ]) &#125;&#125;)max_height &lt;- max(sapply(dend_list, function(x) attr(x, &quot;height&quot;)))circos.track(ylim = c(0, max_height), bg.border = NA, track.height = 0.3,panel.fun = function(x, y) &#123; sector.index = get.cell.meta.data(&quot;sector.index&quot;)dend = dend_list[[sector.index]]circos.dendrogram(dend, max_height = max_height)&#125;)circos.clear() 多图排列 直接用layout设置 123456789101112131415layout(matrix(1:9, 3, 3))for (i in 1:9) &#123; factors = letters[1:8] par(mar = c(0.5, 0.5, 0.5, 0.5)) circos.par(cell.padding = c(0, 0, 0, 0)) circos.initialize(factors = factors, xlim = c(0, 1)) circos.trackPlotRegion(ylim = c(0, 1), track.height = 0.05, bg.col = rand_color(8), bg.border = NA) # 绘制links for (i in 1:20) &#123;se = sample(letters[1:8], 2) circos.link(se[1], runif(2), se[2], runif(2),col = rand_color(1, transparency = 0.4), border = NA) &#125; circos.clear() sessionInfo 理解circlize包的原理，绘制基因组数据的图形也是一样的。有时间下次介绍(主要是我自己还没看完，看不太懂)。老规矩，给出sessionInfo。1sessionInfo() 1234567891011121314151617181920212223242526272829303132333435## R version 3.4.0 (2017-04-21)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 8.1 x64 (build 9600)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] circlize_0.4.0 BiocInstaller_1.26.0 forcats_0.2.0## [4] stringr_1.2.0 dplyr_0.5.0 purrr_0.2.2.2 ## [7] readr_1.1.1 tidyr_0.6.3 tibble_1.3.1## [10] ggplot2_2.2.1 tidyverse_1.1.1.9000#### loaded via a namespace (and not attached):## [1] shape_1.4.2 clisymbols_1.2.0 reshape2_1.4.2 ## [4] haven_1.0.0 lattice_0.20-35 colorspace_1.3-2## [7] htmltools_0.3.6 yaml_2.1.14 rlang_0.1.1 ## [10] foreign_0.8-68 DBI_0.6-1 modelr_0.1.0## [13] readxl_1.0.0 plyr_1.8.4 munsell_0.4.3 ## [16] gtable_0.2.0 cellranger_1.1.0 rvest_0.3.2 ## [19] GlobalOptions_0.0.12 psych_1.7.5 evaluate_0.10 ## [22] knitr_1.16 parallel_3.4.0 broom_0.4.2 ## [25] Rcpp_0.12.11 scales_0.4.1 backports_1.1.0 ## [28] formatR_1.5 jsonlite_1.4 boxes_0.0.0.9000## [31] mnormt_1.5-5 hms_0.3 digest_0.6.12 ## [34] stringi_1.1.5 grid_3.4.0 rprojroot_1.2## [37] tools_3.4.0 magrittr_1.5 lazyeval_0.2.0 ## [40] crayon_1.3.2.9000 xml2_1.1.1 lubridate_1.6.0 ## [43] assertthat_0.2.0 rmarkdown_1.5 httr_1.2.1 ## [46] rstudioapi_0.6 R6_2.2.1 nlme_3.1-131## [49] compiler_3.4.0 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>circlize</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ggplot2学习笔记系列之利用ggplot2绘制误差棒及显著性标记]]></title>
    <url>%2F2017%2F06%2F25%2Fggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%A9%E7%94%A8ggplot2%E7%BB%98%E5%88%B6%E8%AF%AF%E5%B7%AE%E6%A3%92%E5%8F%8A%E6%98%BE%E8%91%97%E6%80%A7%E6%A0%87%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[绘制带有误差棒的条形图 123456789101112131415library(ggplot2)#创建数据集df &lt;- data.frame(treatment = factor(c(1, 1, 1, 2, 2, 2, 3, 3, 3)), response = c(2, 5, 4, 6, 9, 7, 3, 5, 8), group = factor(c(1, 2, 3, 1, 2, 3, 1, 2, 3)), se = c(0.4, 0.2, 0.4, 0.5, 0.3, 0.2, 0.4, 0.6, 0.7))head(df) #查看数据集## treatment response group se## 1 1 2 1 0.4## 2 1 5 2 0.2## 3 1 4 3 0.4## 4 2 6 1 0.5## 5 2 9 2 0.3## 6 2 7 3 0.2 12345678# 使用geom_errorbar()绘制带有误差棒的条形图# 这里一定要注意position要与`geom_bar()`保持一致，由于系统默认dodge是0.9，# 因此geom_errorbar()里面position需要设置0.9，width设置误差棒的大小ggplot(data = df, aes(x = treatment, y = response, fill = group)) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) + geom_errorbar(aes(ymax = response + se, ymin = response - se), position = position_dodge(0.9), width = 0.15) + scale_fill_brewer(palette = &quot;Set1&quot;) 绘制带有显著性标记的条形图123456789label &lt;- c(&quot;&quot;, &quot;*&quot;, &quot;**&quot;, &quot;&quot;, &quot;**&quot;, &quot;*&quot;, &quot;&quot;, &quot;&quot;, &quot;*&quot;) #这里随便设置的显著性，还有abcdef等显著性标记符号，原理一样，这里不再重复。# 添加显著性标记跟上次讲的添加数据标签是一样的，这里我们假设1是对照ggplot(data = df, aes(x = treatment, y = response, fill = group)) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) + geom_errorbar(aes(ymax = response + se, ymin = response - se), position = position_dodge(0.9), width = 0.15) + geom_text(aes(y = response + 1.5 * se, label = label, group = group), position = position_dodge(0.9), size = 5, fontface = &quot;bold&quot;) + scale_fill_brewer(palette = &quot;Set1&quot;) #这里的label就是刚才设置的，group是数据集中的，fontface设置字体。 绘制两条形图中间带有星号的统计图12345678910111213141516#创建一个简单的数据集Control &lt;- c(2.0,2.5,2.2,2.4,2.1)Treatment &lt;- c(3.0,3.3,3.1,3.2,3.2)mean &lt;- c(mean(Control), mean(Treatment))sd &lt;- c(sd(Control), sd(Treatment))df1 &lt;- data.frame(V=c(&quot;Control&quot;, &quot;Treatment&quot;), mean=mean, sd=sd)df1$V &lt;- factor(df1$V, levels=c(&quot;Control&quot;, &quot;Treatment&quot;))#利用geom_segment()绘制图形ggplot(data=df1, aes(x=V, y=mean, fill=V))+ geom_bar(stat = &quot;identity&quot;,position = position_dodge(0.9),color=&quot;black&quot;)+ geom_errorbar(aes(ymax=mean+sd, ymin=mean-sd), width=0.05)+ geom_segment(aes(x=1, y=2.5, xend=1, yend=3.8))+#绘制control端的竖线 geom_segment(aes(x=2, y=3.3, xend=2, yend=3.8))+#绘制treatment端竖线 geom_segment(aes(x=1, y=3.8, xend=1.45, yend=3.8))+ geom_segment(aes(x=1.55, y=3.8, xend=2, yend=3.8))+#绘制两段横线 annotate(&quot;text&quot;, x=1.5, y=3.8, label=&quot;〇&quot;, size=5)#annotate函数也可以添加标签 为图形添加标题图形标题有图标题、坐标轴标题、图例标题等123456p &lt;- ggplot(data = df, aes(x = treatment, y = response, fill = group)) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) +geom_errorbar(aes(ymax = response + se, ymin = response - se),position = position_dodge(0.9), width = 0.15) + scale_fill_brewer(palette = &quot;Set1&quot;)# 利用ggtitle()添加图标题,还有labs（）也可以添加标题，最后会提一下。（有一个问题就是ggtitle()添加的标题总是左对齐）p + ggtitle(&quot;利用ggtitle()添加图标题&quot;) 1234# 利用xlab()\ylab()添加/修改坐标轴标题p + ggtitle(&quot;利用ggtitle()添加图标题&quot;) + xlab(&quot;不同处理&quot;) + ylab(&quot;response&quot;) #标题的参数修改在theme里，theme是一个很大的函数，几乎可以定义一切，下次有时间会讲解 最后再讲解一下如何将多副图至于一个页面 利用包gridExtra中grid.arrange()函数实现1234567891011121314151617# 将四幅图放置于一个页面中p &lt;- ggplot(data = df, aes(x = treatment, y = response, fill = group)) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) + geom_errorbar(aes(ymax = response + se, ymin = response - se), position = position_dodge(0.9), width = 0.15) + scale_fill_brewer(palette = &quot;Set1&quot;)p1 &lt;- p + ggtitle(&quot;利用ggtitle()添加图标题&quot;)p2 &lt;- p + ggtitle(&quot;利用ggtitle()添加图标题&quot;) + xlab(&quot;不同处理&quot;) + ylab(&quot;response&quot;)p3 &lt;- ggplot(data = df, aes(x = treatment, y = response, fill = group)) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) + geom_errorbar(aes(ymax = response + se, ymin = response - se), position = position_dodge(0.9), width = 0.15) + geom_text(aes(y = response + 1.5 * se, label = label, group = group), position = position_dodge(0.9), size = 5, fontface = &quot;bold&quot;) + scale_fill_brewer(palette = &quot;Set1&quot;)library(gridExtra) #没有安装此包先用install.packages(&apos;gridExtra&apos;)安装grid.arrange(p, p1, p2, p3) 上次有人问坐标轴旋转的实现，坐标轴旋转有时是很有用的，下面是我看过的一个例子，用来介绍一下。1234#先加载他的数据url.world_ports &lt;- url(&quot;http://sharpsightlabs.com/wp-content/datasets/world_ports.RData&quot;)load(url.world_ports)knitr::kable(df.world_ports[1:5,])#该数据是关于世界上各个港口的数据汇总 12345678library(dplyr) #用于数据操作，与ggplot2一样是R语言必学包#现在绘制条形图(%&gt;%上次说过是管道操作，用于连接各个代码，十分有用)df.world_ports%&gt;%filter(year==2014)%&gt;% #筛选2014年的数据 ggplot(aes(x=reorder(port_label, desc(volume)), y=volume))+ geom_bar(stat = &quot;identity&quot;, fill=&quot;darkred&quot;)+ labs(title=&quot;Busiest container ports in the world&quot;)+ labs(subtitle = &apos;2014, in order of shipping volume&apos;)+ #添加副标题 labs(x = &quot;Port&quot;, y = &quot;Shipping\nVolume&quot;)+ theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .4))#调整x轴标签，angle=90表示标签旋转90度，从图中可以看出 123456789#现在旋转坐标轴，并筛选排名小于25的港口，并且添加数据标签df.world_ports %&gt;% filter(year==2014, rank&lt;=25) %&gt;% #筛选2014年并且rank小于等于25的数据 ggplot(aes(x=reorder(port, volume), y=volume))+ geom_bar(stat = &quot;identity&quot;, fill=&quot;darkred&quot;)+ labs(title=&quot;Busiest container ports in the world&quot;)+ labs(subtitle = &apos;2014, in order of shipping volume&apos;)+ labs(x = &quot;Port&quot;, y = &quot;Shipping\nVolume&quot;)+ geom_text(aes(label=volume), hjust=1.2, color=&quot;white&quot;)+ coord_flip()#旋转坐标轴 两图相比，明显第二幅图好，一是可以添加数据标签，二是不用歪着脖子看。本来打算讲讲图例的但是发现内容太多了，就不讲了，下次吧！ 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ggplot2学习笔记系列之利用ggplot2绘制条形图]]></title>
    <url>%2F2017%2F06%2F25%2Fggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%A9%E7%94%A8ggplot2%E7%BB%98%E5%88%B6%E6%9D%A1%E5%BD%A2%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[简介条形图可以说是我们最常用的数据可视化方法了，通常用于展示不同分类条件下（在x轴上）某个数值型变量的取值（y轴上）。绘制条形图时需要特别注意的一个细节是条形图的条形高度有时表示的是数据集中变量的频数，有时表示的则是变量本身。本文将会介绍这两类条形图的绘图技巧。 绘制条形图使用ggplot()函数与geom_bar(stat=&quot;identity&quot;)，绘制条形图，我们将利用gcookbook包中的数据进行绘制。12345678910#没安装包要先安装包gcookbook、ggplot2以及dplyrlibrary(gcookbook)#加载gcookbook以使用其包含的数据library(ggplot2)#用于可视化library(dplyr)#用于数据处理这里我们调用**gcookbook**里的数据集绘制条形图head(pg_mean)#查看数据集## group weigh 1 ctrl 5.032 2 trt1 4.661 3 trt2 5.526 123ggplot(data=pg_mean, aes(x=group, y=weight))+#将group、weight分别赋值给x、y轴 geom_bar(stat = &quot;identity&quot;)#必须将geom_bar()中的stat(统计变换)参数设置为”identity“，即对原始数据集不作任何统计变换，而该参数的默认值为&apos;count&apos;，即观测数量。 当x是连续型（数值型）变量时，条形图略有不同，需要略作调整，具体如下：123456str(BOD)#查看BOD数据集可以发现Time变量是数值型## &apos;data.frame&apos;: 6 obs. of 2 variables: ## $ Time : num 1 2 3 4 5 7## $ demand: num 8.3 10.3 19 16 15.6 19.8## - attr(*, &quot;reference&quot;)= chr &quot;A1.4, p. 270&quot; 1ggplot(data=BOD, aes(x=Time, y=demand))+ geom_bar(stat = &quot;identity&quot;)#此时Time是数值型 12ggplot(data=BOD, aes(x=factor(Time), y=demand))+ geom_bar(stat = &quot;identity&quot;)#将Time转换为因子型（分类/离散变量），仔细比较两图 条形图颜色有两部分：填充颜色（fill）以及边框颜色（color），因此调整条形图颜色要调两部分，具体如下：12ggplot(data=BOD, aes(x=factor(Time), y=demand))+ geom_bar(stat = &quot;identity&quot;, fill=&quot;blue&quot;, color=&quot;black&quot;)#可以自己设定喜好的颜色 绘制簇状条形图方法：将分类变量映射到fill参数，运用geom_bar(position=&quot;dodge&quot;)绘制，具体如下：123456789head(cabbage_exp)#查看数据，发现含有两个分类变量：`Cultivar`和`Date`以及一个连续型变量Weight## Cultivar Date Weight sd n se## 1 c39 d16 3.18 0.9566144 10 0.30250803## 2 c39 d20 2.80 0.2788867 10 0.08819171## 3 c39 d21 2.74 0.9834181 10 0.31098410## 4 c52 d16 2.26 0.4452215 10 0.14079141## 5 c52 d20 3.11 0.7908505 10 0.25008887## 6 c52 d21 1.47 0.2110819 10 0.06674995 12ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+#分别将Date与Cultivar映射给x和fill geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;)#position = &quot;dodge&quot;表示条形图分开不重叠(簇形图)，默认的为stack（堆叠式）,还有百分比堆叠式(fill) 12ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+geom_bar(stat = &quot;identity&quot;, position = &quot;stack&quot;)#堆叠式 12ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+ geom_bar(stat = &quot;identity&quot;, position = &quot;fill&quot;)#百分比堆叠式 设置颜色或者调用调色板123ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+ geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;, color=&quot;black&quot;)+ scale_fill_brewer(palette = &quot;Set1&quot;)#Set1为调色板，后期将会专门讲解Color设置 123ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+ geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;, color=&quot;black&quot;)+ scale_fill_manual(values = c(&quot;darkred&quot;, &quot;purple&quot;))#自设置颜色 绘制频数条形图123456789101112131415head(diamonds,n=10)#查看前10行数据## # A tibble: 10 × 10## carat cut color clarity depth table price x y z## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;## 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43## 2 0.21 Premium E SI1 59.8 61 326 3.89 3.84 2.31## 3 0.23 Good E VS1 56.9 65 327 4.05 4.07 2.31## 4 0.29 Premium I VS2 62.4 58 334 4.20 4.23 2.63## 5 0.31 Good J SI2 63.3 58 335 4.34 4.35 2.75## 6 0.24 Very Good J VVS2 62.8 57 336 3.94 3.96 2.48## 7 0.24 Very Good I VVS1 62.3 57 336 3.95 3.98 2.47## 8 0.26 Very Good H SI1 61.9 55 337 4.07 4.11 2.53## 9 0.22 Fair E VS2 65.1 61 337 3.87 3.78 2.49## 10 0.23 Very Good H VS1 59.4 61 338 4.00 4.05 2.39 12ggplot(diamonds, aes(x=cut))+#此时不要映射任何变量到y geom_bar()#等价于geom_bar(stat=&quot;bin&quot;) 绘制y轴正负轴都有数据的条形图12345678910111213#首先先创建一下数据集set.seed(1111)#此命令保证数据结果可以重现在任何电脑上x &lt;- 1980+1:36#赋值xy &lt;- round(100*rnorm(36))#赋值ymydata &lt;- data.frame(x=x, y=y)#创建数据集mydatahead(mydata)#查看数据集## x y## 1 1981 -9## 2 1982 132## 3 1983 64## 4 1984 117## 5 1985 12## 6 1986 -293 12345678910mydata &lt;- mydata%&gt;%#%&gt;%管道操作，结合dplyr为数据处理神器 mutate(judge=ifelse(y&gt;=0,&quot;Yes&quot;, &quot;No&quot;))#创建judge变量，将y正负分类head(mydata)#查看数据## x y judge## 1 1981 -9 No## 2 1982 132 Yes## 3 1983 64 Yes## 4 1984 117 Yes## 5 1985 12 Yes## 6 1986 -293 No 1234接下来绘制条形图ggplot(data=mydata, aes(x=x, y=y, fill=judge))+ geom_bar(stat = &quot;identity&quot;,position = &quot;identity&quot;)+#这里position=&quot;identity&quot;可以避免系统对负值绘制条形图发出警告信息 scale_fill_manual(values = c(&quot;purple&quot;, &quot;blue&quot;), guide=FALSE)+xlab(&quot;Year&quot;)#guide=FALSE表示不要图例,x轴标题为Year 通过width来调整条形宽度以及条形距离1234567891011head(diamonds)## # A tibble: 6 × 10## carat cut color clarity depth table price x y z## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;## 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43## 2 0.21 Premium E SI1 59.8 61 326 3.89 3.84 2.31## 3 0.23 Good E VS1 56.9 65 327 4.05 4.07 2.31## 4 0.29 Premium I VS2 62.4 58 334 4.20 4.23 2.63## 5 0.31 Good J SI2 63.3 58 335 4.34 4.35 2.75## 6 0.24 Very Good J VVS2 62.8 57 336 3.94 3.96 2.48 123ggplot(data=diamonds, aes(x=color, y=price, fill=cut))+ geom_bar(stat = &quot;identity&quot;, width = 0.6, position = position_dodge(0.8))+#调整条形宽度以及条形距离 scale_fill_brewer(palette = &quot;Set1&quot;) geom_text()添加数据标签使用geom_text()为条形图添加标签，需要分别指定一个变量映射给x、y以及标签（label），vjust和hjust分别调整标签的竖直和水平位置。1234标签在条形图顶端下方ggplot(data=cabbage_exp, aes(x=interaction(Date, Cultivar), y=Weight))+ geom_bar(stat = &quot;identity&quot;)+ geom_text(aes(label=Weight), vjust=1.5, color=&quot;white&quot;) 1234标签在条形图顶端上方ggplot(data=cabbage_exp, aes(x=interaction(Date, Cultivar), y=Weight))+ geom_bar(stat = &quot;identity&quot;)+ geom_text(aes(label=Weight), vjust=-0.3, color=&quot;red&quot;)#可以通过color、size等自行调整标签属性 12345堆叠图也一样ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+ geom_bar(stat=&quot;identity&quot;, position = &quot;stack&quot;)+ geom_text(aes(label=Weight), size=5, color=&quot;black&quot;, vjust=3.5, hjust=0.5, position = position_stack())#这里的position要与geom_bar()里面的保持一致，各种参数多调整才能效果最佳 下次将重点讲解如何添加误差棒、显著性标记、坐标轴标题、图标题以及部分小技巧等等 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言学习笔记之聚类分析]]></title>
    <url>%2F2017%2F06%2F25%2FR%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[使用k-means聚类所需的包： factoextra cluster #加载包12library(factoextra)library(cluster) #数据准备使用内置的R数据集USArrests123456#load the datasetdata(&quot;USArrests&quot;)#remove any missing value (i.e, NA values for not available)#That might be present in the dataUSArrests &lt;- na.omit(USArrests)#view the first 6 rows of the datahead(USArrests, n=6) 在此数据集中，列是变量，行是观测值在聚类之前我们可以先进行一些必要的数据检查即数据描述性统计，如平均值、标准差等1234567desc_stats &lt;- data.frame( Min=apply(USArrests, 2, min),#minimumMed=apply(USArrests, 2, median),#median Mean=apply(USArrests, 2, mean),#mean SD=apply(USArrests, 2, sd),#Standard deviation Max=apply(USArrests, 2, max)#maximum)desc_stats &lt;- round(desc_stats, 1)#保留小数点后一位head(desc_stats) 变量有很大的方差及均值时需进行标准化1df &lt;- scale(USArrests) #数据集群性评估使用get_clust_tendency()计算Hopkins统计量123res &lt;- get_clust_tendency(df, 40, graph = TRUE)res$hopkins_stat## [1] 0.3440875 12#Visualize the dissimilarity matrixres$plot Hopkins统计量的值&lt;0.5，表明数据是高度可聚合的。另外，从图中也可以看出数据可聚合。 #估计聚合簇数由于k均值聚类需要指定要生成的聚类数量，因此我们将使用函数clusGap()来计算用于估计最优聚类数。函数fviz_gap_stat()用于可视化。12345set.seed(123)## Compute the gap statisticgap_stat &lt;- clusGap(df, FUN = kmeans, nstart = 25, K.max = 10, B = 500) # Plot the resultfviz_gap_stat(gap_stat) 图中显示最佳为聚成四类（k=4） #进行聚类123set.seed(123)km.res &lt;- kmeans(df, 4, nstart = 25)head(km.res$cluster, 20) 12# Visualize clusters using factoextrafviz_cluster(km.res, USArrests) #检查cluster silhouette图 Recall that the silhouette measures (SiSi) how similar an object ii is to the the other objects in its own cluster versus those in the neighbor cluster. SiSi values range from 1 to - 1: A value of SiSi close to 1 indicates that the object is well clustered. In the other words, the object ii is similar to the other objects in its group. A value of SiSi close to -1 indicates that the object is poorly clustered, and that assignment to some other cluster would probably improve the overall results.123sil &lt;- silhouette(km.res$cluster, dist(df))rownames(sil) &lt;- rownames(USArrests)head(sil[, 1:3]) 12#Visualize fviz_silhouette(sil) 图中可以看出有负值，可以通过函数silhouette()确定是哪个观测值1234neg_sil_index &lt;- which(sil[, &quot;sil_width&quot;] &lt; 0)sil[neg_sil_index, , drop = FALSE]## cluster neighbor sil_width## Missouri 3 2 -0.07318144 #eclust():增强的聚类分析 与其他聚类分析包相比，eclust()有以下优点： 简化了聚类分析的工作流程 可以用于计算层次聚类和分区聚类 eclust()自动计算最佳聚类簇数。 自动提供Silhouette plot 可以结合ggplot2绘制优美的图形 #使用eclust()的K均值聚类12# Compute k-meansres.km &lt;- eclust(df, &quot;kmeans&quot;) 12# Gap statistic plotfviz_gap_stat(res.km$gap_stat) 123456# Silhouette plotfviz_silhouette(res.km)## cluster size ave.sil.width## 1 1 13 0.31## 2 2 29 0.38## 3 3 8 0.39 #使用eclust（）的层次聚类123# Enhanced hierarchical clusteringres.hc &lt;- eclust(df, &quot;hclust&quot;) # compute hclustfviz_dend(res.hc, rect = TRUE) # dendrogam 123456#下面的R代码生成Silhouette plot和分层聚类散点图。fviz_silhouette(res.hc) # silhouette plot## cluster size ave.sil.width## 1 1 19 0.26## 2 2 19 0.28## 3 3 12 0.43 1fviz_cluster(res.hc) # scatter plot #Infos This analysis has been performed using R software (R version 3.3.2) 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>Cluster analysis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言学习笔记之相关性矩阵分析及其可视化]]></title>
    <url>%2F2017%2F06%2F25%2FR%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%9B%B8%E5%85%B3%E6%80%A7%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E5%8F%8A%E5%85%B6%E5%8F%AF%E8%A7%86%E5%8C%96%2F</url>
    <content type="text"><![CDATA[计算相关矩阵R内置函数cor()可以用来计算相关系数：cor(x, method = c(&quot;pearson&quot;, &quot;kendall&quot;, &quot;spearman&quot;))，如果数据有缺失值，用cor(x, method = &quot;pearson&quot;, use = &quot;complete.obs&quot;)。 导入数据 如果数据格式是txt，用my_data &lt;- read.delim(file.choose()) csv则用my_data &lt;- read.csv(file.choose())导入。这里我们利用R内置数据集mtcars。 123data(mtcars)#加载数据集mydata &lt;- mtcars[, c(1,3,4,5,6,7)]head(mydata, 6)#查看数据前6行 计算相关系数矩阵12res &lt;- cor(mydata)round(res, 2)#保留两位小数 cor()只能计算出相关系数，无法给出显著性水平p-value,Hmisc包里的rcorr()函数能够同时给出相关系数以及显著性水平p-value。rcorr(x, type = c(“pearson”,“spearman”))。 The output of the function rcorr() is a list containing the following elements : - r : the correlation matrix - n : the matrix of the number of observations used in analyzing each pair of variables - P : the p-values corresponding to the significance levels of correlations. 123library(Hmisc)#加载包res2 &lt;- rcorr(as.matrix(mydata))res2 12#可以用res2$r、res2$P来提取相关系数以及显著性p-valueres2$r 1res2$P 如何将相关系数以及显著性水平p-value整合进一个矩阵内，可以自定义一个函数flattenCorrMatrix。 12345678910111213# ++++++++++++++++++++++++++++# flattenCorrMatrix# ++++++++++++++++++++++++++++# cormat : matrix of the correlation coefficients# pmat : matrix of the correlation p-valuesflattenCorrMatrix &lt;- function(cormat, pmat) &#123;ut &lt;- upper.tri(cormat) data.frame( row = rownames(cormat)[row(cormat)[ut]], column = rownames(cormat)[col(cormat)[ut]], cor =(cormat)[ut], p = pmat[ut] )&#125;举个栗子---res3 &lt;- rcorr(as.matrix(mtcars[,1:7]))flattenCorrMatrix(res3$r, res3$P) 可视化相关系数矩阵有不同的方法来可视化，主要有下面四种： symnum() function corrplot() function to plot a correlogram scatter plots heatmap ##symnum() function主要用法：12symnum(x, cutpoints = c(0.3, 0.6, 0.8, 0.9, 0.95), symbols = c(&quot; “,”.“,”,“,”+“,”*“,”B“), abbr.colnames = TRUE) #很好理解，0-0.3用空格表示， 0.3-0.6用.表示， 以此类推。 举个栗子1symnum(res, abbr.colnames = FALSE)#abbr.colnames用来控制列名 ##corrplot() function to plot a correlogram这个函数来自于包corrplot(),通过颜色深浅来显著相关程度。参数主要有： type: “upper”, “lower”, “full”,显示上三角还是下三角还是全部 order:用什么方法，这里是hclust tl.col (for text label color) and tl.srt (for text label string rotation) :控制文本颜色以及旋转角度12library(corrplot)#先加载包corrplot(res, type = &quot;upper&quot;, order = &quot;hclust&quot;, tl.col = &quot;black&quot;, tl.srt = 45) ##也可以结合显著性绘制12# Insignificant correlations are leaved blankcorrplot(res2$r, type=&quot;upper&quot;, order=&quot;hclust&quot;, p.mat = res2$P, sig.level = 0.01, insig = &quot;blank&quot;) ##Use chart.Correlation(): Draw scatter plotschart.Correlation()来自于包PerformanceAnalytics12library(PerformanceAnalytics)#加载包chart.Correlation(mydata, histogram=TRUE, pch=19) 解释一下上图： 对角线上显示的是分布图 左下部显示的是具有拟合线的双变量散点图 右上部显示的是相关系数以及显著性水平 ##heatmap()12col&lt;- colorRampPalette(c(&quot;blue&quot;, &quot;white&quot;, &quot;red&quot;))(20)#调用颜色版自定义颜色heatmap(x = res, col = col, symm = TRUE)#symm表示是否对称 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>corrplot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化学习笔记之相关矩阵可视化包ggcorrplot]]></title>
    <url>%2F2017%2F06%2F25%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%9B%B8%E5%85%B3%E7%9F%A9%E9%98%B5%E5%8F%AF%E8%A7%86%E5%8C%96%E5%8C%85ggcorrplot%2F</url>
    <content type="text"><![CDATA[基于ggplot2包以及corrplot包的相关矩阵可视化包ggcorrplot，ggcorrplot包提供对相关矩阵重排序以及在相关图中展示显著性水平的方法，同时也能计算相关性p-value安装方法就不提了，不懂的可以浏览我以前的文章12345library(ggcorrplot)#计算相关矩阵(cor()计算结果不提供p-value)data(&quot;mtcars&quot;)corr &lt;- round(cor(mtcars), 1)head(corr[, 1:6]) 123#用ggcorrplot包提供的函数cor_pmat()p.mat &lt;- cor_pmat(mtcars)head(p.mat[, 1:4]) 可视化相关性矩阵1ggcorrplot(corr)#method默认为square 12#方法为circleggcorrplot(corr, method = &quot;circle&quot;) 12#重排矩阵，使用分等级聚类ggcorrplot(corr, hc.order = TRUE, outline.color = &quot;white&quot;) 12#控制矩阵形状ggcorrplot(corr, hc.order = TRUE, type = &quot;lower&quot;, outline.color = &quot;white&quot;)#下三角形 12#上三角形ggcorrplot(corr, hc.order = TRUE, type = &quot;upper&quot;, outline.color = &quot;white&quot;) 123#更改颜色以及主题ggcorrplot(corr, hc.order = TRUE, type = &quot;lower&quot;, outline.color = &quot;white&quot;, ggtheme = ggplot2::theme_gray, colors = c(&quot;#6D9EC1&quot;, &quot;white&quot;, &quot;#E46726&quot;)) 12#添加相关系数ggcorrplot(corr, hc.order = TRUE, type = &quot;lower&quot;, lab = TRUE) 12#增加显著性水平，不显著的话就不添加了ggcorrplot(corr, hc.order = TRUE, type = &quot;lower&quot;, p.mat = p.mat) 12#将不显著的色块设置成空白ggcorrplot(corr, p.mat = p.mat, hc.order=TRUE, type = &quot;lower&quot;, insig = &quot;blank&quot;) 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggcorrplot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化学习笔记之ggrepel包]]></title>
    <url>%2F2017%2F06%2F25%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bggrepel%E5%8C%85%2F</url>
    <content type="text"><![CDATA[当我们在图形中添加标签时，标签之间很容易相互重叠，包ggrepel就专门用来解决这个问题！ 首先我们来看看通过geom_text()添加标签时的情形：12345library(ggplot2)#使用数据集mtcars演示ggplot(mtcars)+ geom_point(aes(wt, mpg), color=&quot;red&quot;)+ geom_text(aes(wt, mpg, label=rownames(mtcars)))+ theme_classic(base_size = 16) 可以看到可视化效果不是很好。接下来看看包ggrepel的效果。geom_text_repel()是基于geom_text()12345library(ggrepel)set.seed(42)ggplot(mtcars)+ geom_point(aes(wt, mpg), color=&quot;red&quot;)+ geom_text_repel(aes(wt, mpg, label=rownames(mtcars)))+theme_classic(base_size = 16) geom_label_repel()geom_label_repel()是基于geom_label(),它将标签置于一个小方框中123456set.seed(42)ggplot(mtcars)+ geom_point(aes(wt, mpg), color=&quot;grey&quot;, size=5)+geom_label_repel(aes(wt, mpg, fill=factor(cyl), label=rownames(mtcars)), fontface=&quot;bold&quot;, color=&quot;white&quot;, box.padding=unit(0.35, &quot;lines&quot;), point.padding=unit(0.5, &quot;lines&quot;), segment.colour = &quot;grey50&quot;)+ theme_classic(base_size = 16) 参数大部分geom_text()的参数都适用于geom_text_repel(),除了以下几个： hjust vjust position check_overlap ggrepel包为geom_text_repel()与geom_label_repel()提供了特有的参数设置： segment.color:连接点与标签的线段的颜色 segment.size:线段的粗细 segment.alpha:线段的透明度 box.padding:文本框周边填充 point.padding:点周围填充 arrow:grid:arrow提供的箭头 force:强制性将重叠文本散开 max.oter:最大迭代次数 nudge_x/y:标签开始位置在坐标轴的移动距离 direction:允许标签的方向，x、y or both 下面举个栗子来详细了解这些参数的图形效果12345678910111213set.seed(42)ggplot(mtcars)+ geom_point(aes(wt, mpg, color=factor(cyl)), size=3)+geom_text_repel(aes(wt, mpg, color=factor(cyl), label=rownames(mtcars), angle=ifelse(mtcars$cyl==4, 90, 0)), size=4, family=&quot;Times&quot;, fontface=&quot;bold&quot;, box.padding=unit(0.5, &quot;lines&quot;), point.padding=unit(1.6, &quot;lines&quot;), segment.color = &quot;#cccccc&quot;, segment.size = 0.5, arrow = arrow(length=unit(0.01, &quot;npc&quot;)),force = 1, max.iter = 3e3, nudge_x = ifelse(mtcars$cyl==6, 2, 0), nudge_y = ifelse(mtcars$cyl==6, 9, 0))+ scale_color_discrete(name=&quot;cyl&quot;)+ scale_x_continuous(expand = c(0.5, 0))+ scale_y_continuous(expand = c(0.25, 0))+ theme_classic(base_size = 16) 也可以通过设置参数point.padding=NA不对点进行repel12345set.seed(42)mtcars$label &lt;- rownames(mtcars)ggplot(mtcars, aes(wt, mpg, label=label))+ geom_point(color=&quot;red&quot;)+ geom_text_repel(point.padding = NA)+theme_classic(base_size = 16) 通过赋值某些label空字符“”来隐藏。1234567set.seed(42)mtcars$label &lt;- rownames(mtcars)mtcars$label[1:15] &lt;- &quot;&quot;ggplot(mtcars, aes(wt, mpg))+ geom_point(aes(color=factor(cyl)), size=2)+geom_text_repel(aes(color=factor(cyl), size=hp, label=label), point.padding = unit(0.25, &quot;lines&quot;), box.padding = unit(0.25, &quot;lines&quot;), nudge_y = 0.1)+ theme_classic(base_size = 16) 将标签控制在特定区域通过设置参数xlim和ylim来限制label的位置1234567891011set.seed(42)data &lt;- mtcarsmu &lt;- mean(data$wt)left &lt;- data[data$wt &lt;mu, ]right &lt;- data[data$wt&gt;=mu, ]ggplot()+ geom_vline(xintercept = mu)+ geom_point(aes(wt, mpg), data=data)+ geom_text_repel(data=left, aes(wt, mpg, label=rownames(left), color=&quot;Left half&quot;), xlim=c(NA, mu))+ geom_text_repel(data=right, aes(wt, mpg, label=rownames(right), color=&quot;Rigth half&quot;), xlim=c(mu, NA))+ theme_classic(base_size = 16) 通过控制参数direction来决定label是左右移动还是上下移动， 默认是both123456set.seed(42)#direction=&quot;x&quot; 左右移动ggplot(mtcars)+ geom_point(aes(wt, mpg), color=&quot;red&quot;)+ geom_text_repel(aes(wt, mpg, label=rownames(mtcars)), direction=&quot;x&quot;)+ theme_classic(base_size = 16)+xlim(1, 6) 12345#direction=&quot;x&quot; 上下移动ggplot(mtcars)+ geom_point(aes(wt, mpg), color=&quot;red&quot;)+ geom_text_repel(aes(wt, mpg, label=rownames(mtcars)), direction=&quot;y&quot;)+ theme_classic(base_size = 16)+xlim(1, 6) 线图123456789set.seed(42)ggplot(Orange, aes(age, circumference, color=Tree))+ geom_line()+ coord_cartesian(xlim=c(min(Orange$age), max(Orange$age)+90))+ geom_text_repel(data=subset(Orange, age==max(age)), aes(label=paste(&quot;Tree&quot;, Tree)),size=6, nudge_x = 45, segment.color = NA)+ theme_classic(base_size = 16)+ theme(legend.position = &quot;none&quot;)+ labs(title=&quot;Orange Trees&quot;, x=&quot;Age(days)&quot;, y=&quot;Circumference(mm)&quot;) SessionInfo123456789101112131415161718192021222324252627sessionInfo()## R version 3.4.0 (2017-04-21)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 8.1 x64 (build 9600)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base #### other attached packages:## [1] ggrepel_0.6.5 ggplot2_2.2.1## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.11 digest_0.6.12 rprojroot_1.2 plyr_1.8.4 ## [5] grid_3.4.0 gtable_0.2.0 backports_1.1.0 magrittr_1.5 ## [9] evaluate_0.10 scales_0.4.1 rlang_0.1.1 stringi_1.1.5 ## [13] lazyeval_0.2.0 rmarkdown_1.5 labeling_0.3 tools_3.4.0 ## [17] stringr_1.2.0 munsell_0.4.3 yaml_2.1.14 compiler_3.4.0 ## [21] colorspace_1.3-2 htmltools_0.3.6 knitr_1.16 tibble_1.3.3 联系方式： wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggrepel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化学习笔记之添加p-value和显著性标记]]></title>
    <url>%2F2017%2F06%2F25%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B7%BB%E5%8A%A0p-value%E5%92%8C%E6%98%BE%E8%91%97%E6%80%A7%E6%A0%87%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[上篇文章中提了一下如何通过ggpubr包为ggplot图添加p-value以及显著性标记,本文将详细介绍。利用数据集ToothGrowth进行演示12345#先加载包library(ggpubr)#加载数据集ToothGrowthdata(&quot;ToothGrowth&quot;)head(ToothGrowth) 1234567## len supp dose## 1 4.2 VC 0.5## 2 11.5 VC 0.5## 3 7.3 VC 0.5## 4 5.8 VC 0.5## 5 6.4 VC 0.5## 6 10.0 VC 0.5 比较方法R中常用的比较方法主要有下面几种： 方法 R函数 描述 T-test t.test() 比较两组(参数) Wilcoxon test wilcox.test() 比较两组(非参数) ANOVA aov()或anova() 比较多组(参数) Kruskal-Wallis kruskal.test() 比较多组(非参数) 各种比较方法后续有时间一一讲解。 添加p-value主要利用ggpubr包中的两个函数： compare_means():可以进行一组或多组间的比较 stat_compare_mean():自动添加p-value、显著性标记到ggplot图中 ##compare_means()函数该函数主要用用法如下：12compare_means(formula, data, method = &quot;wilcox.test&quot;, paired = FALSE, group.by = NULL, ref.group = NULL, ...) 注释： formula:形如x~group，其中x是数值型变量，group是因子，可以是一个或者多个 data：数据集 method:比较的方法，默认为&quot;wilcox.test&quot;, 其他可选方法为：&quot;t.test&quot;、&quot;anova&quot;、&quot;kruskal.test&quot; paired:是否要进行paired test(TRUE or FALSE) group_by: 比较时是否要进行分组 ref.group: 是否需要指定参考组 ##stat_compare_means()函数主要用法：12stat_compare_means(mapping = NULL, comparisons = NULL hide.ns = FALSE, label = NULL, label.x = NULL, label.y = NULL, ...) 注释： mapping:由aes()创建的一套美学映射 comparisons:指定需要进行比较以及添加p-value、显著性标记的组 hide.ns:是否要显示显著性标记ns label:显著性标记的类型，可选项为：p.signif(显著性标记)、p.format(显示p-value) label.x、label.y:显著性标签调整 …:其他参数 比较独立的两组1compare_means(len~supp, data=ToothGrowth) 结果解释： .y:测试中使用的y变量 p:p-value p.adj:调整后的p-value。默认为p.adjust.method=&quot;holm&quot; p.format:四舍五入后的p-value p.signif:显著性水平 method:用于统计检验的方法##绘制箱线图12p &lt;- ggboxplot(ToothGrowth, x=&quot;supp&quot;, y=&quot;len&quot;, color = &quot;supp&quot;, palette = &quot;jco&quot;, add = &quot;jitter&quot;)#添加p-valuep+stat_compare_means() 12#使用其他统计检验方法p+stat_compare_means(method = &quot;t.test&quot;) 上述显著性标记可以通过label.x、label.y、hjust及vjust来调整显著性标记可以通过aes()映射来更改： aes(label=..p.format..)或aes(lebel=paste0(&quot;p=&quot;,..p.format..)):只显示p-value，不显示统计检验方法 aes(label=..p.signif..):仅显示显著性水平 aes(label=paste0(..method..,&quot;\n&quot;, &quot;p=&quot;,..p.format..)):p-value与显著性水平分行显示 举个栗子：1p+stat_compare_means(aes(label=..p.signif..), label.x = 1.5, label.y = 40) 也可以将标签指定为字符向量，不要映射，只需将p.signif两端的..去掉即可1p+stat_compare_means(label = &quot;p.signif&quot;, label.x = 1.5, label.y = 40) 比较两个paired sample1compare_means(len~supp, data=ToothGrowth, paired = TRUE) 利用ggpaired()进行可视化12ggpaired(ToothGrowth, x=&quot;supp&quot;, y=&quot;len&quot;, color = &quot;supp&quot;, line.color = &quot;gray&quot;, line.size = 0.4, palette = &quot;jco&quot;)+ stat_compare_means(paired = TRUE) 多组比较Global test1compare_means(len~dose, data=ToothGrowth, method = &quot;anova&quot;) 可视化12ggboxplot(ToothGrowth, x=&quot;dose&quot;, y=&quot;len&quot;, color = &quot;dose&quot;, palette = &quot;jco&quot;)+stat_compare_means() 123#使用其他的方法ggboxplot(ToothGrowth, x=&quot;dose&quot;, y=&quot;len&quot;, color = &quot;dose&quot;, palette = &quot;jco&quot;)+ stat_compare_means(method = &quot;anova&quot;) Pairwise comparisons:如果分组变量中包含两个以上的水平，那么会自动进行pairwise test,默认方法为”wilcox.test” 1compare_means(len~dose, data=ToothGrowth) 12345#可以指定比较哪些组my_comparisons &lt;- list(c(&quot;0.5&quot;, &quot;1&quot;), c(&quot;1&quot;, &quot;2&quot;), c(&quot;0.5&quot;, &quot;2&quot;))ggboxplot(ToothGrowth, x=&quot;dose&quot;, y=&quot;len&quot;, color = &quot;dose&quot;,palette = &quot;jco&quot;)+stat_compare_means(comparisons=my_comparisons)+ # Add pairwise comparisons p-value stat_compare_means(label.y = 50) # Add global p-value 可以通过修改参数label.y来更改标签的位置123ggboxplot(ToothGrowth, x=&quot;dose&quot;, y=&quot;len&quot;, color = &quot;dose&quot;,palette = &quot;jco&quot;)+stat_compare_means(comparisons=my_comparisons, label.y = c(29, 35, 40))+ # Add pairwise comparisons p-value stat_compare_means(label.y = 45) # Add global p-value 至于通过添加线条来连接比较的两组，这一功能已由包ggsignif实现123##设定参考组compare_means(len~dose, data=ToothGrowth, ref.group = &quot;0.5&quot;, #以dose=0.5组为参考组 method = &quot;t.test&quot; ) 1234#可视化ggboxplot(ToothGrowth, x=&quot;dose&quot;, y=&quot;len&quot;, color = &quot;dose&quot;, palette = &quot;jco&quot;)+ stat_compare_means(method = &quot;anova&quot;, label.y = 40)+ # Add global p-valuestat_compare_means(label = &quot;p.signif&quot;, method = &quot;t.test&quot;, ref.group = &quot;0.5&quot;) # Pairwise comparison against reference 参考组也可以设置为.all.即所有的平均值1compare_means(len~dose, data=ToothGrowth, ref.group = &quot;.all.&quot;, method = &quot;t.test&quot;) 12345#可视化ggboxplot(ToothGrowth, x=&quot;dose&quot;, y=&quot;len&quot;, color = &quot;dose&quot;, palette = &quot;jco&quot;)+stat_compare_means(method = &quot;anova&quot;, label.y = 40)+# Add global p-valuestat_compare_means(label = &quot;p.signif&quot;, method = &quot;t.test&quot;, ref.group = &quot;.all.&quot;)#Pairwise comparison against all 接下来利用survminer包中的数据集myeloma来讲解一下为什么有时候我们需要将ref.group设置为.all.123library(survminer)#没安装的先安装再加载data(&quot;myeloma&quot;)head(myeloma) 我们将根据患者的分组来绘制DEPDC1基因的表达谱，看不同组之间是否存在显著性的差异，我们可以在7组之间进行比较，但是这样的话组间比较的组合就太多了，因此我们可以将7组中每一组与全部平均值进行比较，看看DEPDC1基因在不同的组中是否过表达还是低表达。 1compare_means(DEPDC1~molecular_group, data = myeloma, ref.group = &quot;.all.&quot;, method = &quot;t.test&quot;) 1234567#可视化DEPDC1基因表达谱ggboxplot(myeloma, x=&quot;molecular_group&quot;, y=&quot;DEPDC1&quot;, color = &quot;molecular_group&quot;, add = &quot;jitter&quot;, legend=&quot;none&quot;)+ rotate_x_text(angle = 45)+ geom_hline(yintercept = mean(myeloma$DEPDC1), linetype=2)+# Add horizontal line at base mean stat_compare_means(method = &quot;anova&quot;, label.y = 1600)+ # Add global annova p-value stat_compare_means(label = &quot;p.signif&quot;, method = &quot;t.test&quot;, ref.group = &quot;.all.&quot;)# Pairwise comparison against all 从图中可以看出，DEPDC1基因在Proliferation组中显著性地过表达，而在Hyperdiploid和Low bone disease显著性地低表达 我们也可以将非显著性标记ns去掉，只需要将参数hide.ns=TRUE123456ggboxplot(myeloma, x=&quot;molecular_group&quot;, y=&quot;DEPDC1&quot;, color = &quot;molecular_group&quot;, add = &quot;jitter&quot;, legend=&quot;none&quot;)+rotate_x_text(angle = 45)+ geom_hline(yintercept = mean(myeloma$DEPDC1), linetype=2)+# Add horizontal line at base mean stat_compare_means(method = &quot;anova&quot;, label.y = 1600)+ # Add global annova p-value stat_compare_means(label = &quot;p.signif&quot;, method = &quot;t.test&quot;, ref.group = &quot;.all.&quot;, hide.ns = TRUE)# Pairwise comparison against all 多个分组变量按另一个变量进行分组之后进行统计检验，比如按变量dose进行分组：1compare_means(len~supp, data=ToothGrowth, group.by = &quot;dose&quot;) 12345#可视化p &lt;- ggboxplot(ToothGrowth, x=&quot;supp&quot;, y=&quot;len&quot;, color = &quot;supp&quot;, palette = &quot;jco&quot;, add = &quot;jitter&quot;, facet.by = &quot;dose&quot;, short.panel.labs = FALSE)#按dose进行分面#label只绘制p-valuep+stat_compare_means(label = &quot;p.format&quot;) 12#label绘制显著性水平p+stat_compare_means(label = &quot;p.signif&quot;, label.x = 1.5) 1234#将所有箱线图绘制在一个panel中p &lt;- ggboxplot(ToothGrowth, x=&quot;dose&quot;, y=&quot;len&quot;, color = &quot;supp&quot;, palette = &quot;jco&quot;, add = &quot;jitter&quot;)p+stat_compare_means(aes(group=supp)) 12#只显示p-valuep+stat_compare_means(aes(group=supp), label = &quot;p.format&quot;) 12#显示显著性水平p+stat_compare_means(aes(group=supp), label = &quot;p.signif&quot;) 12进行paired sample检验compare_means(len~supp, data=ToothGrowth, group.by = &quot;dose&quot;, paired = TRUE) 123456#可视化p &lt;- ggpaired(ToothGrowth, x=&quot;supp&quot;, y=&quot;len&quot;, color = &quot;supp&quot;, palette = &quot;jco&quot;, line.color=&quot;gray&quot;, line.size=0.4, facet.by = &quot;dose&quot;, short.panel.labs = FALSE)#按dose分面#只显示p-valuep+stat_compare_means(label = &quot;p.format&quot;, paired = TRUE) 其他图形##条形图与线图（一个分组变量）1234#有误差棒的条形图，实际上我以前的文章里有纯粹用ggplot2实现ggbarplot(ToothGrowth, x=&quot;dose&quot;, y=&quot;len&quot;, add = &quot;mean_se&quot;)+ stat_compare_means()+ stat_compare_means(ref.group = &quot;0.5&quot;, label = &quot;p.signif&quot;, label.y = c(22, 29)) 1234#有误差棒的线图ggline(ToothGrowth, x=&quot;dose&quot;, y=&quot;len&quot;, add = &quot;mean_se&quot;)+stat_compare_means()+ stat_compare_means(ref.group = &quot;0.5&quot;, label = &quot;p.signif&quot;, label.y = c(22, 29)) ##条形图与线图（两个分组变量）123ggbarplot(ToothGrowth, x=&quot;dose&quot;, y=&quot;len&quot;, add = &quot;mean_se&quot;, color = &quot;supp&quot;, palette = &quot;jco&quot;, position = position_dodge(0.8))+ stat_compare_means(aes(group=supp), label = &quot;p.signif&quot;, label.y = 29) 123ggline(ToothGrowth, x=&quot;dose&quot;, y=&quot;len&quot;, add = &quot;mean_se&quot;, color = &quot;supp&quot;, palette = &quot;jco&quot;)+ stat_compare_means(aes(group=supp), label = &quot;p.signif&quot;, label.y = c(16, 25, 29)) Sessioninfo1234567891011121314151617181920212223242526272829303132333435363738sessionInfo()## R version 3.4.0 (2017-04-21)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 8.1 x64 (build 9600)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] survminer_0.4.0 ggpubr_0.1.3 magrittr_1.5 ggplot2_2.2.1 ## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.11 compiler_3.4.0 plyr_1.8.4## [4] tools_3.4.0 digest_0.6.12 evaluate_0.10 ## [7] tibble_1.3.3 gtable_0.2.0 nlme_3.1-131 ## [10] lattice_0.20-35 rlang_0.1.1 Matrix_1.2-10 ## [13] psych_1.7.5 ggsci_2.4 DBI_0.6-1 ## [16] cmprsk_2.2-7 yaml_2.1.14 parallel_3.4.0 ## [19] gridExtra_2.2.1 dplyr_0.5.0 stringr_1.2.0 ## [22] knitr_1.16 survMisc_0.5.4 rprojroot_1.2 ## [25] grid_3.4.0 data.table_1.10.4 KMsurv_0.1-5 ## [28] R6_2.2.1 km.ci_0.5-2 survival_2.41-3 ## [31] foreign_0.8-68 rmarkdown_1.5 reshape2_1.4.2 ## [34] tidyr_0.6.3 purrr_0.2.2.2 splines_3.4.0 ## [37] backports_1.1.0 scales_0.4.1 htmltools_0.3.6 ## [40] assertthat_0.2.0 mnormt_1.5-5 xtable_1.8-2 ## [43] colorspace_1.3-2 ggsignif_0.2.0 labeling_0.3 ## [46] stringi_1.1.5 lazyeval_0.2.0 munsell_0.4.3 ## [49] broom_0.4.2 zoo_1.8-0 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggrepel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ggplot2学习笔记系列之主题（theme）设置]]></title>
    <url>%2F2017%2F06%2F25%2Fggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%BB%E9%A2%98%EF%BC%88theme%EF%BC%89%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[上次提了下theme(),本文将专门讲解一下。凡是与数据无关的图形设置可以归为主题类，ggplot2中主题设置十分多，根本不可能讲解完，只能稍微讲点皮毛，灵活运用才是关键，本文只是总体上略作介绍。正如R语言大神Hadley Wickham所讲的，ggplot2只是提供了一个平台，可以根据自己的需要无限创造。理论上来讲，只要能想到的图形，ggplot2都能实现。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253library(ggplot2)#我们先来看看ggplot2默认的主题设置函数theme_gray()的源代码theme_gray#函数名不加括号可获得函数源代码## function (base_size = 11, base_family = &quot;&quot;) ## &#123;## half_line &lt;- base_size/2## theme(line = element_line(colour = &quot;black&quot;, size = 0.5, linetype = 1, ## lineend = &quot;butt&quot;), rect = element_rect(fill = &quot;white&quot;, ## colour = &quot;black&quot;, size = 0.5, linetype = 1), text = element_text(family = base_family, ## face = &quot;plain&quot;, colour = &quot;black&quot;, size = base_size, lineheight = 0.9, ## hjust = 0.5, vjust = 0.5, angle = 0, margin = margin(), ## debug = FALSE), axis.line = element_blank(), axis.line.x = NULL, ## axis.line.y = NULL, axis.text = element_text(size = rel(0.8),## colour = &quot;grey30&quot;), axis.text.x = element_text(margin = margin(t = 0.8 * ## half_line/2), vjust = 1), axis.text.x.top = element_text(margin = margin(b = 0.8 * ## half_line/2), vjust = 0), axis.text.y = element_text(margin = margin(r = 0.8 * ## half_line/2), hjust = 1), axis.text.y.right = element_text(margin = margin(l = 0.8 * ## half_line/2), hjust = 0), axis.ticks = element_line(colour = &quot;grey20&quot;), ## axis.ticks.length = unit(half_line/2, &quot;pt&quot;), axis.title.x = element_text(margin = margin(t = half_line), ## vjust = 1), axis.title.x.top = element_text(margin = margin(b = half_line), ## vjust = 0), axis.title.y = element_text(angle = 90, ## margin = margin(r = half_line), vjust = 1), axis.title.y.right = element_text(angle = -90, ## margin = margin(l = half_line), vjust = 0), legend.background = element_rect(colour = NA), ## legend.spacing = unit(0.4, &quot;cm&quot;), legend.spacing.x = NULL, ## legend.spacing.y = NULL, legend.margin = margin(0.2, ## 0.2, 0.2, 0.2, &quot;cm&quot;), legend.key = element_rect(fill = &quot;grey95&quot;, ## colour = &quot;white&quot;), legend.key.size = unit(1.2, &quot;lines&quot;), ## legend.key.height = NULL, legend.key.width = NULL, legend.text = element_text(size = rel(0.8)), ## legend.text.align = NULL, legend.title = element_text(hjust = 0), ## legend.title.align = NULL, legend.position = &quot;right&quot;, ## legend.direction = NULL, legend.justification = &quot;center&quot;, ## legend.box = NULL, legend.box.margin = margin(0, 0, 0, ## 0, &quot;cm&quot;), legend.box.background = element_blank(),## legend.box.spacing = unit(0.4, &quot;cm&quot;), panel.background = element_rect(fill = &quot;grey92&quot;, ## colour = NA), panel.border = element_blank(), panel.grid.major = element_line(colour = &quot;white&quot;), ## panel.grid.minor = element_line(colour = &quot;white&quot;, size = 0.25), ## panel.spacing = unit(half_line, &quot;pt&quot;), panel.spacing.x = NULL, ## panel.spacing.y = NULL, panel.ontop = FALSE, strip.background = element_rect(fill = &quot;grey85&quot;, ## colour = NA), strip.text = element_text(colour = &quot;grey10&quot;, ## size = rel(0.8)), strip.text.x = element_text(margin = margin(t = half_line, ## b = half_line)), strip.text.y = element_text(angle = -90, ## margin = margin(l = half_line, r = half_line)), strip.placement = &quot;inside&quot;, ## strip.placement.x = NULL, strip.placement.y = NULL, strip.switch.pad.grid = unit(0.1, ## &quot;cm&quot;), strip.switch.pad.wrap = unit(0.1, &quot;cm&quot;), plot.background = element_rect(colour = &quot;white&quot;), ## plot.title = element_text(size = rel(1.2), hjust = 0, ## vjust = 1, margin = margin(b = half_line * 1.2)), ## plot.subtitle = element_text(size = rel(0.9), hjust = 0, ## vjust = 1, margin = margin(b = half_line * 0.9)),## plot.caption = element_text(size = rel(0.9), hjust = 1, ## vjust = 1, margin = margin(t = half_line * 0.9)),## plot.margin = margin(half_line, half_line, half_line, ## half_line), complete = TRUE)## &#125;## &lt;environment: namespace:ggplot2&gt; 可以看出，源代码主要是theme()函数，设置也很简单：theme(..., complete = FALSE),但是其内含的参数则十分多。 几乎所有元素在theme()里都使用element_line，element_rect，element_text和element_blank函数设置. 下面就举例稍微讲解一下12345#利用数据集mtcars演示head(mtcars)#先创建p图层p&lt;- ggplot(data=mtcars, aes(x=wt, y=mpg))+geom_point(aes(color=factor(cyl)))#先试试图例修改p+theme(legend.position = &quot;none&quot;)#无图例 1p+theme(legend.position = &quot;bottom&quot;)#图例在底部 12#也可以自定义p+theme(legend.position = c(0.5, 0.7)) 12#为图例加边界p+theme(legend.background = element_rect(color=&quot;red&quot;)) 12#或者为图例中的每个元素进行设置，如加边界p+theme(legend.key =element_rect(color=&quot;red&quot;)) 12#进行填充p+theme(legend.key = element_rect(fill=&quot;yellow&quot;)) 12#图例内容字体大小、颜色、角度等设置p+theme(legend.text = element_text(size=25, color=&quot;darkred&quot;, angle=45)) 12#为图例标题设置字体、颜色、大小等p+theme(legend.title = element_text(face=&quot;italic&quot;, size=25, color=&quot;red&quot;)) 接下来是坐标以及网格等的自定义12#修改背景颜色p+theme(panel.background = element_rect(fill=&quot;black&quot;)) 12#修改边界线类型、颜色p+theme(panel.border = element_rect(linetype = &quot;dashed&quot;, color=&quot;red&quot;)) 1#修改网格线p+theme(panel.grid.major = element_line(color=&quot;blue&quot;, size= 3)) 1p+theme(panel.grid.minor = element_line(linetype = &quot;dotted&quot;, color=&quot;red&quot;)) 还可以修改x、y轴等，这里懒得讲了，有兴趣的可以自己捣鼓捣鼓 了解theme之后就可以自己定义自己的主题，以后作图就直接像格式刷一样就行123456789101112131415161718192021#下面是我比较常用的主题，画图时刷一下就行了windowsFonts(CA=windowsFont(&quot;Calibri&quot;))mytheme &lt;- theme_bw()+theme(legend.position = &apos;top&apos;, panel.border = element_blank(), panel.grid.major = element_line(linetype = &apos;dashed&apos;), panel.grid.minor = element_blank(), legend.text = element_text(size=9,color=&apos;#003087&apos;,family = &quot;CA&quot;), plot.title = element_text(size=15,color=&quot;#003087&quot;,family = &quot;CA&quot;), legend.key = element_blank(), axis.text = element_text(size=10,color=&apos;#003087&apos;,family = &quot;CA&quot;), strip.text = element_text(size=12,color=&quot;#EF0808&quot;,family = &quot;CA&quot;), strip.background = element_blank())pie_theme &lt;- mytheme+theme(axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), panel.grid.major = element_blank())myline_blue &lt;- geom_line(color=&quot;#085A9C&quot;, size=2)myline_red &lt;- geom_line(color=&quot;#EF0808&quot;,size=2)myarea &lt;- geom_area(color=NA,fill=&quot;#003087&quot;,alpha=0.2)mypoint &lt;- geom_point(size=3,shape=21,color=&quot;#003087&quot;,fill=&quot;white&quot;)mybar &lt;- geom_bar(fill=&quot;#0C8DC4&quot;,stat = &quot;identity&quot;)mycolor_3 &lt;- scale_fill_manual(values = c(&quot;#085A9C&quot;,&quot;#EF0808&quot;,&quot;#526373&quot;))mycolor_7 &lt;- scale_fill_manual(values=c (&quot;#085A9C&quot;,&quot;#EF0808&quot;,&quot;#526373&quot;,&quot;#FFFFE7&quot;,&quot;#FF9418&quot;,&quot;#219431&quot;,&quot;#9C52AD&quot;))mycolor_line_7 &lt;- scale_color_manual(values=c (&quot;#085A9C&quot;,&quot;#EF0808&quot;,&quot;#526373&quot;,&quot;#FFFFE7&quot;,&quot;#FF9418&quot;,&quot;#219431&quot;,&quot;#9C52AD&quot;)) 1234567891011121314151617181920#可以来刷一刷#随便建个数据集x &lt;-rep(1:5, each = 3)y &lt;-rep(c(&apos;A&apos;,&apos;B&apos;,&apos;C&apos;),times = 5)set.seed(1111)z &lt;-round(runif(min = 10, max = 30, n = 15))df &lt;-data.frame(x = x, y = y, z = z)head(df)## x y z## 1 1 A 19## 2 1 B 18## 3 1 C 28## 4 2 A 13## 5 2 B 25## 6 2 C 30#柱形图(p1 &lt;- ggplot(data=df, aes(x=factor(x), y=z, fill=y))+geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;)+ggtitle(&quot;自定义主题theme并应用实践&quot;))+xlab(&quot;随便定义了个x&quot;)+ylab(&quot;随机数&quot;) 1p1+mytheme 1p1+mytheme+mycolor_7 还有线图、饼图等有兴趣的也可以自己刷一刷，你会发现ggplot2的魅力所在就是它拥有无穷的可能性。 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
</search>