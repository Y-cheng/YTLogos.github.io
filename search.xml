<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux之获取用户输入]]></title>
    <url>%2F2018%2F05%2F21%2FLinux%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5%2F</url>
    <content type="text"><![CDATA[基本读取read命令从标准输入（键盘）或另一个文件描述符中接受输入，在收到输入后，read命令会将数据放进一个变量 123456789101112$ cat test21.sh#!/bin/bash# testing the read command#echo -n "Enter your name: "read nameecho "Hello $name, welcome to my program. "#$$ ./test21.shEnter your name: Rich BlumHello Rich Blum, welcome to my program. echo命令使用了-n选项，该选项不会在字符串末尾输出换行符，允许脚本用户紧跟其后输入数据，而不是下一行。read命令包含了-p选项，允许用户直接在read命令行指定提示符 123456789101112$ cat test22.sh#!/bin/bash# testing the read -p option#read -p "Please enter your age: " agedays=$[ $age * 365 ]echo "That makes you over $days days old! "#$$ ./test22.shPlease enter your age: 10That makes you over 3650 days old! read命令会将提示符后输入的所有数据分配给单个变量，要么指定多个变量，输入的每个数据值都会分配给变量列表中的下一个变量，如果变量数量不够，剩下的数据就全部分配给最后一个变量。 12345678910$ cat test23.sh#!/bin/bash# entering multiple variables#read -p "Enter your name: " first lastecho "Checking data for $last, $first…"$$ ./test23.shEnter your name: Rich BlumChecking data for Blum, Rich... 也可以在read命令行中不指定变量，此时read会将它收到的任何数据存入环境变量REPLY中 123456789101112$ cat test24.sh#!/bin/bash# Testing the REPLY Environment variable#read -p "Enter your name: "echoecho Hello $REPLY, welcome to my program.#$$ ./test24.shEnter your name: ChristineHello Christine, welcome to my program. 超时使用read命令时脚本很可能会一直等着用户输入，此时可以设置一个计时器来让脚本在超过输入时间后继续执行 123456789101112131415161718$ cat test25.sh#!/bin/bash# timing the data entry#if read -t 5 -p "Please enter your name: " namethenecho "Hello $name, welcome to my script"elseechoecho "Sorry, too slow! "fi$$ ./test25.shPlease enter your name: RichHello Rich, welcome to my script$ ./test25.shPlease enter your name:Sorry, too slow! 也可以不对输入过程计时，而是让read命令来统计输入的字符数，当输入的字符数达到预设的字符数时，就会自动退出，将输入的数据赋值给变量 12345678910111213141516171819202122$ cat test26.sh#!/bin/bash# getting just one character of input#read -n1 -p "Do you want to continue [Y/N]? " answercase $answer inY | y) echoecho "fine, continue on…";;N | n) echoecho OK, goodbyeexit;;esacecho "This is the end of the script"$$ ./test26.shDo you want to continue [Y/N]? Yfine, continue on…This is the end of the script$$ ./test26.shDo you want to continue [Y/N]? nOK, goodbye 将-n选项与值1一起使用，告诉read命令在接受单个字符后退出。 隐藏方式读取-s选项可以避免在read命令中输入的数据出现在显示器上 1234567891011$ cat test27.sh#!/bin/bash# hiding input data from the monitor#read -s -p "Enter your password: " passechoecho "Is your password really $pass? "$$ ./test27.shEnter your password:Is your password really T3st1ng? 文件中读取read可以用来直接读取文件里保存的数据，每次调用read命令，它都会从文件中读取一行，当文件中没有内容后，read退出 12345678910111213141516171819202122$ cat test28.sh#!/bin/bash# reading data from a file#count=1cat test | while read linedoecho "Line $count: $line"count=$[ $count + 1]doneecho "Finished processing the file"$$ cat testThe quick brown dog jumps over the lazy fox.This is a test, this is only a test.O Romeo, Romeo! Wherefore art thou Romeo?$$ ./test28.shLine 1: The quick brown dog jumps over the lazy fox.Line 2: This is a test, this is only a test.Line 3: O Romeo, Romeo! Wherefore art thou Romeo?Finished processing the file 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生R语言爱好者，爱开源]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux之处理用户输入（三）]]></title>
    <url>%2F2018%2F05%2F20%2FLinux%E4%B9%8B%E5%A4%84%E7%90%86%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5(%E4%B8%89)%2F</url>
    <content type="text"><![CDATA[使用getopt命令getopt能够识别命令行参数，从而在脚本中解析它们。getopt可以接受一系列任意形式的命令行选项和参数，并自动将它们转换为适当的格式。其命令行格式如下： 1getopt optstring paramaters optstring是这个过程的关键所在，它定义了命令行有效的选项字母，还定义了哪些选项字母需要参数值，在optstring中列出你要在脚本中用到的每个命令行选项字母，然后在每个需要参数值的选项字母后加一个冒号，getopt命令会基于你定义的optstring解析提供的参数。 举个例子： 12$ getopt ad:cd -a -b test1 -cd test2 test3-a -b test1 -c -d -- test2 test3 optstring定义了四个有效选项字母，冒号在b之后，因为b选项需要一个参数值，当getopt命令运行时，它会检查提供的参数列表(-a -b test1 -cd test2 test3)，并基于提供的optstring进行解析，它会自动将-cd选项分成两个独立的选项，并插入双破折线来分隔行中的额外参数。 如果指定了一个不在optstring中的选项，会报错，这时可以在命令行中加入-q选项以忽略错误消息 12345$ getopt ab:cd -a -b test1 -cde test2 test3getopt: invalid option -- e-a -b test1 -c -d -- test2 test3$ getopt -q ab:cd -a -b test1 -cde test2 test3-a -b 'test1' -c -d -- 'test2' 'test3' 脚本中使用getopt通过set命令来完成，set命令的选项之一是双破折线，它会将命令行参数替换成set命令的命令行值。该方法首先将原始脚本中的命令行参数传给getopt命令，之后再将getopt命令的输出传给set命令，用getopt格式化后的命令行参数来替换原始的命令行参数，具体如下： 1set --$(gteopt -q ab:cd "$@") 现在原始的命令行参数变量的值就会被getopt命令行的输出替换，getopt已经将命令行参数全部格式化好了。 12345678910111213141516171819202122232425262728$ cat test18.sh#!/bin/bash# Extract command line options &amp; values with getopt#set -- $(getopt -q ab:cd "$@")#echowhile [ -n "$1" ]do case "$1" in -a) echo "Found the -a option" ;; -b) param="$2" echo "Found the -b option, with parameter value $param" shift ;; -c) echo "Found the -c option" ;; --) shift break ;; *) echo "$1 is not an option";;esac shiftdone#count=1for param in "$@"do echo "Parameter #$count: $param" count=$[ $count + 1 ]done 现在运行含有复杂选项的脚本 12345678910$ ./test18.sh -acFound the -a optionFound the -c option$ ./test18.sh -a -b test1 -cd test2 test3 test4Found the -a optionFound the -b option, with parameter value 'test1'Found the -c optionParameter #1: 'test2'Parameter #2: 'test3'Parameter #3: 'test4' 但是还是存在一个问题，就是无法处理带空格和引号的参数值，它会将空格当作参数分隔符，而不是根据双引号将两者当作一个参数。 1234567$ ./test18.sh -a -b test1 -cd "test2 test3" test4Found the -a optionFound the -b option, with parameter value 'test1'Found the -c optionParameter #1: 'test2Parameter #2: test3'Parameter #3: 'test4' getoptsgetopts相对于getopt来说更高级，它可以提供getopt无法实现的功能。每次调用getopts时，它一次只会处理命令行上检测到的一个参数，处理完所有参数后，它会退出并返回一个大于0的退出状态码，因此可以与while结合运行。getopts命令用到两个环境变量，如果选项需要跟一个参数值，OPTARG环境变量会保存这个值，OPTIND环境变量保存了参数列表中getopts正在处理的参数位置，这样就能在处理完选项之后继续处理其他命令行参数了，其主要格式如下： 1getopts optstring variable optstring存有效的选项字母，如果选项字母要求有个参数值，就加一个冒号，要去掉错误信息，在optstring之前加一个冒号，getopts命令会将当前参数保存到命令行中定义的variable中 12345678910111213141516171819$ cat test19.sh#!/bin/bash# simple demonstration of the getopts command#echowhile getopts :ab:c optdocase "$opt" ina) echo "Found the -a option" ;;b) echo "Found the -b option, with value $OPTARG";;c) echo "Found the -c option" ;;*) echo "Unknown option: $opt";;esacdone$$ ./test19.sh -ab test1 -cFound the -a optionFound the -b option, with value test1Found the -c option getopts在解析命令行选项时会移除开头的破折线所以在case定义中不用单破折线。getopts支持空格参数值输入及其他输入 123456$ ./test19.sh -b "test1 test2" -aFound the -b option, with value test1 test2Found the -a option$ ./test19.sh -abtest1Found the -a optionFound the -b option, with value test1 getopts会将在命令行上找到的未定义的选项统一输出为问号 12345678$ ./test19.sh -dUnknown option: ?$$ ./test19.sh -acdeFound the -a optionFound the -c optionUnknown option: ?Unknown option: ? getopts知道何时停止处理选项，在getopts处理每个选项时会将OPTIND环境变量值加一，在完成getopts之后，可以使用shift命令和OPTIND值来移动参数。 1234567891011121314151617181920212223242526272829303132$ cat test20.sh#!/bin/bash# Processing options &amp; parameters with getopts#echowhile getopts :ab:cd optdocase "$opt" ina) echo "Found the -a option" ;;b) echo "Found the -b option, with value $OPTARG" ;;c) echo "Found the -c option" ;;d) echo "Found the -d option" ;;*) echo "Unknown option: $opt" ;;esacdone#shift $[ $OPTIND - 1 ]#echocount=1for param in "$@"doecho "Parameter $count: $param"count=$[ $count + 1 ]done$ ./test20.sh -a -b test1 -d test2 test3 test4Found the -a optionFound the -b option, with value test1Found the -d optionParameter 1: test2Parameter 2: test3Parameter 3: test4 选项标准化主要是与Linux里已经存在含有某种程度的标准含义的字母相吻合，比如o一般代表输出等。1234567891011121314151617选 项 描 述-a 显示所有对象-c 生成一个计数-d 指定一个目录-e 扩展一个对象-f 指定读入数据的文件-h 显示命令的帮助信息-i 忽略文本大小写-l 产生输出的长格式版本-n 使用非交互模式（批处理）-o 将所有输出重定向到的指定的输出文件-q 以安静模式运行-r 递归地处理目录和文件-s 以安静模式运行-v 生成详细输出-x 排除某个对象-y 对所有问题回答yes 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生R语言爱好者，爱开源]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux之处理用户输入(二)]]></title>
    <url>%2F2018%2F05%2F19%2FLinux%E4%B9%8B%E5%A4%84%E7%90%86%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5(%E4%BA%8C)%2F</url>
    <content type="text"><![CDATA[特殊参数变量在bash shell中有些特殊变量，它们会记录命令行参数 参数统计特殊变量$#含有脚本运行时携带的命令行参数的个数，可以在脚本中任何地方使用这个特殊变量，就跟普通变量一样 1234567891011121314151617181920212223$ cat test9.sh#!/bin/bash# Testing parameters#if [ $# -ne 2 ]thenechoecho Usage: test9.sh a bechoelsetotal=$[ $1 + $2 ]echoecho The total is $totalechofi#$$ bash test9.shUsage: test9.sh a b$ bash test9.sh 10Usage: test9.sh a b$ bash test9.sh 10 15The total is 25 如何获取最后一个命令行参数变量？可以通过以下方法获取： 1234567891011121314$ cat test10.sh#!/bin/bash# Grabbing the last parameter#params=$#echoecho The last parameter is $paramsecho The last parameter is $\&#123;!#\&#125;echo#$$ bash test10.sh 1 2 3 4 5The last parameter is 5The last parameter is 5 抓取所有数据$*和$@变量可以用来轻松访问所有参数，这两个变量能够在单个变量中存储所有的命令行参数。 $*变量会将命令行上提供的所有参数当作一个单词保存，这个单词包含了命令行中出现的每一个参数，基本上$*变量会将这些参数视为一个整体，而不是多个个体 $@变量会将命令行上提供的所有参数当作同一字符串中的多个独立的单词，这样可以遍历所有的参数值，得到每个参数 123456789101112$ cat test11.sh#!/bin/bash# testing $* and $@#echoecho "Using the $* method: $*"echoecho "Using the $@ method: $@"$$ ./test11.sh rich barbara katie jessicaUsing the $* method: rich barbara katie jessicaUsing the $@ method: rich barbara katie jessica 二者的差异主要如下： 12345678910111213141516171819202122232425262728$ cat test12.sh#!/bin/bash# testing $* and $@#echocount=1#for param in "$*"doecho "$* Parameter #$count = $param"count=$[ $count + 1 ]done#echocount=1#for param in "$@"doecho "$@ Parameter #$count = $param"count=$[ $count + 1 ]done$$ ./test12.sh rich barbara katie jessica$* Parameter #1 = rich barbara katie jessica$@ Parameter #1 = rich$@ Parameter #2 = barbara$@ Parameter #3 = katie$@ Parameter #4 = jessica $*变量将所有参数当成单个参数，$@变量会单独处理每个参数 移动变量bash shell的shift命令默认条件下会将每个参数变量向左移动一个位置，即变量$3的值会移到$2，以此类推，变量$1的值会被删除，变量$0的值即程序名不会改变 1234567891011121314151617$ cat test13.sh#!/bin/bash# demonstrating the shift commandechocount=1while [ -n "$1" ]doecho "Parameter #$count = $1"count=$[ $count + 1 ]shiftdone$$ ./test13.sh rich barbara katie jessicaParameter #1 = richParameter #2 = barbaraParameter #3 = katieParameter #4 = jessica 处理选项选项是跟在单破折号-后面的单个字母，比如-n，它能改变命令的行为。 查找选项命令行选项在命令行上紧跟在脚本名之后，就跟命令行参数一样 处理简单选项123456789101112131415161718192021222324252627$ cat test15.sh#!/bin/bash# extracting command line options as parameters#echowhile [ -n "$1" ]docase "$1" in-a) echo "Found the -a option" ;;-b) echo "Found the -b option" ;;-c) echo "Found the -c option" ;;*) echo "$1 is not an option" ;;esacshiftdone$$ ./test15.sh -a -b -c -dFound the -a optionFound the -b optionFound the -c option-d is not an option##$ ./test15.sh -d -c -a-d is not an optionFound the -c optionFound the -a option 分离参数和选项Linux处理同时含有选项和参数的情况时，利用特殊字符将两者分开，该字符会告诉脚本何时选项结束以及普通参数何时开始。这个特殊字符就是双破折线--，shell会用双破折线来表明选项列表结束，在双破折线之后，脚本就可以放心将剩下的命令行参数当作参数而不是选项来处理。 1234567891011121314151617181920212223$ cat test16.sh#!/bin/bash# extracting options and parametersechowhile [ -n "$1" ]docase "$1" in-a) echo "Found the -a option" ;;-b) echo "Found the -b option";;-c) echo "Found the -c option" ;;--) shiftbreak ;;*) echo "$1 is not an option";;esacshiftdone#count=1for param in $@doecho "Parameter #$count: $param"count=$[ $count + 1 ]done 在遇到双破折线时脚本用break命令跳出while循环，由于过早跳出循环，需要再加一条shift命令来将双破折线移出参数变量。 1234567$ ./test16.sh -c -a -b test1 test2 test3Found the -c optionFound the -a optionFound the -b optiontest1 is not an optiontest2 is not an optiontest3 is not an option 结果说明在处理时脚本认为所有的命令行参数都是选项，下面用双破折线将命令行上的参数和选项分隔开 1234567$ ./test16.sh -c -a -b -- test1 test2 test3Found the -c optionFound the -a optionFound the -b optionParameter #1: test1Parameter #2: test2Parameter #3: test3 当脚本遇到双破折线时它会停止处理选项，并将剩下的参数都当作命令行参数。 处理带值的选项有些选项会带有一个额外的参数值，比如： 1$ ./testing.sh -a test1 -b -c -d test2 当命令行选项要求有额外的参数时，处理如下： 123456789101112131415161718192021222324252627282930$ cat test17.sh#!/bin/bash# extracting command line options and valuesechowhile [ -n "$1" ]docase "$1" in-a) echo "Found the -a option";;-b) param="$2"echo "Found the -b option, with parameter value $param"shift ;;-c) echo "Found the -c option";;--) shiftbreak ;;*) echo "$1 is not an option";;esacshiftdone#count=1for param in "$@"doecho "Parameter #$count: $param"count=$[ $count + 1 ]done$$ ./test17.sh -a -b test1 -dFound the -a optionFound the -b option, with parameter value test1-d is not an option 在这个例子中，case语句定义了三个处理选项，-b选项还有一个额外的参数值，由于要处理的参数是$1，额外的参数值就应该位于$2(因为所有的参数在处理完之后都会被移出)。只要将参数值从$2变量中提取出来就行了，因为这个选项占用了两个参数位，所以需要使用shift命令多移动一个位置。 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生R语言爱好者，爱开源]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux之处理用户输入]]></title>
    <url>%2F2018%2F05%2F18%2FLinux%E4%B9%8B%E5%A4%84%E7%90%86%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5%2F</url>
    <content type="text"><![CDATA[命令行参数向shell脚本传递参数的最基本方法是使用命令行参数。命令行参数允许在运行脚本时向命令行添加数据。 读取参数bash shell将一些称为位置参数的特殊变量分配给输入到命令行中的所有参数，包括shell所执行的脚本名称。位置参数变量是标准的数字:\$0是程序名，\$1是第一个变量,依此类推到第九个参数\$9。 下面是在shell脚本中使用单个命令行参数的简单例子 12345678910111213$ cat test1.sh#!/bin/bash# using one command line parameter#factorial=1for (( number = 1; number &lt;= $1 ; number++ ))dofactorial=$[ $factorial * $number ]doneecho The factorial of $1 is $factorial$$ ./test1.sh 5The factorial of 5 is 120 可以在shell脚本中像使用其他变量一样使用\$1变量，shell脚本会自动蒋命令行参数的值分配给变量，不需要用户做任何处理 如果需要输入更多的命令行参数，则每个参数必须用空格分开 12345678910111213$ cat test2.sh#!/bin/bash# testing two command line parameters#total=$[ $1 * $2 ]echo The first parameter is $1.echo The second parameter is $2.echo The total value is $total.$$ ./test2.sh 2 5The first parameter is 2.The second parameter is 5.The total value is 10. shell会将每个参数分配给对应的变量 也可以在命令行中使用文本字符串12345678$ cat test3.sh#!/bin/bash# testing string parameters#echo Hello $1, glad to meet you.$$ ./test3.sh RichHello Rich, glad to meet you. shell将输入到命令行的字符串值传给脚本，但碰到含有空格的文本字符串时就会出现问题： 12$ ./test3.sh Rich BlumHello Rich, glad to meet you. 记住每个参数都是用空格分隔的，所以shell会将空格当成两个值的分隔符。要在参数值中包含空格，必须使用引号(单双引号均可) 12$ ./test3.sh 'Rich Blum'Hello Rich Blum, glad to meet you. 将文本字符串作为参数传递时，引号并非数据的一部分，它们只是表明数据的起止位置 如果脚本需要的命令行参数不止9个，需要在第九个变量之后的变量数字周围加上花括号,比如\${10} 12345678910111213$ cat test4.sh#!/bin/bash# handling lots of parameters#total=$[ $&#123;10&#125; * $&#123;11&#125; ]echo The tenth parameter is $&#123;10&#125;echo The eleventh parameter is $&#123;11&#125;echo The total is $total$$ ./test4.sh 1 2 3 4 5 6 7 8 9 10 11 12The tenth parameter is 10The eleventh parameter is 11The total is 110 读取脚本名可以用\$0参数获取shell在命令行启动的脚本名 123456789$ cat test5.sh#!/bin/bash# Testing the $0 parameter#echo The zero parameter is set to: $0#$$ bash test5.shThe zero parameter is set to: test5.sh 这里存在一个潜在的问题，如果使用另一个命令来运行脚本，命令会和脚本名混在一起，出现在\$0参数中 12$ ./test5.shThe zero parameter is set to: ./test5.sh 另外如果传给\$0变量的实际字符串不仅仅是脚本名，而是完整的脚本路径时，变量\$0就会使用整个路径 12$ bash /home/Christine/test5.shThe zero parameter is set to: /home/Christine/test5.sh 有个小命令可以解决这些问题，basename命令会返回不包含路径的脚本名 12345678910111213$ cat test5b.sh#!/bin/bash# Using basename with the $0 parameter#name=$(basename $0)echoecho The script name is: $name#$ bash /home/Christine/test5b.shThe script name is: test5b.sh$$ ./test5b.shThe script name is: test5b.sh 123456789101112131415161718192021222324252627282930313233$ cat test6.sh#!/bin/bash# Testing a Multi-function script#name=$(basename $0)#if [ $name = "addem" ]thentotal=$[ $1 + $2 ]#elif [ $name = "multem" ]thentotal=$[ $1 * $2 ]fi#echoecho The calculated value is $total#$$ cp test6.sh addem$ chmod u+x addem$$ ln -s test6.sh multem$$ ls -l *em-rwxrw-r--. 1 Christine Christine 224 Jun 30 23:50 addemlrwxrwxrwx. 1 Christine Christine 8 Jun 30 23:50 multem -&gt; test6.sh$$ ./addem 2 5The calculated value is 7$$ ./multem 2 5The calculated value is 10 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生R语言爱好者，爱开源]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux结构化命令which]]></title>
    <url>%2F2018%2F05%2F17%2FLinux%E7%BB%93%E6%9E%84%E5%8C%96%E5%91%BD%E4%BB%A4which%2F</url>
    <content type="text"><![CDATA[for命令for命令允许你创建一个遍历一系列值的循环，每次迭代都是用其中一个值来执行已定义好的命令。具体格式如下： 1234for var in listdo commandsdone for循环假定每个值都是用空格分隔的，如果有包含空格的数据值，用双引号圈起来 读取列表中的值1234567891011121314$ cat test1#!/bin/bash# basic for commandfor test in Alabama Alaska Arizona Arkansas California Coloradodoecho The next state is $testdone$ ./test1The next state is AlabamaThe next state is AlaskaThe next state is ArizonaThe next state is ArkansasThe next state is CaliforniaThe next state is Colorado 读取列表中的复杂值看下面的例子：1234567891011$ cat badtest1#!/bin/bash# another example of how not to use the for commandfor test in I don't know if this'll workdoecho "word:$test"done$ ./badtest1word:Iword:dont know if thisllword:work 结果并不是我们想要的 有两种办法解决该问题： 使用转义字符(反斜线)来将单引号转义 使用双引号来定义用到单引号的值 1234567891011121314$ cat test2#!/bin/bash# another example of how not to use the for commandfor test in I don\'t know if "this'll" workdoecho "word:$test"done$ ./test2word:Iword:don'tword:knowword:ifword:this'llword:work 从变量读取列表12345678910111213141516$ cat test4#!/bin/bash# using a variable to hold the listlist="Alabama Alaska Arizona Arkansas Colorado"list=$list" Connecticut"for state in $listdoecho "Have you ever visited $state?"done$ ./test4Have you ever visited Alabama?Have you ever visited Alaska?Have you ever visited Arizona?Have you ever visited Arkansas?Have you ever visited Colorado?Have you ever visited Connecticut? 从命令读取值12345678910111213141516171819202122232425262728$ cat test5#!/bin/bash# reading values from a filefile="states"for state in $(cat $file)doecho "Visit beautiful $state"done$ cat statesAlabamaAlaskaArizonaArkansasColoradoConnecticutDelawareFloridaGeorgia$ ./test5Visit beautiful AlabamaVisit beautiful AlaskaVisit beautiful ArizonaVisit beautiful ArkansasVisit beautiful ColoradoVisit beautiful ConnecticutVisit beautiful DelawareVisit beautiful FloridaVisit beautiful Georgia 更改字段分隔符造成这个问题的原因是特殊的环境变量IFS，叫做内部字段分隔符，IFS环境变量定义了bash shell用作分隔符的一系列字符。默认情况下，bash shell将下列字符当作字段分隔符： 空格 制表符 换行符 要解决上面遇到的处理文件中含有字段分隔符的问题，可以在shell脚本中临时更改IFS环境变量的值来限制被bahs shell当作字段分隔符的字符 12345678910111213141516171819202122$ cat test5b#!/bin/bash# reading values from a filefile="states"IFS=$'\n'for state in $(cat $file)doecho "Visit beautiful $state"done$ ./test5bVisit beautiful AlabamaVisit beautiful AlaskaVisit beautiful ArizonaVisit beautiful ArkansasVisit beautiful ColoradoVisit beautiful ConnecticutVisit beautiful DelawareVisit beautiful FloridaVisit beautiful GeorgiaVisit beautiful New YorkVisit beautiful New HampshireVisit beautiful North Carolina 如果要指定多个IFS字符，只要将它们在赋值行串起来就行： 1IFS=$'\n':;" 这个赋值会将换行符、冒号、分号和双引号作为字段分隔符 用通配符读取目录12345678910111213141516171819202122232425$ cat test6#!/bin/bash# iterate through all the files in a directoryfor file in /home/rich/test/*doif [ -d "$file" ]thenecho "$file is a directory"elif [ -f "$file" ]thenecho "$file is a file"fidone$ ./test6/home/rich/test/dir1 is a directory/home/rich/test/myprog.c is a file/home/rich/test/myprog is a file/home/rich/test/myscript is a file/home/rich/test/newdir is a directory/home/rich/test/newfile is a file/home/rich/test/newfile2 is a file/home/rich/test/testdir is a directory/home/rich/test/testing is a file/home/rich/test/testprog is a file/home/rich/test/testprog.c is a file C语言风格的for命令bash中C语言风格的for循环的基本格式: 1for (( variable assignment ; condition ; iteration process )) 123456789101112131415161718$ cat test8#!/bin/bash# testing the C-style for loopfor (( i=1; i &lt;= 10; i++ ))doecho "The next number is $i"done$ ./test8The next number is 1The next number is 2The next number is 3The next number is 4The next number is 5The next number is 6The next number is 7The next number is 8The next number is 9The next number is 10 使用多个变量C语言风格的for命令也允许为迭代使用多个变量。循环会单独处理每个变量，你可以为每个变量定义不同的迭代过程。尽管可以使用多个变量，但你只能在for循环中定义一种条件: 123456789101112131415161718$ cat test9#!/bin/bash# multiple variablesfor (( a=1, b=10; a &lt;= 10; a++, b-- ))doecho "$a - $b"done$ ./test91 - 102 - 93 - 84 - 75 - 66 - 57 - 48 - 39 - 210 - 1 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生R语言爱好者，爱开源]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux之结构化命令]]></title>
    <url>%2F2018%2F05%2F16%2FLinux%E4%B9%8B%E7%BB%93%E6%9E%84%E5%8C%96%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[test语句test命令提供了在if-then语句中测试不同条件的途径。如果test命令中列出的条件成立，test命令就会推出并返回退出状态码0。如果条件不成立，test命令就会推出并返回非零的退出状态码，这使得if-then语句不会被执行。test命令格式非常简单: 1test condition 在if-then语句中 1234if test conditionthen commandsfi bash shell提供了另一种条件测试方法，无需在if-then语句中声明test命令 1234if [ condition ]then commandsfi 方括号定义了测试条件，需要注意的是，第一个方括号之后和第二个方括号之前必须加上一个空格，否则会报错。 test命令可以判断三类条件 数值比较(bash shell只能处理整数) 字符串比较 文件比较 在比较测试中，大写字母被认为是小于小写字母的，但是sort命令恰好相反。比较测试中使用的是标准的ASCⅡ，根据每个字符的ASCⅡ数值来决定排序结果。sort命令使用的是系统的本地化语言设置中定义的排序顺序，对于英语，本地化设置指定了在排序顺序中小写字母出现在大写字母之前。test命令和测试表达式使用标准的数字比较符号来表示字符串比较，而用文本代码来表示数值比较。 if-then高级特性bash shell提供了两项可在if-then语句中使用的高级特性： 用于数学表达式的双括号(无需转义) 用于高级字符串处理功能的双方括号(支持模式匹配) 使用双括号双括号提供了使用高级数学表达式的功能，双括号命令格式如下： 1(( expression )) 使用双方括号双方括号命令提供了针对字符串比较的高级特性，其命令格式如下： 1[[ expression ]] case命令case命令会将指定的变量与不同模式进行比较，如果变量和模式模式匹配，那么shell会执行为该模式指定的命令。可以通过竖线操作符来分隔出多个模式，星号会捕获所有与已知模式不匹配的值。格式具体如下： 12345case variable in pattern1 | pattern2) command1;;pattern3) command2;;*) default commands;;esac 举个例子12345678910111213141516171819$ cat test26.sh#!/bin/bash# using the case command#case $USER inrich | barbara)echo "Welcome, $USER"echo "Please enjoy your visit";;testing)echo "Special testing account";;jessica)echo "Do not forget to log off when you're done";;*)echo "Sorry, you are not allowed here";;esac$$ ./test26.shWelcome, richPlease enjoy your visit 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生R语言爱好者，爱开源]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux命令]]></title>
    <url>%2F2018%2F05%2F15%2FLinux%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[基本命令 tail命令添加-f参数允许在其他进程使用该文件时查看文件的内容。tail命令会保持活动状态。 变量名、等号和值之间没有空格，如果要赋值一个含有空格的字符串组，必须用单引号来界定字符串的首尾。 删除已经存在的环境变量，可以用unset命令完成。在涉及环境变量名时，需要记住的一点是：如果要用到环境变量，使用\$，如果要操作变量，不使用\$。一个例外就是使用printenv显示某个变量的值。 /etc/profile文件是bash shell默认的主启动文件，只要登录了Linux系统，bash就会执行/etc/profile启动文件中的内容。 用来向Linux系统添加新用户的主要工具是useradd,删除用户使用userdel。 Vim编辑器中G表示移到最后一行，num G表示移到第num行，gg表示移到第一行。 echo命令如果想将文本字符串和命令输出显示在同一行中，可以用echo语句的-n参数。需要在字符串的两侧使用引号，保证要显示的字符串尾部有一个空格。 使用等号将值赋给用户变量，在变量、等号和值之间不能出现空格。 有两种方法可以将命令输出赋给变量 反引号字符(`) $()格式 重定向输出时，&gt;会覆盖已有文件，&gt;&gt;追加数据 输入重定向和输出重定向正好相反，输入重定向将文件的内容重定到命令，而非将命令的输出重定向到文件。输入重定向的符号是&lt;：command &lt; inputfile。一个记忆方法是：在命令行上，命令总在左侧，而重定向符号指向数据流动的方向。 使用方括号进行数学运算，在bash中将一个数学运算结果赋值给某个变量时，可以用美元符和方括号($[ operation ])将数学表达式围起来 结构化命令使用if-then语句if-then语句是最基本的结构化语句，其格式如下： 1234if commandthen commandfi bash shell的语句会运行if后面的命令，如果该命令的退出码是0(表示该命令运行成功),位于then部分的命令就会被执行，否则then部分的命令不会被执行，bash shell会继续执行脚本中的下一个命令。fi语句用来表示if-then语句到此结束。 使用if-then-else语句在if-then语句中，不管命令是否成功执行，都只有一种选择。如果命令返回一个非零退出状态码，bash shell会继续执行脚本中的下一条命令。在这种情况下，如果能够执行另一组命令就好了，这正是if-then-else语句的作用。 123456if commandthen commandelse commandfi 与if-then相似，区别就是当if语句中的命令返回非零退出状态码时,bash shell会执行else部分中的命令。 嵌套if有时需要检查脚本代码中的多种条件，可以使用嵌套的if-then语句。嵌套的if-then语句位于主if-then-else语句的else代码块中。 123456789101112131415161718192021222324$ ls -d /home/NoSuchUser//home/NoSuchUser/$$ cat test5.sh#!/bin/bash# Testing nested ifs#testuser=NoSuchUser#if grep $testuser /etc/passwdthen echo "The user $testuser exists on this system."else echo "The user $testuser does not exist on this system." if ls -d /home/$testuser/ then echo "However, $testuser has a directory." fifi$$ ./test5.shThe user NoSuchUser does not exist on this system./home/NoSuchUser/However, NoSuchUser has a directory. 可以使用else部分的另一种形式:elif。这样就不用书写多个if-then语句了，elif使用另一个if-then语句延续else部分。 1234567if commandthen commandelif commandthen more commandfi elif语句提供了另一个要测试的命令，这类似于原始的if语句行。如果elif后命令的退出状态码是0，则bash会执行第二个then语句部分的命令。 1234567891011121314151617181920212223242526272829303132$ cat test5.sh#!/bin/bash# Testing nested ifs - use elif &amp; else#testuser=NoSuchUser#if grep $testuser /etc/passwdthenecho "The user $testuser exists on this system."#elif ls -d /home/$testuserthenecho "The user $testuser does not exist on this system."echo "However, $testuser has a directory."#elseecho "The user $testuser does not exist on this system."echo "And, $testuser does not have a directory."fi$$ ./test5.sh/home/NoSuchUserThe user NoSuchUser does not exist on this system.However, NoSuchUser has a directory.$$ sudo rmdir /home/NoSuchUser[sudo] password for Christine:$$ ./test5.shls: cannot access /home/NoSuchUser: No such file or directoryThe user NoSuchUser does not exist on this system.And, NoSuchUser does not have a directory. 需要注意的是，在elif语句中，紧跟其后的else语句属于elif代码块。它们并不属于之前的if-then代码块 可以继续将多个elif语句串起来，形成一个大的if-then-elif嵌套组合。 12345678910111213if command1then command set 1elif command2then command set 2elif command3then command set 3elif command4then command set 4fi 每块命令都会根据命令是否会返回退出状态码0来执行。记住，bash shell会依次执行if语句，只有第一个返回退出状态码0的语句中的then部分会被执行。 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生R语言爱好者，爱开源]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[群体遗传进化]]></title>
    <url>%2F2018%2F04%2F24%2F%E7%BE%A4%E4%BD%93%E9%81%97%E4%BC%A0%E8%BF%9B%E5%8C%96%2F</url>
    <content type="text"><![CDATA[简介群体结构又称为群体分层，指所研究的群体中存在基因频率不同的亚群。其基本原理是将群体分成k个服从哈迪温伯格平衡的亚群，将每个材料归到各个亚群并计算每个材料基因组变异源于第k个亚群的可能性，主要是利用Q矩阵进行衡量，一般来说Q值越大，表明每个材料来自于某个亚群的可能性越大。群体结构分析的软件有很多，比如：STRUCTURE、ADMIXTURE、FASTSTRUCTURE、TESS、BAPS等。这里不介绍如何使用这些软件进行群体结构分析，下次有时间再进行介绍。本文主要介绍利用R包pophelper对这些软件生成的数据进行展示。具体情况可以参考pophelper的vignette 安装安装过程不多说 12install.packages(c("Cairo","devtools","ggplot2","gridExtra","gtable","tidyr"),dependencies=T)devtools::install_github('royfrancis/pophelper') 流程 数据读取使用pophelper提供的数据,这里只使用structure软件生成的格式文件 123library(pophelper)sfiles &lt;- list.files(path=system.file(&quot;files/structure&quot;,package = &quot;pophelper&quot;), full.names = T)sfiles 1234567891011121314151617## [1] "D:/R-3.5.0/library/pophelper/files/structure/structure_01"## [2] "D:/R-3.5.0/library/pophelper/files/structure/structure_02"## [3] "D:/R-3.5.0/library/pophelper/files/structure/structure_03"## [4] "D:/R-3.5.0/library/pophelper/files/structure/structure_04"## [5] "D:/R-3.5.0/library/pophelper/files/structure/structure_05"## [6] "D:/R-3.5.0/library/pophelper/files/structure/structure_06"## [7] "D:/R-3.5.0/library/pophelper/files/structure/structure_07"## [8] "D:/R-3.5.0/library/pophelper/files/structure/structure_08"## [9] "D:/R-3.5.0/library/pophelper/files/structure/structure_09"## [10] "D:/R-3.5.0/library/pophelper/files/structure/structure_10"## [11] "D:/R-3.5.0/library/pophelper/files/structure/structure_11"## [12] "D:/R-3.5.0/library/pophelper/files/structure/structure_12"## [13] "D:/R-3.5.0/library/pophelper/files/structure/structure_13"## [14] "D:/R-3.5.0/library/pophelper/files/structure/structure_14"## [15] "D:/R-3.5.0/library/pophelper/files/structure/structure_15"## [16] "D:/R-3.5.0/library/pophelper/files/structure/structure_16"## [17] "D:/R-3.5.0/library/pophelper/files/structure/structure_17" 可以看到总共有17个structure文件 123slist &lt;- readQ(files = sfiles,indlabfromfile = T, filetype = &quot;structure&quot;)tr1 &lt;- tabulateQ(qlist = slist)summariseQ(tr1, writetable = TRUE) 1234567## loci ind k runs elpdmean elpdsd elpdmin elpdmax## 1 25 149 2 3 -7509.367 0.8082904 -7510.1 -7508.5## 2 25 149 3 3 -7476.000 0.4358899 -7476.5 -7475.7## 3 25 149 4 3 -7650.800 46.1418465 -7687.5 -7599.0## 4 25 149 5 3 -7743.567 74.0671542 -7828.5 -7692.4## 5 25 149 6 3 -7985.833 32.6353081 -8023.3 -7963.6## 6 25 149 7 2 -8614.000 60.5283405 -8656.8 -8571.2 summariseQ会给出一些信息，writetable = TRUE将文件写入到工作文件夹中 估计最佳分层数函数evannoMethodStructure用来估计最佳分层数k,使用的方法是Evanno method，这一函数只适应于STRUCTURE软件运行的结果 123sr1 &lt;- summariseQ(tr1)p &lt;- evannoMethodStructure(data = sr1, exportplot = F, returnplot = T, returndata = F, basesize = 12, linesize = 0.7)gridExtra::grid.arrange(p) 一般我们是通过看ΔK来确定最佳分群，这里可以看到是k=3 pophelper提供了一个封装函数，可以一次性出来所有结果1analyseQ(sfiles) 可以挑出k=3时的structure图 美化pophelper还提供了一个绘图函数plotQ,里面内置了大量图形参数设置用来美化图片，这里就不一一展示了，有兴趣的可以去实践一下 SessionInfo1sessionInfo() 12345678910111213141516171819202122232425262728## R version 3.5.0 (2018-04-23)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 16299)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] pophelper_2.2.5.1 ggplot2_2.2.1 Cairo_1.5-9 ## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.16 knitr_1.20 magrittr_1.5 tidyselect_0.2.4## [5] munsell_0.4.3 colorspace_1.3-2 rlang_0.2.0 stringr_1.3.0 ## [9] plyr_1.8.4 tools_3.5.0 grid_3.5.0 gtable_0.2.0 ## [13] htmltools_0.3.6 yaml_2.1.19 lazyeval_0.2.1 rprojroot_1.3-2 ## [17] digest_0.6.15 tibble_1.4.2 gridExtra_2.3 purrr_0.2.4 ## [21] tidyr_0.8.0 glue_1.2.0 evaluate_0.10.1 rmarkdown_1.9 ## [25] labeling_0.3 stringi_1.1.7 compiler_3.5.0 pillar_1.2.2 ## [29] scales_0.5.0 backports_1.1.2 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生R语言爱好者，爱开源]]></content>
      <categories>
        <category>群体遗传进化</category>
      </categories>
      <tags>
        <tag>进化，选择性清除分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R编程题目练习1]]></title>
    <url>%2F2018%2F04%2F24%2FR%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A01%2F</url>
    <content type="text"><![CDATA[Multiples of 3 and 5Problem 1 If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000. answer： 1234567891011n &lt;- c()n[1] &lt;- 0for (i in 1:999)&#123; if (i%%3==0)&#123; n &lt;- n+i &#125; else if(i%%3!=0&amp;i%%5==0)&#123; n &lt;- n+i &#125;&#125;cat("The answer is:", n) 1The answer is: 233168 Even Fibonacci numbersProblem 2Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, … By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.、 answer: 12345678910111213f &lt;- c()f[1] &lt;- 1f[2] &lt;- 2i &lt;- 3repeat&#123; f[i] &lt;- f[i-2]+f[i-1] if(f[i]&gt;4000000)break i &lt;- i+1&#125;f &lt;- f[-length(f)]f_even_index &lt;- f%%2==0f_even_sum &lt;- sum(f[f_even_index])cat("The answer is:", f_even_sum,"\n") 1The answer is: 4613732 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生R语言爱好者，爱开源]]></content>
      <categories>
        <category>R编程</category>
      </categories>
      <tags>
        <tag>编程能力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用ComplexHeatmap绘制热图(一)]]></title>
    <url>%2F2018%2F04%2F08%2F%E5%88%A9%E7%94%A8ComplexHeatmap%E7%BB%98%E5%88%B6%E7%83%AD%E5%9B%BE(%E4%B8%80)%2F</url>
    <content type="text"><![CDATA[简介Complexheatmap是由顾祖光博士创建的绘制热图的R包，在他的GitHub有十分详细的小品文(Vignettes)说明。Complexheatmap是基于绘图系统grid，因此如果有相应grid的知识，学习起来应该更顺手！ 设计Complexheatmap提供了一套非常灵活的方法用于多热图也就是热图列表布局以及支持自定义注释绘图，一个热图列表包含若干热图以及注释信息 绘制单个热图安装包的安装就不细说了，有不懂的可以翻我以前的博客，里面有详细的教程，下面直接给出安装代码不解释 1234567# installed from bioconductorsource("http://bioconductor.org/biocLite.R")options(BioC_mirror="http://mirrors.ustc.edu.cn/bioc/")biocLite("ComplexHeatmap")# installed from GitHubif(!require(devtools))&#123;install.packages("devtools")&#125;devtools::install_github("jokergoo/ComplexHeatmap") 创建数据集123456pacman::p_load(ComplexHeatmap, circlize)set.seed(7)mat &lt;- cbind(rbind(matrix(rnorm(16, -1),4), matrix(rnorm(32, 1), 8)), rbind(matrix(rnorm(24, 1), 4), matrix(rnorm(48, -1), 8)))mat &lt;- mat[sample(nrow(mat), nrow(mat)), sample(ncol(mat), ncol(mat))]rownames(mat) &lt;- paste0(&quot;R&quot;, 1:12)colnames(mat) &lt;- paste0(&quot;C&quot;, 1:10) 绘图ComplexHeatmap绘制热图十分简单,使用默认参数1Heatmap(mat) 定制化ComplexHeatmap十分灵活，可以自定义多种参数绘制热图 颜色大多数情况下，绘制热图的矩阵都是连续性变量，通过提供颜色映射函数，我们可以自定义颜色，这主要是通过circlize包中的colorRamp2()函数来实现的, 123mat2 &lt;- matmat2[1,1] &lt;- 100000Heatmap(mat2, col = colorRamp2(c(-3,0,3), c(&quot;green&quot;,&quot;white&quot;,&quot;red&quot;)), cluster_rows = FALSE, cluster_columns = FALSE) 可以看出，ComplexHeatmap对于异常值也能显示出来，不会剔除掉 1Heatmap(mat, col = rev(rainbow(10))) 如果是离散型变量或者数值型、字符型变量的话，这时就需要特别指定颜色了 1234#离散型变量/数值型变量discrete_mat &lt;- matrix(sample(1:4, 100, replace = TRUE), 10, 10)colors &lt;- structure(circlize::rand_color(4), names=c(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;))Heatmap(discrete_mat, col = colors) 1234#字符型变量character_mat &lt;- matrix(sample(letters[1:4], 100, replace = TRUE), 10, 10)colors &lt;- structure(circlize::rand_color(4), names=letters[1:4])Heatmap(character_mat, col = colors) 可以看出，对于离散型变量/数值型变量，默认对行/列进行聚类，而对于字符型变量，则不进行聚类 ComplexHeatmap允许数据中含有NA,只需要通过参数na_col来控制NA的颜色 123mat_with_NA &lt;- matmat_with_NA[sample(c(TRUE, FALSE), nrow(mat)*ncol(mat), replace = TRUE, prob = c(1,9))] &lt;- NAHeatmap(mat_with_NA, na_col = &quot;orange&quot;, clustering_distance_rows = &quot;pearson&quot;) ComplexHeatmap默认使用LAB颜色空间(LAB color space)，colorRamp2()提供了选择颜色空间的参数选项 12345f1 &lt;- colorRamp2(seq(min(mat), max(mat), length=3), c(&quot;blue&quot;,&quot;#EEEEEE&quot;, &quot;red&quot;))f2 &lt;- colorRamp2(seq(min(mat), max(mat), length=3), c(&quot;blue&quot;,&quot;#EEEEEE&quot;, &quot;red&quot;), space = &quot;RGB&quot;)H1 &lt;- Heatmap(mat, col = f1, column_title = &quot;LAB color space&quot;)H2 &lt;- Heatmap(mat, col = f2, column_title = &quot;RGB color space&quot;)H1+H2 ComplexHeatmap提供了多种颜色空间选项，可以根据自身数据不断调整，选取合适的颜色空间 标题一个热图的标题有：图标题、图例标题、行列标题等Heatmap里提供的name参数默认的是图例的标题1Heatmap(mat, name = &quot;legend&quot;) 图里标题可以通过heatmap_legend_param()进行修改1Heatmap(mat, heatmap_legend_param = list(title=&quot;legend&quot;)) 行列标题 1Heatmap(mat, name = &quot;legend&quot;, column_title = &quot;Column&quot;, row_title = &quot;Row&quot;) 1Heatmap(mat, name = &quot;legend&quot;, column_title = &quot;Column&quot;, column_title_side = &quot;bottom&quot;) 如果需要修改图例参数，可以通过gpar()参数 1Heatmap(mat, name = &quot;legend&quot;,column_title = &quot;Column&quot;, row_title = &quot;Row&quot;, column_title_gp = gpar(fontsize=20, fontface=&quot;bold&quot;), row_title_gp = gpar(fontsize=20, fontface=&quot;bold&quot;)) 标题可以旋转(水平或竖直) 1Heatmap(mat, name = &quot;legend&quot;, row_title = &quot;Row&quot;, row_title_rot = 0) SessionInfo1sessionInfo() 12345678910111213141516171819202122232425262728## R version 3.4.4 (2018-03-15)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 16299)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] grid stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages:## [1] circlize_0.4.3 ComplexHeatmap_1.17.1## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.16 digest_0.6.15 rprojroot_1.3-2 ## [4] backports_1.1.2 pacman_0.4.6 magrittr_1.5 ## [7] evaluate_0.10.1 GlobalOptions_0.0.13 stringi_1.1.7 ## [10] GetoptLong_0.1.6 rmarkdown_1.9 RColorBrewer_1.1-2 ## [13] rjson_0.2.15 tools_3.4.4 stringr_1.3.0 ## [16] yaml_2.1.18 compiler_3.4.4 colorspace_1.3-2 ## [19] shape_1.4.4 htmltools_0.3.6 knitr_1.20 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>Complexheatmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[全基因组加倍及串联重复基因]]></title>
    <url>%2F2018%2F04%2F05%2F%E5%85%A8%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%8A%A0%E5%80%8D%E5%8F%8A%E4%B8%B2%E8%81%94%E9%87%8D%E5%A4%8D%E5%9F%BA%E5%9B%A0%2F</url>
    <content type="text"><![CDATA[串联重复基因是植物基因组中一类具有功能的串联重复序列，在植物基因组进化和环境适应的过程中起着十分重要的作用。串联重复基因主要是由串联重复事件产生的。在植物基因组中，串联重复事件的发生频率比较高，为植物基因组带来了基因拷贝数的增加以及等位基因变异。串联重复事件伴随着拟南芥和芸薹属物种的整个进化过程，而且芸薹属物种的多倍化事件并没有影响串联重复事件的发生。 基因共线性分析 拟南芥在进化过程中先后经历了三次基因组加倍事件(α、β和γ多倍化事件)。通过对拟南芥基因组的三次基因组加倍事件产生的共线性基因对分析，获得了α、β和γ多倍化事件后分别产生的3530，1421和505共线性基因对。在拟南芥细胞色素P450基因家族的进化分析发现，仅有CYP94基因家族中一对基因在γ基因组加倍化事件后产生的共线性基因对中被保留下来。这可能意味着CYP94基因家族的这两个成员在双子叶植物的祖先在经历γ基因组多倍化事件之前就存在。对于β基因组多倍化事件，CYP86、CYP72和CYP81基因家族中各有一对基因对被检测到保留下来，这意味着这些P450基因在β基因组多倍化事件之前就存在并在β基因组多倍化事件之后被保留下来。对于α基因组加倍事件产生的共线性基因对，共获得了11个P450基因对在α基因组加倍化事件后被保留下来，意味着这22个P450基因在α基因组多倍化事件之前就已存在并在α基因组加倍事件后保留下来。 在拟南芥和芸薹属的祖先物种分化之后，芸薹属祖先物种经历了自身的三倍化事件，然后进一步产生了现在的白菜和甘蓝，通过与拟南芥基因组中24个十字花科保守区段的共线性关系构建了白菜和甘蓝基因组中的三倍化区段。根据三倍化区段上基因密度的差异，两个芸薹属物种中的三倍化区段划分为三个亚基因组：MF1(中度丢失)、NF2(高度丢失)和LF(低度丢失)。 通过古基因组学研究可追溯源到由7931条原基因模型和7条染色体构成的双子叶植物祖先基因组，以及由9138条原基因模型和5条染色体构成的单子叶植物祖先基因组。显花植物研究表明，被子植物基因组经历二倍化(α)、四倍化(β)和六倍化(γ)3次古全基因组复制(WGD)事件。 同源多倍体来源于种内WGD事件，异源多倍体来源于种间杂交。芸薹属(Brassica)植物经历了3次基因组WGD事件(α、β和γ)和种系全基因组三倍化事件，是基因组多倍化研究的重要模式物种。 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生R语言爱好者，爱开源]]></content>
      <categories>
        <category>bioinformatics</category>
      </categories>
      <tags>
        <tag>重复基因</tag>
        <tag>古基因组学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[跨物种单拷贝直系同源基因]]></title>
    <url>%2F2018%2F04%2F02%2F%E8%B7%A8%E7%89%A9%E7%A7%8D%E5%8D%95%E6%8B%B7%E8%B4%9D%E7%9B%B4%E7%B3%BB%E5%90%8C%E6%BA%90%E5%9F%BA%E5%9B%A0%2F</url>
    <content type="text"><![CDATA[同源(Homology)同源(Homology) 的概念是这样定义的： Homology:the existence of shared abcestry between a pair of strctures,or genes, in different species 如果两个或多个结构具有相同的祖先，也就是它们由一个共同祖先演化而来，则称它们同源(Homology) 在生物信息学中，同源主要指的是序列上的同源，即用来说明两个或多个蛋白质氨基酸序列或者DNA序列具有共同的祖先。同源的序列一般具有相似的功能，序列中同源的部分也称为保守的(conserved) 蛋白质和DNA的同源性常常根据它们序列的相似性(Sequence similarity)来判定，相似性一般用检测序列和目标序列之间的序列一致性(Percent identity)来表示 相似性(Sequence similarity)是指序列比对过程中用来描述检测序列与目标序列之间相同DNA或氨基酸残基所占比例。一般来说，相似程度高于50%则认为序列之间是同源序列 直系同源(orthology)与旁系同源(paralogy) 同源现象可分为直系同源(orthology)与旁系同源(paralogy) Orthologys(orthology genes) are genes in dofferent pecies that originated by vertical descent from a single gene of the last common ancestor 直系同源(orthology)是指不同物种中的某一基因来自同一祖先，在演化过程中因物种形成(speciation)而被区分开来 Paralogys(paralogous genes) are created by a duplication event within the genome. For gene duplicationevents, if a gene in an organism is duplicated to occupy two different positions in the same genome, then the two copies are paralogous 旁系同源(paralogy)是指种系间的基因复制 趋同演化(Convergent evolution)和趋异进化(Divergent evolution)相似不一定同源，但是一般来说同源的必定是相似的 趋同演化(Convergent evolution)：Convergent evolution creats analogous structure that have similar form or function, but that are not present in that last common ancestor of those groups 趋异演化(Divergent evolution): the accumulation of differences between groups which can lead to the formation of new species, usually a result of diffusion of the same species to different and isolated environments which blocks the gene flow among the distinct populations allowing differential fixation of characteristics through genetic drift and natural selection 趋异演化(Divergent evolution):同一物种不同群体之间累积性差异导致新物种的形成，通常是同一物种扩散后，在不同隔离的环境下通过基因漂流和自然选择，基因分化固定后的结果，也就是说，两个或多个生物学特征具有共同演化起源，源自同一物种，但在演化过程中因环境等自然选择压力的原因，逐渐分化的现象 蛋白家族(protein family)和蛋白质超家族(protein superfamilies)蛋白家族(protein family)家族有时我们也称为基因家族(gene family)，我们一般检索基因家族的时候都是根据数据库比如Pfam来搜索，大多是根据蛋白质氨基酸序列来搜索保守结构域。不同的蛋白质家族(protein family)又可被归于一个蛋白质超家族 Protein family is a group of evolutionarily-related proteins. In many cases a protein family has a corresponding gene family, in which each gene encodes a corresponding protein with a 1:1 realtionship. Proteins in a family descend from a common ancestor and typicallly have similar three-dimensional, functions, and significant sequence similarity Families are sometimes grouped together into a larger clades called superfamilies based on structured and mechanistic similarity, even if there is no identifiable sequence homology 蛋白质超家族(protein superfamilies)：一些蛋白质家族被归入更大的进化分支，基于结构机制的相似性，尽管其没有可确定的显著的序列同源性。简单而言就是蛋白质家族包含了更多进化分支的蛋白，虽然没有同源性，但是因为其结构域或功能基本相似，也被归为一个大类。蛋白质家族的同源关系是可以确定，同源关系上更加严格些 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生R语言爱好者，爱开源]]></content>
      <categories>
        <category>bioinformatics</category>
      </categories>
      <tags>
        <tag>同源基因</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[植物转录因子WRKY]]></title>
    <url>%2F2018%2F03%2F30%2F%E6%A4%8D%E7%89%A9%E8%BD%AC%E5%BD%95%E5%9B%A0%E5%AD%90WRKY%2F</url>
    <content type="text"><![CDATA[WRKY结构特点 WRKY转录因子家族具有相同的结构特征，N端都有包含WRKYGQK七肽序列的WRKY结构域，C端则含有C2H2-或C2HC-锌指结构，二者是WRKY特异性与启动子中W-box序列(C/T)TGAC(T/C)结合必不可少的组件。根据这些特点，WRKY可以分为三个亚家族：第Ⅰ亚家族含有两个WRKY结构域和两个C2H2锌指结构，第Ⅱ亚家族含有一个WRKY结构域和一个C2H2锌指结构，第Ⅲ亚家族含有一个WRKY结构域和一个C2HC锌指结构。第Ⅱ亚家族又被分为Ⅱa,Ⅱb,Ⅱc,Ⅱd和Ⅱe五个小亚族。 禾本科作物比如水稻、玉米以及高粱含有更多的第Ⅲ亚族WRKY，而Ⅱc亚家族和Ⅱa+Ⅱb亚家族则广泛地存在于十字花科和豆科中。 WRKY在植物逆境胁迫方面作用 在非生物胁迫中的作用 在生物胁迫中的作用 第Ⅱ亚家族中的Ⅱc成员据推测可能是干旱胁迫以及盐胁迫的关键转录调控因子，几乎所有的WRKY基因都有参与到生物胁迫中，这说明： WRKY的祖先在很早以前就已经进化有了植物免疫的功能 WRKY的剂量是影响植物环境适应性的关键因子 WRKY在植物生长发育中的作用 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>bioinformatics</category>
      </categories>
      <tags>
        <tag>转录因子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[油菜形成、进化及基因家族概况(三)]]></title>
    <url>%2F2018%2F03%2F23%2F%E6%B2%B9%E8%8F%9C%E5%BD%A2%E6%88%90%E5%8F%8A%E8%BF%9B%E5%8C%96(%E4%B8%89)%2F</url>
    <content type="text"><![CDATA[同源基因同源基因包括直系同源基因(Orthologs)和旁系同源基因(Paralogs)。 直系同源基因 直系同源基因是指分布于两种或两种以上物种的基因组中，在进化上起源于一个祖先基因并垂直传递的同源基因，直系同源基因之间的功能高度保守，有些近乎相同。 旁系同源基因 旁系同源基因是指同一基因组(或同系物种的基因组)中，由于祖先基因的基因复制产生的同源基因。旁系同源基因尽管在结构上具有一定程度的相似性，但是他们的功能可能相似，也可能并不相似，甚至失去功能变成了假基因。 基因家族及其扩增基因复制对基因组中的基因家族扩增起着非常重要的作用。复制模式主要有三种：染色体片段复制(Segmental duplication)、串联复制(Tandem duplication)以及反转录转座(Retrotransposition) 染色体片段复制 大部分植物都经历过古老的全基因组复制事件，它是一种大规模的染色体倍增事件，一次性增加一个物种所有基因的剂量，导致基因组中保留着大量染色体倍增的片段。全基因组复制造成的重复区通常是一大片区域中所有基因的重复，而不是单个基因或几个基因的重复。 串联复制 串联复制主要发生在染色体重组区域，串联复制形成的基因家族成员通常紧密排列在同一条染色体上，形成一个序列相似、功能相近的基因簇。 反转录转座 反转录转座是指件已经转录和剪切的mRNA，再经过逆转录过程形成cDNA，然后随机插入到染色体的某一位置形成新的重复基因的过程。经反转录转座形成的新基因往往由于缺少必要的调控序列，通常都是不能表达的假基因。 许多重要的基因家族在基因组中成簇存在，即同一基因家族的不同成员在基因组中串联重复排列。这些成簇存在的基因是种系生殖细胞在减数分裂过程中，通过染色体不等交换以及基因转换形成的。一些基因超家族通常含有成簇和分散存在的基因，成簇存在的基因(通常组成多基因家族)具有相似的功能，而分散存在的基因一般具有不同的功能。 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>bioinformatics</category>
      </categories>
      <tags>
        <tag>Brassica</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[油菜形成、进化及基因家族概况(二)]]></title>
    <url>%2F2018%2F03%2F21%2F%E6%B2%B9%E8%8F%9C%E5%BD%A2%E6%88%90%E5%8F%8A%E8%BF%9B%E5%8C%96(%E4%BA%8C)%2F</url>
    <content type="text"><![CDATA[基因家族由一个共同的祖先基因经过重复(duplication)和突变(mutation)产生的、外显子中具有相似的序列的一组相关基因称为基因家族(gene family)。基因重复主要有三种形式：片段复制、串联重复和逆转录转座或其它转座事件等，基因重复后可以彼此形成基因簇(gene clusters)，同一家族中的成员有时紧密排列在一起成为一个基因簇；更多时候他们却分散在同一染色体的不同部位，甚至位于不同染色体上，具有不同的表达调控模式。 假基因在多基因家族中，某些成员并不产生有功能的基因产物，这些基因称为假基因(pseudogene)。假基因与有功能的基因同源，原来可能是有功能的基因，但由于缺失、倒位或点突变，使这一基因失去活性，成为无功能基因。与相应的正常基因相比，假基因往往缺少正常基因的内含子，两侧具有顺向重复序列。据推测假基因的来源之一可能是基因经过转录后生成的RNA的前体通过剪切失去内含子形成mRNA，如果mRNA经反复转录产生cDNA，再整合到染色体DNA中，便有可能成为假基因，因此该假基因是没有内含子的，在这个过程中，可能同时会发生缺失、倒位或点突变等变化，从而使假基因不能表达。假基因一般缺乏必要的启动子序列和缺乏一个或多个具有活性的成员中特有的内含子序列。 DNA重复DNA重复通常是指DNA片段数的增加，它可以是一个完整基因的重复(基因重复)、基因的一部分重复、一个完整染色体的重复(非整倍体)或整个基因组的重复(多倍体)。基因家族是由于连续的基因重复所造成的。非整倍体常导致生物体不育，而基因组重复只是增加基因拷贝数，并不产生新的基因，对基因组的复杂性并没有改变。从基因组计划的角度来看，更多的是考虑单个基因或一些基因的重复，而不是整个基因组的重复。 超基因家族多基因家族是一类具有序列同源性及功能相似性的基因；而超基因家族是一类具有序列同源性而不具有相似功能的基因。 基因簇许多重要的基因家族在基因组中成簇存在，也即同一基因家族的不同成员在基因组中重复串联排列。这些成簇存在的基因是种系生殖细胞在减数分裂过程中通过染色体不等交换和基因转换形成的。成簇存在的基因(通常组成多基因家族)具有相似的功能，而分散存在的基因往往具有不同的功能，当然也有例外。分散存在的基因家族一般认为是通过RNA逆转录、随后整合到基因组中形成的。整合序列(integrated sequence)或逆转录序列(retrosequence)来源于基因的RNA转录本，因此无内含子。大多数逆转录序列变为不具功能的逆转录假基因(retropesudogene)，只有极少数逆转录序列保留了功能。 基因家族形成的分子机制 基因重复和点突变 基因发生重复的主要分子机制包括多倍体化、串联重复及逆转录转座。多倍体化导致了许多基因家族的形成，串联重复参与了成簇存在的基因家族的进化，重复的DNA区域可以小于或大于一个基因的长度，但在基因家族的进化过程中，整个基因的重复尤为重要。在种系减数分裂过程中，染色体不等交换引起基因串联重复，一旦一个基因簇形成，不等交换率就会升高。在具有相似功能成员的多基因家族中，频繁的染色体不等交换导致了家族成员的协同进化。 自然选择和随机漂变 任何重复基因或多拷贝基因，如果被表达且具有功能，则正经历着纯化性自然选择(purifying selection)，多拷贝基因的进化率比单个基因的突变率低很多。自然选择限制程度随基因冗余而减弱，只要有一个基因保留其功能，有害的突变就有可能富集。对于大对数基因家族来说，有害突变的积累可被纯化性选择阻止，纯化性自然选择可以检测到具有功能的完整基因的数目。使突变基因拷贝数增加或减少的协同进化有利于自然选择。正向自然选择(positive selection)是在重复基因获得新功能时发生的。许多重复基因产生后加快了氨基酸的替代，氨基酸替代可以通过同义及非同义突变的频率进行估计。基因重复的另一后果是基因表达模式的变化，也即多拷贝基因的功能特化或亚功能化。这种变化对于参与发育过程的转录因子及其他蛋白尤为重要，这类基因功能的变化与生物的形态学进化直接相关。 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>bioinformatics</category>
      </categories>
      <tags>
        <tag>Brassica</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[油菜形成、进化及基因家族概况]]></title>
    <url>%2F2018%2F03%2F20%2F%E6%B2%B9%E8%8F%9C%E5%BD%A2%E6%88%90%E5%8F%8A%E8%BF%9B%E5%8C%96%2F</url>
    <content type="text"><![CDATA[起源十字花科祖先于2400-4000万年前出现，然后拟南芥与芸薹属在1200-2000万年前分化，之后不久芸薹属经历了特有的基因组三倍化，而后又经历了大规模的基因丢失、基因获得和包括部分复制和部分丢失的染色体重排。芸薹属两个重要的二倍体基本种白菜油菜(AA,2n=20)与甘蓝(CC,2n=18)于460万年前分化。甘蓝型油菜是由白菜型油菜和甘蓝通过种间自然杂交后又经染色体加倍而形成的一个异源四倍体。因此甘蓝型油菜基因组中通常会含有2个或2个以上的重复基因序列。 转录因子在植物生长发育过程中，植物体需要对各种功能相关基因表达进行精确调控，从而对不同环境、组织和发育信号等作出相应的调节反应，其中转录因子在基因的表达调控中起着关键性作用。大部分真核生物中基因的表达很大程度上为转录水平的调控，这一调控是由多个不同蛋白质族群间的相互协调来达到，这些蛋白统称为转录因子，一般来说可以识别它们所调控的基因的启动子区域内特定的DNA序列的蛋白。通过蛋白之间的相互作用，转录因子调节RNA聚合酶Ⅱ的激活以及mRNA的合成。 转录因子结构转录因子一般由4个功能区域组成：DNA结合域、转录调控区、寡聚化位点以及核定位信号。转录因子通过这些功能区域进入细胞核，与启动子中的顺式作用元件或其它转录因子的功能区域相互作用来调控基因转录表达。DNA结合域是指转录因子中能够识别并结合DNA顺式作用元件的一段氨基酸序列。同类型转录因子中DNA结合域的氨基酸序列是比较保守的，这决定了转录因子与顺式作用元件间识别与结合的特异性。转录调控区包括转录激活区以及转录抑制区，这一区域决定了同类转录因子间的差异，使之具有不同的功能。核定位信号控制转录因子进入细胞核的过程，该区域富含精氨酸和赖氨酸残基。寡聚化位点具有很保守的氨基酸序列，它是不同转录因子借以发生相互作用的功能域，形成同源或异源二聚体。转录因子基因结构可以通过Gene Structure Display Server 2.0(GSDS2.0)进行分析。 串联复制如果两个基因中间间隔有不多于5个基因且属于同一个基因家族，那么这两个基因称为串联复制。用MCScanX中的mcscanx对拟南芥基因组和甘蓝型油菜基因组分别做共线性分析，若一个基因与另一个基因有共线性关系，其周围有两对以上基因都是共线性关系，则这两个基因为部分复制。另外利用MCScanX中的add ka and ks to collinearity模块计算共线性关系基因对的Ks(同义替换)值，再利用T=Ks/2λ来推测部分复制发生的时间，对于十字花科而言，λ为1.5*10-8。 转录因子理化性质在ExPASy中对拟南芥和推测出来的甘蓝型油菜基因家族成员的氨基酸序列进行分析，获得它们的理论等电点(pIs)以及蛋白质的相对分子量(Mw)。 多倍化多倍化是物种进化的重要动力，多数高等植物在进化过程中都经历了不同水平的多倍化。十字花科物种都经历了三倍化。拟南芥与白菜分化自同一祖先物种。大约20-40M，拟南芥与白菜的共同祖先发生了一次基因组水平上的复制事件，称为α事件。芸薹属物种在此后又经历了一次基因组水平三倍化事件。在5-9M，甘蓝与白菜的共同祖先经历了一次基因组水平三倍化，白菜与甘蓝分化时间大约在4M。相较于拟南芥，甘蓝和白菜各发生了一次基因组复制。甘蓝型油菜大约在7500~12500年前由白菜和甘蓝天然杂交形成。物种的进化实质是基因的进化，多倍体事件是基因家族扩张的主要动力，在多倍化之后，基因数目呈倍数增长。 进化分析基因家族聚类同源的蛋白质可以分为直系同源与旁系同源，当同源是基因复制的结果，两份拷贝在一个物种的历史上是平行演化的，这样的基因被称为旁系同源基因。当同源是物种形成的结果，基因的历史反映了物种的历史，被称为直系同源；直系同源是不同物种内的同源序列，它们是来自于物种形成时的共同祖先基因，通常认为直系同源基因具有相似的生物学功能。 假基因对不能转录或转录后生成无功能蛋白质的基因。假基因在及基因组中形成稳定的和无活性的拷贝，由活化的原始基因突变而来(复制突变或者加工型假基因)。这是因为存在着在某个阶段伤及基因表达的一种或多种缺陷(如启动子错误、有缺陷的剪接信号、框架中有终止信号等)之故。 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>bioinformatics</category>
      </categories>
      <tags>
        <tag>Brassica</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生物信息学学习笔记（八）]]></title>
    <url>%2F2018%2F03%2F07%2F%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%2F</url>
    <content type="text"><![CDATA[WRKY转录因子是高等植物中10个最大的转录因子家族之一，其N-末端含有高度保守的WRKYGQK氨基酸序列。WRKY蛋白的N-端均含有1个或两个由近60个氨基酸组成的WRKY结构域，C-端均含有1个锌指结构，二者是WRKY特异性与启动子中W-box序列（C/T）TGAC（T/C）结合必不可少的组件，其中WRKY结构域中含有一段高度保守的WRKYGQK七肽序列（或者为WRKYGEK、WRKYGKK）。 作为转录因子，WRKY蛋白参与对细胞内特定基因的转录调控，从而产生相应的细胞反应来应对不同的外界刺激，这些刺激包括非生物胁迫和生物胁迫。WRKY转录因子也广泛参与调控植物的生长发育过程，如种子发育过程、胚胎形成、叶片衰老和新陈代谢等过程。 调控开花的四条信号途径 光周期途径 春化途径 自主途径 赤霉素(GA)途径 光周期途径：光周期途径中相关基因的突变体，仅在光照条件下开花时间延迟春化途径：通过抑制开花抑制子FLC的转录,从而促进开花自主途径：独立于光周期途径，使得那些在长光照下迅速开花的植物如拟南芥在短光照条件下最终也能开花。自主途径中的相关复合物通过限制FLC mRNA的积累，从而促使开花GA途径：GA合成及GA信号转导相关的突变体，在短光照条件下，开花会延迟很长时间，说明在没有长光照促使开花的条件下，GA是一种刺激植物开花的重要物质 四条途径可以独立调控开花过程，但是它们有着共同的下游目标基因CO和FLC。位于CO和FLC下游的开花整合因子FT、LFY和SOC1，通过整合开花途径输出的信号，激活花分生组织特异性基因LFY和APl的表达，从而启动开花。其中FT是一个长距离信号，其蛋白通过韧皮部从叶片(伴胞细胞)转移到茎端，与FD蛋白相互作用，激活APl的表达。LFY既是开花时间基因，又是花分生组织特性基因，直接调控靶基因APl的表达。SOC1受四条开花途径的正调控，并认为可能是四条开花途径的一个整合子。SOC1可被CO的过量表达诱导和FT的过量表达快速激活。 WRKY蛋白质通过特异性结合靶基因启动子区域的(T)TGAC(C/T)(W-box)序列来调控相应基因的表达，从而在植物生长发育、形态建成、物质代谢和耐逆抗病等方面发挥生物学功能。 关于cDNA和CDS以及ORF的区别mRNA是由编码区(CDS)、上游的5’和下游的3’非编码区组成，真核生物的mRNA的5’端带有7-甲基鸟苷-三磷酸帽子结构，3’端有多腺苷酸尾巴，但是NCBI中的mRNA序列实际上是cDNA序列，即经过反转录得到的与RNA序列互补的DNA序列，一般不包括3’多腺苷酸尾巴。一个cDNA序列被称为一个转录子，第一个碱基所在的位置为转录起始位点(TSS)，cDNA都是由外显子组成，但是编码蛋白质的外显子只有一个，即CDS(Coding Sequence)，这段序列也就是一个ORF区，也就是这个cDNA的ORF序列，参与特定基因转录及其调控的TSS上游序列称为启动子。 5’UTR-CDS-3’UTR=cDNA,cDNA包含CDS 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>bioinformatics</category>
      </categories>
      <tags>
        <tag>转录因子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用ggseqlogo绘制seqlogo图]]></title>
    <url>%2F2018%2F02%2F19%2F%E5%88%A9%E7%94%A8ggseqlogo%E7%BB%98%E5%88%B6seqlogo%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[简介sequence logo图用来可视化一段序列某个位点的保守性，据根提供的序列组展示位点信息。这方面有很多在线小工具可以完成，这里使用R包ggseqlogo进行可视化。 安装安装方式有两种 1234#直接从CRAN中安装install.packages("ggseqlogo")#从GitHub中安装devtools::install.github("omarwagih/ggseqlogo") 数据加载ggseqlogo提供了测试数据ggseqlogo_sample。12345#加载包library(ggplot2)library(ggseqlogo)#加载数据data(ggseqlogo_sample) ggseqlogo_sample数据集是一个列表，里面包含了三个数据集： seqs_dna:12种转录因子的结合位点序列 pfms_dna:四种转录因子的位置频率矩阵 seqs_aa:一组激动酶底物磷酸化位点序列 12#seqs_dnahead(seqs_dna)[1] 123## $MA0001.1## [1] "CCATATATAG" "CCATATATAG" "CCATAAATAG" "CCATAAATAG" "CCATAAATAG"## [6] "CCATAAATAG" "CCATAAATAG" "CCATATATGG" "CCATATATGG" "CCAAATATAG" 12#pfms_dnahead(pfms_dna)[1] 123456## $MA0018.2## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]## A 0 0 11 0 1 0 2 8## C 1 1 0 9 0 3 7 0## G 1 10 0 2 10 0 1 1## T 9 0 0 0 0 8 1 2 12#seqs_aahead(seqs_aa)[1] 123## $AKT1## [1] "VVGARRSSWRVVSSI" "GPRSRSRSRDRRRKE" "LLCLRRSSLKAYGNG"## [4] "TERPRPNTFIIRCLQ" "LSRERVFSEDRARFY" "PSTSRRFSPPSSSLQ" 可视化1ggplot()+geom_logo(seqs_dna$MA0001.1)+theme_logo() ggseqlogo提供了一个直接绘图的函数ggseqlogo(),这是一个包装函数。下面命令结果同上面的。1ggseqlogo(seqs_dna$MA0001.1) 输入格式ggseqlogo支持以下几种类型数据输入： 序列 矩阵 下面是使用数据中的位置频率矩阵生成的seqlogo1ggseqlogo(pfms_dna$MA0018.2) 方法ggseqlogo通过method选项支持两种序列标志生成方法：bits和probability。123p1 &lt;- ggseqlogo(seqs_dna$MA0001.1, method=&quot;bits&quot;)p2 &lt;- ggseqlogo(seqs_dna$MA0001.1, method=&quot;prob&quot;)gridExtra::grid.arrange(p1,p2) 序列类型ggseqlogo支持氨基酸、DNA和RNA序列类型，默认情况下ggseqlogo会自动识别数据提供的序列类型，也可以通过seq_type选项直接指定序列类型。1ggseqlogo(seqs_aa$AKT1, seq_type=&quot;aa&quot;) 自定义字母通过namespace选项来定义自己想要的字母类型123#用数字来代替碱基seqs_numeric &lt;- chartr(&quot;ATGC&quot;, &quot;1234&quot;, seqs_dna$MA0001.1)ggseqlogo(seqs_numeric, method=&quot;prob&quot;, namespace=1:4) 配色ggseqlogo可以使用col_scheme参数来设置配色方案，具体可参考?list_col_schemes1ggseqlogo(seqs_dna$MA0001.1, col_scheme=&quot;base_pairing&quot;) 自定义配色ggseqlogo提供函数make_col_scheme来自定义离散或者连续配色方案 离散配色12csl &lt;- make_col_scheme(chars = c(&quot;A&quot;,&quot;T&quot;, &quot;C&quot;, &quot;G&quot;), groups = c(&quot;gr1&quot;,&quot;gr1&quot;, &quot;gr2&quot;,&quot;gr2&quot;), cols = c(&quot;purple&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;blue&quot;))ggseqlogo(seqs_dna$MA0001.1,col_scheme=csl) 连续配色12cs2 &lt;- make_col_scheme(chars = c(&quot;A&quot;, &quot;T&quot;, &quot;C&quot;, &quot;G&quot;), values = 1:4)ggseqlogo(seqs_dna$MA0001.1, col_scheme=cs2) 同时绘制多个序列标志1ggseqlogo(seqs_dna, ncol = 4) 上述命令实际上等同于 12ggplot()+geom_logo(seqs_dna)+theme_logo()+ facet_wrap(~seq_group,ncol = 4,scales = "free_x") 自定义高度通过创建矩阵可以生成每个标志的高度，还可以有负值高度1234set.seed(1234)custom_mat &lt;- matrix(rnorm(20), nrow = 4, dimnames = list(c(&quot;A&quot;,&quot;T&quot;,&quot;C&quot;, &quot;G&quot;)))ggseqlogo(custom_mat,method=&quot;custom&quot;,seq_type=&quot;dna&quot;)+ ylab(&quot;my custom height&quot;) 字体可以通过font参数来设置字体，具体可参考?list_fonts12345fonts &lt;- list_fonts(F)p_list &lt;- lapply(fonts, function(f)&#123; ggseqlogo(seqs_dna$MA0001.1,font=f)+ggtitle(f)&#125;)do.call(gridExtra::grid.arrange,c(p_list, ncol=4)) 注释注释的话跟ggplot2是一样的123456ggplot()+ annotate(&quot;rect&quot;, xmin = 0.5, xmax = 3.5, ymin = -0.05, ymax = 1.9, alpha=0.1, col=&quot;black&quot;, fill=&quot;yellow&quot;)+ geom_logo(seqs_dna$MA0001.1, stack_width = 0.9)+ annotate(&quot;segment&quot;, x=4, xend = 8, y=1.2, yend = 1.2, size=2)+ annotate(&quot;text&quot;, x=6, y=1.3, label=&quot;Text annotation&quot;)+ theme_logo() 图形组合将ggseqlogo生成的图形与ggplot2生成的图形组合在一起。1234567891011121314151617181920212223242526p1 &lt;- ggseqlogo(seqs_dna$MA0008.1)+theme(axis.text.x = element_blank())aln &lt;- data.frame( letter=strsplit(&quot;AGATAAGATGATAAAAAGATAAGA&quot;, &quot;&quot;)[[1]], species=rep(c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;), each=8), x=rep(1:8,3))aln$mut &lt;- &quot;no&quot;aln$mut[c(2,15,20,23)]=&quot;yes&quot;p2 &lt;- ggplot(aln, aes(x, species)) + geom_text(aes(label=letter, color=mut, size=mut)) + scale_x_continuous(breaks=1:10, expand = c(0.105, 0)) + xlab(&apos;&apos;) + scale_color_manual(values=c(&apos;black&apos;, &apos;red&apos;)) + scale_size_manual(values=c(5, 6)) + theme_logo() + theme(legend.position = &apos;none&apos;, axis.text.x = element_blank()) bp_data &lt;- data.frame( x=1:8, conservation=sample(1:100, 8))p3 &lt;- ggplot(bp_data, aes(x, conservation))+ geom_bar(stat = &quot;identity&quot;, fill=&quot;grey&quot;)+ theme_logo()+ scale_x_continuous(breaks = 1:10, expand = c(0.105, 0))+ xlab(&quot;&quot;)suppressMessages(require(cowplot))plot_grid(p1,p2,p3,ncol = 1, align = &quot;v&quot;) SessionInfo1sessionInfo() 123456789101112131415161718192021222324252627282930## R version 3.4.3 (2017-11-30)## Platform: x86_64-pc-linux-gnu (64-bit)## Running under: Ubuntu 17.10## ## Matrix products: default## BLAS: /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3## ## locale:## [1] LC_CTYPE=zh_CN.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=zh_CN.UTF-8 LC_COLLATE=zh_CN.UTF-8 ## [5] LC_MONETARY=zh_CN.UTF-8 LC_MESSAGES=zh_CN.UTF-8 ## [7] LC_PAPER=zh_CN.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] cowplot_0.9.2 ggseqlogo_0.1 ggplot2_2.2.1## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.15 knitr_1.20 magrittr_1.5 munsell_0.4.3 ## [5] colorspace_1.3-2 rlang_0.2.0 stringr_1.3.0 plyr_1.8.4 ## [9] tools_3.4.3 grid_3.4.3 gtable_0.2.0 htmltools_0.3.6 ## [13] yaml_2.1.16 lazyeval_0.2.1 rprojroot_1.3-2 digest_0.6.15 ## [17] tibble_1.4.2 gridExtra_2.3 evaluate_0.10.1 rmarkdown_1.8 ## [21] labeling_0.3 stringi_1.1.6 compiler_3.4.3 pillar_1.1.0 ## [25] scales_0.5.0 backports_1.1.2 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>seq_logo</tag>
        <tag>ggseqlogo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建属于自己的调色板]]></title>
    <url>%2F2018%2F02%2F10%2F%E5%88%9B%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E8%B0%83%E8%89%B2%E6%9D%BF%2F</url>
    <content type="text"><![CDATA[简介我们知道发表文章的时候不同杂志的配色方案是不同的，如果参加工作的话，不同公司的配色方案也是不一样的，每个人的色觉也是不一样的，所以如果可以创建属于自己的配色方案的话以后可视化就可以随心所欲了。 方案接下来我将基于下面的几种颜色创建属于我自己的调色板 主要有以下几个方面： 将颜色与其对应的十六进制矢量联系起来 创建访问十六进制矢量的函数 调色板命名 访问调用调色板 创建兼容ggplot2的尺度函数 首先我们创建一个颜色变量123456789library(ggplot2)theme_set(theme_minimal())my_colors &lt;- c( `purple` = &quot;#7b0099&quot;, `yellow` = &quot;#ff9900&quot;, `black` = &quot;#221f1f&quot;, `white` = &quot;#f5f5f1&quot;, `red` = &quot;#e50914&quot;) 后续如果需要对颜色进行修改或添加都可以在这个颜色变量中进行。下面创建一个可以从该变量中提取颜色对应的十六进制的函数1234567891011#&apos; Function to extract my_colors as hex codes#&apos;#&apos; @param ... Character names of my_colors#&apos;my_cols &lt;- function(...)&#123; cols &lt;- c(...) if (is.null(cols)) return(my_colors) my_colors[cols]&#125; 此时我们可以十分方便获取颜色的十六进制，下面演示一下：1my_cols() 12## purple yellow black white red ## "#7b0099" "#ff9900" "#221f1f" "#f5f5f1" "#e50914" 1my_cols("purple") 12## purple ## "#7b0099" 1my_cols("purple","yellow") 12## purple yellow ## "#7b0099" "#ff9900" 1my_cols("yellow","purple") 12## yellow purple ## "#ff9900" "#7b0099" 此时我们可以在ggplot2中调用这些颜色123#使用gapminder包中的数据集gapminder来演示library(gapminder)head(gapminder) 123456789## # A tibble: 6 x 6## country continent year lifeExp pop gdpPercap## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;## 1 Afghanistan Asia 1952 28.8 8425333 779## 2 Afghanistan Asia 1957 30.3 9240934 821## 3 Afghanistan Asia 1962 32.0 10267083 853## 4 Afghanistan Asia 1967 34.0 11537966 836## 5 Afghanistan Asia 1972 36.1 13079460 740## 6 Afghanistan Asia 1977 38.4 14880372 786 123ggplot(gapminder, aes(gdpPercap, lifeExp))+ geom_point(color=my_cols("purple"), size=2, alpha=0.8)+ scale_x_log10() 创建调色板调色板就是一个颜色列表方便我们后面使用，将各种颜色组合搭配1234567my_palettes &lt;- list( `main` = my_cols(&quot;purple&quot;,&quot;yellow&quot;,&quot;red&quot;), `cool` = my_cols(&quot;purple&quot;,&quot;yellow&quot;), `hot` = my_cols(&quot;yellow&quot;,&quot;black&quot;,&quot;red&quot;), `mixed` = my_cols(&quot;purple&quot;,&quot;yellow&quot;,&quot;white&quot;,&quot;red&quot;), `bw` = my_cols(&quot;black&quot;,&quot;white&quot;)) 在这个颜色列表中实际上我们创建了好几种颜色组合，下面创建一个函数来访问并调用它们1234567891011#&apos; Return function to interpolate a my_palettes#&apos;#&apos; @param palette Character name of palette in my_palettes#&apos; @param reverse Boolean indicating whether the palette should be reversed#&apos; @param ... Additional arguments to pass to colorRampPalette()#&apos;my_pal &lt;- function(palette=&quot;main&quot;, reverse=FALSE, ...)&#123; pal &lt;- my_palettes[[palette]] if (reverse) pal &lt;- rev(pal) colorRampPalette(pal, ...)&#125; 该函数通过不同颜色组合名称从列表中获取一个颜色组合（默认条件下是main），同时可以设置是否颠倒颜色顺序，之后传递给函数colorRampPaette()创建调色板。因此其返回的是一个函数。1my_pal(&quot;cool&quot;) 123456789## function (n) ## &#123;## x &lt;- ramp(seq.int(0, 1, length.out = n))## if (ncol(x) == 4L) ## rgb(x[, 1L], x[, 2L], x[, 3L], x[, 4L], maxColorValue = 255)## else rgb(x[, 1L], x[, 2L], x[, 3L], maxColorValue = 255)## &#125;## &lt;bytecode: 0x55ade91b4b70&gt;## &lt;environment: 0x55ade91b3e20&gt; 通过这个函数可以基于调色板返回不同数目的颜色，进而可以在原始颜色之间创建多级颜色梯度1my_pal(&quot;cool&quot;)(10) 12## [1] "#7B0099" "#891188" "#982277" "#A73266" "#B54455" "#C45544" "#D36533"## [8] "#E17622" "#F08810" "#FF9900" 1pie(rep(1,10), col = my_pal("cool")(10)) 上图展示的10种颜色就是my_pal(&quot;cool&quot;)(10)返回的十六进制对应的颜色，这就为ggplot2中的尺度颜色函数创造了可能 Scales for ggplot2ggplot2中颜色映射有color和fill即颜色和填充。1234567891011121314151617181920212223242526272829303132#&apos; Color scale constructor for my_colors#&apos; #&apos; @param palette Character name of palette in my_palettes#&apos; @param discrete Boolean indicating whether color aesthetic is discrete or not#&apos; @param reverse Boolean indicating whether the palette should be reversed#&apos; @param ... Additional arguments passed to discrete_scale() or scale_color_gradientn(), used #&apos; #&apos; respectively when discrete is TRUE or FALSE#&apos; scale_color_my &lt;- function(palette=&quot;main&quot;, discrete=TRUE, reverse=FALSE, ...)&#123; pal &lt;- my_pal(palette = palette, reverse = reverse) if (discrete)&#123; discrete_scale(&quot;colour&quot;, paste0(&quot;my_&quot;, palette), palette = pal, ...) &#125;else&#123; scale_color_gradientn(colours = pal(256), ...) &#125;&#125;#&apos; Fill scale constructor for my_colors#&apos;#&apos; @param palette Character name of palette in my_palettes#&apos; @param discrete Boolean indicating whether color aesthetic is discrete or not#&apos; @param reverse Boolean indicating whether the palette should be reversed#&apos; @param ... Additional arguments passed to discrete_scale() or scale_color_gradientn(), used #&apos; #&apos; respectively when discrete is TRUE or FALSE#&apos; scale_fill_my &lt;- function(palette=&quot;main&quot;, discrete=TRUE, reverse=FALSE, ...)&#123; pal &lt;- my_pal(palette = palette, reverse = reverse) if (discrete)&#123; discrete_scale(&quot;fill&quot;,paste0(&quot;my_&quot;, palette), palette = pal, ...) &#125;else&#123; scale_fill_gradientn(colours = pal(256), ...) &#125;&#125; 上面每个函数都制定一个调色板（默认是main），调色板是基于离散变量或连续变量，以及是否颠倒颜色顺序，同时还传递给了相关的ggplot2函数。下面可以试试它们在绘图过程中的表现1234ggplot(gapminder,aes(gdpPercap, lifeExp, color=continent))+ geom_point(size=2, alpha=0.8)+ scale_x_log10()+ scale_color_my() 我们可以更换调色板试试 1234ggplot(gapminder,aes(gdpPercap, lifeExp, color=continent))+ geom_point(size=2, alpha=0.8)+ scale_x_log10()+ scale_color_my(palette = &quot;hot&quot;) 如果是连续变量的话123ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) + geom_point(size = 4, alpha = .8) + scale_color_my(discrete = FALSE, palette = &quot;bw&quot;, reverse = TRUE) 上面是颜色，下面试试填充1234ggplot(mpg, aes(manufacturer, fill = manufacturer)) + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_fill_my(palette = &quot;mixed&quot;, guide = &quot;none&quot;) 包的创建通过上面的内容可以看出，如果我们会创建包的话，将上述代码封装在一起再加上一些元素就形成了一个包，可以方便自己或他人后续使用。如果要创建包的话，可以学习Hadley Wickham的书R packages。 SessionInfo1sessionInfo() 12345678910111213141516171819202122232425262728293031## R version 3.4.3 (2017-11-30)## Platform: x86_64-pc-linux-gnu (64-bit)## Running under: Ubuntu 17.10## ## Matrix products: default## BLAS: /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3## ## locale:## [1] LC_CTYPE=zh_CN.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=zh_CN.UTF-8 LC_COLLATE=zh_CN.UTF-8 ## [5] LC_MONETARY=zh_CN.UTF-8 LC_MESSAGES=zh_CN.UTF-8 ## [7] LC_PAPER=zh_CN.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] gapminder_0.3.0 ggplot2_2.2.1 ## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.15 knitr_1.20 magrittr_1.5 munsell_0.4.3 ## [5] colorspace_1.3-2 rlang_0.2.0 stringr_1.3.0 plyr_1.8.4 ## [9] tools_3.4.3 grid_3.4.3 gtable_0.2.0 utf8_1.1.3 ## [13] cli_1.0.0 htmltools_0.3.6 assertthat_0.2.0 yaml_2.1.16 ## [17] lazyeval_0.2.1 rprojroot_1.3-2 digest_0.6.15 tibble_1.4.2 ## [21] crayon_1.3.4 evaluate_0.10.1 rmarkdown_1.8 labeling_0.3 ## [25] stringi_1.1.6 compiler_3.4.3 pillar_1.1.0 scales_0.5.0 ## [29] backports_1.1.2 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>调色板</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shell编程：运算符]]></title>
    <url>%2F2018%2F02%2F09%2FShell%E7%BC%96%E7%A8%8B%EF%BC%9A%E8%BF%90%E7%AE%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[简介Shell支持多种运算符： 算术运算符 布尔运算符 关系运算符 字符串运算符 文件测试运算符 原生bash不支持简单的数学运算，但是可以通过expr等来实现。例如两个数相加： 需要注意的是使用的是反引号`，而不是单引号’。另外表达式与运算符之间要有空格。 12345#!/bin/bash#创建测试脚本test.shadd=`expr 3 + 5`echo "两数之和为：$add" 运行脚本之后结果如下： 12$ ./test.sh 两数之和为：4 算术运算符算术运算符主要如下：假设a=10,b=20 运算符 说明 例子 + 加法 `expr \$a + \$b`结果为30 - 减法 `expr \$a + \$b`结果为-10 * 乘法 `expr \$a*\$b`结果为200 / 除法 `expr \$b/\$a`结果为2 % 取余 `expr \$b\%\$a`结果为0 = 赋值 a=$b将变量b的值赋值给a == 相等，用于比较两个数字是否相等，是则返回TRUE，否则返回FALSE [ \$a==\$b ]结果返回FALSE != 不相等 [ \$a!=\$b ]结果返回TRUE 注意的是表达式要放在括号之间，并且要有空格。 举个例子说明1234567891011121314151617181920212223242526272829#!/bin/bash#创建测试脚本test.shm=12n=5#加法val=`expr $m + $n`echo "m+n= $val"#减法val=`expr $m - $n`echo "m-n= $val"#乘法val=`expr $m \* $n`echo "m*n= $val"#乘法val=`expr $m / $n`echo "m/n= $val"#乘法val=`expr $m % $n`echo "m%n= $val"#相等if [ $m == $n ]then echo "m=n"fi#不相等if [ $m != $n ]then echo "m!=n" 运行脚本结果如下：1234567$ ./test.sh m+n= 17m-n= 7m*n= 60m/n= 2m%n= 2m!=n 关系运算符关系运算符只支持数字，假设a=10,b=20: 运算符 说明 例子 -eq 是否相等 [ \$a -eq \$b ]结果返回FALSE -ne 是否不相等 [ \$a -ne \$b ]结果返回TRUE -gt 左边是否大于右边 [ \$a -gt \$b ]结果返回FALSE -lt 左边是否小于是否右边 [ \$a -lt \$b ]结果返回TRUE -ge 左边是否大于等于右边 [ \$a -ge \$b ]结果返回FALSE -eq 左边是否小于等于右边 [ \$a -le \$b ]结果返回TRUE 举个例子说明123456789101112131415161718192021222324252627282930313233343536373839404142#!/bin/bash# 创建测试脚本test.sha=10b=20if [ $a -eq $b ]then echo "$a -eq $b : a 等于 b"else echo "$a -eq $b: a 不等于 b"fiif [ $a -ne $b ]then echo "$a -ne $b: a 不等于 b"else echo "$a -ne $b : a 等于 b"fiif [ $a -gt $b ]then echo "$a -gt $b: a 大于 b"else echo "$a -gt $b: a 不大于 b"fiif [ $a -lt $b ]then echo "$a -lt $b: a 小于 b"else echo "$a -lt $b: a 不小于 b"fiif [ $a -ge $b ]then echo "$a -ge $b: a 大于或等于 b"else echo "$a -ge $b: a 小于 b"fiif [ $a -le $b ]then echo "$a -le $b: a 小于或等于 b"else echo "$a -le $b: a 大于 b"fi 运行脚本结果如下：1234567$ ./test.sh 10 -eq 20: a 不等于 b10 -ne 20: a 不等于 b10 -gt 20: a 不大于 b10 -lt 20: a 小于 b10 -ge 20: a 小于 b10 -le 20: a 小于或等于 b 布尔运算符假设a=10,b=20 运算符 说明 例子 ！ 非运算 [ !false ]返回TRUE -o 或运算 [ \$a -lt 20 -o \$b -gt 100 ] 返回true。 -a 与运算 [ \$a -lt 20 -a \$b -gt 100 ] 返回false 举例说明123456789101112131415161718192021222324252627282930#!/bin/bash# 创建测试脚本test.sha=10b=20if [ $a != $b ]then echo "$a != $b : a 不等于 b"else echo "$a != $b: a 等于 b"fiif [ $a -lt 100 -a $b -gt 15 ]then echo "$a 小于 100 且 $b 大于 15 : 返回 true"else echo "$a 小于 100 且 $b 大于 15 : 返回 false"fiif [ $a -lt 100 -o $b -gt 100 ]then echo "$a 小于 100 或 $b 大于 100 : 返回 true"else echo "$a 小于 100 或 $b 大于 100 : 返回 false"fiif [ $a -lt 5 -o $b -gt 100 ]then echo "$a 小于 5 或 $b 大于 100 : 返回 true"else echo "$a 小于 5 或 $b 大于 100 : 返回 false"fi 运行脚本结果如下：12345$ ./test.sh 10 != 20 : a 不等于 b10 小于 100 且 20 大于 15 : 返回 true10 小于 100 或 20 大于 100 : 返回 true10 小于 5 或 20 大于 100 : 返回 false 逻辑运算符假设a=10,b=20 运算符 说明 例子 &amp;&amp; 逻辑的AND [[ \$a -lt 100 &amp;&amp; \$b -gt 100 ]] 返回 false \ \ 逻辑的OR [[ \$a -lt 100 \ \ \$b -gt 100 ]] 返回 true 举例说明12345678910111213141516171819#!/bin/bash# 创建测试脚本test.sha=10b=20if [[ $a -lt 100 &amp;&amp; $b -gt 100 ]]then echo "返回 true"else echo "返回 false"fiif [[ $a -lt 100 || $b -gt 100 ]]then echo "返回 true"else echo "返回 false"fi 运行脚本结果如下：123$ ./test.sh 返回 false返回 true 字符串运算符下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：运算符|说明|例子—|—-|—–=|相等|[ \$a = \$b ] 返回 false!=|不相等|[ \$a != \$b ] 返回 true-z|字符串长度是否为0|[ -z \$a ] 返回 false-n|字符串长度是否不为0|[ -n \$a ] 返回 truestr|字符串是否不为空|[ \$a ] 返回 true 举例说明123456789101112131415161718192021222324252627282930313233343536#!/bin/bash# 创建测试脚本test.sha="abc"b="efg"if [ $a = $b ]then echo "$a = $b : a 等于 b"else echo "$a = $b: a 不等于 b"fiif [ $a != $b ]then echo "$a != $b : a 不等于 b"else echo "$a != $b: a 等于 b"fiif [ -z $a ]then echo "-z $a : 字符串长度为 0"else echo "-z $a : 字符串长度不为 0"fiif [ -n $a ]then echo "-n $a : 字符串长度不为 0"else echo "-n $a : 字符串长度为 0"fiif [ $a ]then echo "$a : 字符串不为空"else echo "$a : 字符串为空"fi 运行脚本结果如下：123456$ ./test.sh abc = efg: a 不等于 babc != efg : a 不等于 b-z abc : 字符串长度不为 0-n abc : 字符串长度不为 0abc : 字符串不为空 文件运算符文件运算符主要用于检测文件属性。这里就不讲解了。 本文主要参考菜鸟教程 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>运算符</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用gganimate可视化R-Ladies发展情况]]></title>
    <url>%2F2018%2F02%2F08%2F%E5%88%A9%E7%94%A8gganimate%E5%8F%AF%E8%A7%86%E5%8C%96R-Ladies%E5%8F%91%E5%B1%95%E6%83%85%E5%86%B5%2F</url>
    <content type="text"><![CDATA[简介这篇博客主要基于d4tagirl,稍微有所修改。 数据加载12345library(pacman)p_load(tidyverse, gganomate, maps, ggthemes)rladies &lt;- read_csv(url(&quot;https://raw.githubusercontent.com/d4tagirl/R-Ladies-growth-maps/master/rladies.csv&quot;))%&gt;% select(-1)head(rladies) 123456789## # A tibble: 6 x 7## screen_name location created_at followers age_days lon lat## &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;## 1 RLadiesSF San Francis~ 2012-10-15 916 1673 -122 37.8## 2 RLadiesNYC New York 2016-09-01 309 256 - 74.0 40.7## 3 RLadiesIstanbul &lt;U+0130&gt;stanbul, T~ 2016-09-06 436 251 29.0 41.0## 4 RLadiesBCN Barcelona, ~ 2016-10-11 377 216 2.17 41.4## 5 RLadiesColumbus Columbus, OH 2016-10-04 179 223 - 83.0 40.0## 6 RLadiesBoston Boston, MA 2016-09-06 259 251 - 71.1 42.4 可视化主要是根据地理位置信息映射到地图上fig.height=18&#125;123456789101112131415161718192021ggplot()+ borders(&quot;world&quot;, color=&quot;gray85&quot;, fill=&quot;grey80&quot;)+ geom_point(data = rladies, aes(lon, lat, size=followers), color=&quot;purple&quot;, alpha=0.5)+ scale_size_continuous(range = c(8, 24), breaks = c(250, 500, 750, 1000))+ labs(size=&quot;Followers&quot;, title=&quot; The development of R-Ladies’ Twitter accounts&quot;,x=NULL,y=NULL)+ theme(text = element_text(family = &quot;Times New Roman&quot;, color = &quot;#EEEEEE&quot;), plot.title = element_text(size=40,color = &quot;#f9ba00&quot;), plot.subtitle = element_text(size=14), axis.ticks = element_blank(), axis.text = element_blank(), panel.grid = element_blank(), panel.background = element_rect(fill=&quot;#333333&quot;), plot.background = element_rect(fill = &quot;#333333&quot;), legend.position = c(0.18,0.36), legend.background = element_blank(), legend.key = element_blank(), legend.text = element_text(size = 28), legend.title = element_text(size=28, color = &quot;#f9ba00&quot;))+ annotate(geom = &quot;text&quot;, label=&quot;Made by Logos ytlogos.github.io\nOriginally from d4tagirl https://d4tagirl.com&quot;, x=70, y=-55, size=10, family=&quot;Helvetica Black&quot;, color=&quot;#f9ba00&quot;, hjust=&quot;left&quot;) 动画展示为了利用gganimate进行动态展示，需要构建一个映射变量：时间。同时为了使得可视化开始和结尾呈现的是空白，又构建了两个空白图层12ghost_points_ini &lt;- tibble(created_at=as.Date("2011-09-01"), followers=0, lon=0, lat=0)ghost_points_fin &lt;- tibble(created_at=seq(as.Date("2017-05-16"), as.Date("2017-05-30"),by="days"), followers=0, lon=0,lat=0) 添加frame映射12345678910111213141516171819202122232425map &lt;- ggplot()+ borders("world", color="gray85", fill="grey80")+ geom_point(data = rladies, aes(lon, lat, size=followers, frame=created_at, cumulative=TRUE), color="purple", alpha=0.5)+ scale_size_continuous(range = c(4, 16), breaks = c(250, 500, 750, 1000))+ geom_point(data = ghost_points_ini, aes(lon, lat, size=followers, frame=created_at, cumulative=TRUE), alpha=0)+ geom_point(data = ghost_points_fin, aes(lon, lat, size=followers, frame=created_at, cumulative=TRUE), alpha=0)+ labs(size="Followers", title="The development of R-Ladies’ Twitter accounts",x=NULL,y=NULL)+ theme(text = element_text(family = "Times New Roman", color = "#EEEEEE"), plot.title = element_text(size=28, color = "#f9ba00"), plot.subtitle = element_text(size=14), axis.ticks = element_blank(), axis.text = element_blank(), panel.grid = element_blank(), panel.background = element_rect(fill="#333333"), plot.background = element_rect(fill = "#333333"), legend.position = c(0.18,0.36), legend.background = element_blank(), legend.key = element_blank(), legend.text = element_text(size = 18), legend.title = element_text(size=24, color = "#f9ba00"))+ annotate(geom = "text", label="Made by Logos ytlogos.github.io\nOriginally from d4tagirl https://d4tagirl.com", x=70, y=-55, size=6, family="Helvetica Black", color="#f9ba00", hjust="left")animation::ani.options(interval=0.15, ani.width=1500, ani.height=800, units="in")gganimate::gganimate(map, filename = "d4tagirlmap.gif") SessionInfo1sessionInfo() 1234567891011121314151617181920212223242526272829303132333435363738394041## R version 3.4.3 (2017-11-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 16299)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] ggthemes_3.4.0 maps_3.2.0 BiocInstaller_1.28.0## [4] forcats_0.2.0 stringr_1.2.0 dplyr_0.7.4 ## [7] purrr_0.2.4 readr_1.1.1 tidyr_0.8.0 ## [10] tibble_1.4.2 ggplot2_2.2.1.9000 tidyverse_1.2.1 ## [13] pacman_0.4.6 ## ## loaded via a namespace (and not attached):## [1] reshape2_1.4.3 haven_1.1.1 lattice_0.20-35 ## [4] colorspace_1.3-2 htmltools_0.3.6 yaml_2.1.16 ## [7] utf8_1.1.3 rlang_0.1.6 pillar_1.1.0 ## [10] foreign_0.8-69 glue_1.2.0 modelr_0.1.1 ## [13] readxl_1.0.0 bindrcpp_0.2 bindr_0.1 ## [16] plyr_1.8.4 munsell_0.4.3 gtable_0.2.0 ## [19] cellranger_1.1.0 rvest_0.3.2 psych_1.7.8 ## [22] evaluate_0.10.1 labeling_0.3 knitr_1.19 ## [25] parallel_3.4.3 broom_0.4.3 Rcpp_0.12.15 ## [28] scales_0.5.0.9000 backports_1.1.2 jsonlite_1.5 ## [31] mnormt_1.5-5 hms_0.4.1 digest_0.6.15 ## [34] stringi_1.1.6 grid_3.4.3 rprojroot_1.3-2 ## [37] cli_1.0.0 tools_3.4.3 magrittr_1.5 ## [40] lazyeval_0.2.1 crayon_1.3.4 pkgconfig_2.0.1 ## [43] xml2_1.2.0 lubridate_1.7.1 assertthat_0.2.0 ## [46] rmarkdown_1.8 httr_1.3.1 rstudioapi_0.7 ## [49] R6_2.2.2 nlme_3.1-131 compiler_3.4.3 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>地图</tag>
        <tag>gganimate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用R语言绘制世界航班路线图]]></title>
    <url>%2F2018%2F02%2F07%2F%E5%88%A9%E7%94%A8R%E8%AF%AD%E8%A8%80%E7%BB%98%E5%88%B6%E4%B8%96%E7%95%8C%E8%88%AA%E7%8F%AD%E8%B7%AF%E7%BA%BF%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[简介本文基于NASA的夜间地图的基础上进行世界航班路线可视化，参考多篇博客以及可视化案例。 包加载本博客使用的包较多，利用pacman包里的p_load()函数进行加载12library(pacman)p_load(tidyverse, data.table, geosphere, grid, jpeg, plyr) 数据准备使用的数据来自于OpenFlights.org。 数据下载123456download.file("https://raw.githubusercontent.com/jpatokal/openflights/master/data/airlines.dat", destfile = "airlines.dat", mode = "wb")download.file("https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat", destfile = "airports.dat", mode = "wb")download.file("https://raw.githubusercontent.com/jpatokal/openflights/master/data/routes.dat", destfile = "routes.dat", mode = "wb") 数据导入123airlines &lt;- fread(&quot;airlines.dat&quot;, sep = &quot;,&quot;, skip = 1)airports &lt;- fread(&quot;airports.dat&quot;, sep = &quot;,&quot;)routes &lt;- fread(&quot;routes.dat&quot;, sep = &quot;,&quot;) 数据整理1234567891011121314151617181920#添加列名colnames(airlines) &lt;- c(&quot;airline_id&quot;, &quot;name&quot;, &quot;alias&quot;, &quot;iata&quot;, &quot;icao&quot;, &quot;callisign&quot;, &quot;country&quot;, &quot;active&quot;)colnames(airports) &lt;- c(&quot;airport_id&quot;, &quot;name&quot;, &quot;city&quot;, &quot;country&quot;,&quot;iata&quot;, &quot;icao&quot;, &quot;latitude&quot;, &quot;longitude&quot;,&quot;altitude&quot;, &quot;timezone&quot;,&quot;dst&quot;,&quot;tz_database_time_zone&quot;,&quot;type&quot;, &quot;source&quot;)colnames(routes) &lt;- c(&quot;airline&quot;, &quot;airline_id&quot;, &quot;source_airport&quot;, &quot;source_airport_id&quot;,&quot;destination_airport&quot;,&quot;destination_airport_id&quot;,&quot;codeshare&quot;, &quot;stops&quot;,&quot;equipment&quot;)#类型转换routes$airline_id &lt;- as.numeric(routes$airline_id)# airlines与routes数据融合flights &lt;- left_join(routes, airlines, by=&quot;airline_id&quot;)# flights与airports数据融合airports_orig &lt;- airports[,c(5,7,8)]colnames(airports_orig) &lt;- c(&quot;source_airport&quot;,&quot;source_airport_lat&quot;, &quot;source_airport_long&quot;)airports_dest &lt;- airports[, c(5, 7, 8)]colnames(airports_dest) &lt;- c(&quot;destination_airport&quot;, &quot;destination_airport_lat&quot;, &quot;destination_airport_long&quot;)flights &lt;- left_join(flights, airports_orig, by = &quot;source_airport&quot;)flights &lt;- left_join(flights, airports_dest, by = &quot;destination_airport&quot;)#剔除缺失值flights &lt;- na.omit(flights, cols = c(&quot;source_airport_long&quot;, &quot;source_airport_lat&quot;, &quot;destination_airport_long&quot;, &quot;destination_airport_lat&quot;))#最后数据如下head(flights[,c(1:5)]) 下面就是准备地理信息数据 本文主要是可视化地理信息上的点与点之间的连接，这可以通过geosphere包里的函数gcIntermediate()很轻松实现。具体使用方法可以参考这里 12345678910111213141516171819# 按航空公司拆分数据集flights_split &lt;- split(flights, flights$name)# Calculate intermediate points between each two locationsflights_all &lt;- lapply(flights_split, function(x) gcIntermediate(x[, c(&quot;source_airport_long&quot;, &quot;source_airport_lat&quot;)], x[, c(&quot;destination_airport_long&quot;, &quot;destination_airport_lat&quot;)], n=100, breakAtDateLine = FALSE, addStartEnd = TRUE, sp = TRUE))# 转换为数据框flights_fortified &lt;- lapply(flights_all, function(x) ldply(x@lines, fortify))# Unsplit listsflights_fortified &lt;- do.call(&quot;rbind&quot;, flights_fortified)# Add and clean column with airline namesflights_fortified$name &lt;- rownames(flights_fortified)flights_fortified$name &lt;- gsub(&quot;\\..*&quot;, &quot;&quot;, flights_fortified$name)# Extract first and last observations for plotting source and destination points (i.e., airports)flights_points &lt;- flights_fortified %&gt;% group_by(group) %&gt;% filter(row_number() == 1 | row_number() == n()) 可视化接下来就是进行可视化了，前面讲了我们只是在NASA提供的夜间地球图上面进行数据映射，所以第一我们需要获取该背景地图。 图片获取并渲染123456#下载图片download.file(&quot;https://www.nasa.gov/specials/blackmarble/2016/globalmaps/BlackMarble_2016_01deg.jpg&quot;, destfile = &quot;BlackMarble_2016_01deg.jpg&quot;, mode = &quot;wb&quot;)#加载并渲染图片earth &lt;- readJPEG(&quot;BlackMarble_2016_01deg.jpg&quot;, native = TRUE)earth &lt;- rasterGrob(earth, interpolate = TRUE) 数据映射由于航空公司十分多，就挑选几个有名的航空公司进行可视化。 Lufthansa(德国汉莎航空公司)12345678910111213141516171819ggplot() + annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) + geom_path(aes(long, lat, group = id, color = name), alpha = 0.0, size = 0.0, data = flights_fortified) + geom_path(aes(long, lat, group = id, color = name), alpha = 0.2, size = 0.3, color = &quot;#f9ba00&quot;, data = flights_fortified[flights_fortified$name == &quot;Lufthansa&quot;, ]) + geom_point(data = flights_points[flights_points$name == &quot;Lufthansa&quot;, ], aes(long, lat), alpha = 0.8, size = 0.1, colour = &quot;white&quot;) + theme(panel.background = element_rect(fill = &quot;#05050f&quot;, colour = &quot;#05050f&quot;), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_blank(), axis.text = element_blank(), axis.ticks.length = unit(0, &quot;cm&quot;), legend.position = &quot;none&quot;) + annotate(&quot;text&quot;, x = -150, y = -18, hjust = 0, size = 14, label = paste(&quot;Lufthansa&quot;), color = &quot;#f9ba00&quot;, family = &quot;Helvetica Black&quot;) + annotate(&quot;text&quot;, x = -150, y = -26, hjust = 0, size = 8, label = paste(&quot;Flight routes&quot;), color = &quot;white&quot;) + annotate(&quot;text&quot;, x = -150, y = -30, hjust = 0, size = 7, label = paste(&quot;ytlogos.github.io || NASA.gov || OpenFlights.org&quot;), color = &quot;white&quot;, alpha = 0.5) + coord_equal() Emirates(阿联酋航空公司)12345678910111213141516171819ggplot() + annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) + geom_path(aes(long, lat, group = id, color = name), alpha = 0.0, size = 0.0, data = flights_fortified) + geom_path(aes(long, lat, group = id, color = name), alpha = 0.2, size = 0.3, color = &quot;#ff0000&quot;, data = flights_fortified[flights_fortified$name == &quot;Emirates&quot;, ]) + geom_point(data = flights_points[flights_points$name == &quot;Emirates&quot;, ], aes(long, lat), alpha = 0.8, size = 0.1, colour = &quot;white&quot;) + theme(panel.background = element_rect(fill = &quot;#05050f&quot;, colour = &quot;#05050f&quot;), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_blank(), axis.text = element_blank(), axis.ticks.length = unit(0, &quot;cm&quot;), legend.position = &quot;none&quot;) + annotate(&quot;text&quot;, x = -150, y = -18, hjust = 0, size = 14, label = paste(&quot;Emirates&quot;), color = &quot;#ff0000&quot;, family = &quot;Fontin&quot;) + annotate(&quot;text&quot;, x = -150, y = -26, hjust = 0, size = 8, label = paste(&quot;Flight routes&quot;), color = &quot;white&quot;) + annotate(&quot;text&quot;, x = -150, y = -30, hjust = 0, size = 7, label = paste(&quot;ytlogos.github.io || NASA.gov || OpenFlights.org&quot;), color = &quot;white&quot;, alpha = 0.5) + coord_equal() British Airways(英国航空公司)12345678910111213141516171819ggplot() + annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) + geom_path(aes(long, lat, group = id, color = name), alpha = 0.0, size = 0.0, data = flights_fortified) + geom_path(aes(long, lat, group = id, color = name), alpha = 0.2, size = 0.3, color = &quot;#075aaa&quot;, data = flights_fortified[flights_fortified$name == &quot;British Airways&quot;, ]) + geom_point(data = flights_points[flights_points$name == &quot;British Airways&quot;, ], aes(long, lat), alpha = 0.8, size = 0.1, colour = &quot;white&quot;) + theme(panel.background = element_rect(fill = &quot;#05050f&quot;, colour = &quot;#05050f&quot;), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_blank(), axis.text = element_blank(), axis.ticks.length = unit(0, &quot;cm&quot;), legend.position = &quot;none&quot;) + annotate(&quot;text&quot;, x = -150, y = -18, hjust = 0, size = 14, label = paste(&quot;BRITISH AIRWAYS&quot;), color = &quot;#075aaa&quot;, family = &quot;Baker Signet Std&quot;) + annotate(&quot;text&quot;, x = -150, y = -26, hjust = 0, size = 8, label = paste(&quot;Flight routes&quot;), color = &quot;white&quot;) + annotate(&quot;text&quot;, x = -150, y = -30, hjust = 0, size = 7, label = paste(&quot;ytlogos.github.io || NASA.gov || OpenFlights.org&quot;), color = &quot;white&quot;, alpha = 0.5) + coord_equal() Air China(中国国航)12345678910111213141516171819ggplot() + annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) + geom_path(aes(long, lat, group = id, color = name), alpha = 0.0, size = 0.0, data = flights_fortified) + geom_path(aes(long, lat, group = id, color = name), alpha = 0.2, size = 0.3, color = &quot;#F70C15&quot;, data = flights_fortified[flights_fortified$name == &quot;Air China&quot;, ]) + geom_point(data = flights_points[flights_points$name == &quot;Air China&quot;, ], aes(long, lat), alpha = 0.8, size = 0.1, colour = &quot;white&quot;) + theme(panel.background = element_rect(fill = &quot;#05050f&quot;, colour = &quot;#05050f&quot;), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_blank(), axis.text = element_blank(), axis.ticks.length = unit(0, &quot;cm&quot;), legend.position = &quot;none&quot;) + annotate(&quot;text&quot;, x = -150, y = -18, hjust = 0, size = 14, label = paste(&quot;Air China&quot;), color = &quot;#F70C15&quot;, family = &quot;Times New Roman&quot;) + annotate(&quot;text&quot;, x = -150, y = -26, hjust = 0, size = 8, label = paste(&quot;Flight routes&quot;), color = &quot;white&quot;) + annotate(&quot;text&quot;, x = -150, y = -30, hjust = 0, size = 7, label = paste(&quot;ytlogos.github.io || NASA.gov || OpenFlights.org&quot;), color = &quot;white&quot;, alpha = 0.5) + coord_equal() China Southern Airlines(中国南航)12345678910111213141516171819ggplot() + annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) + geom_path(aes(long, lat, group = id, color = name), alpha = 0.0, size = 0.0, data = flights_fortified) + geom_path(aes(long, lat, group = id, color = name), alpha = 0.2, size = 0.3, color = &quot;#004D9D&quot;, data = flights_fortified[flights_fortified$name == &quot;China Southern Airlines&quot;, ]) + geom_point(data = flights_points[flights_points$name == &quot;China Southern Airlines&quot;, ], aes(long, lat), alpha = 0.8, size = 0.1, colour = &quot;white&quot;) + theme(panel.background = element_rect(fill = &quot;#05050f&quot;, colour = &quot;#05050f&quot;), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_blank(), axis.text = element_blank(), axis.ticks.length = unit(0, &quot;cm&quot;), legend.position = &quot;none&quot;) + annotate(&quot;text&quot;, x = -150, y = -18, hjust = 0, size = 14, label = paste(&quot;China Southern Airlines&quot;), color = &quot;#004D9D&quot;, family = &quot;Times New Roman&quot;) + annotate(&quot;text&quot;, x = -150, y = -26, hjust = 0, size = 8, label = paste(&quot;Flight routes&quot;), color = &quot;white&quot;) + annotate(&quot;text&quot;, x = -150, y = -30, hjust = 0, size = 7, label = paste(&quot;ytlogos.github.io || NASA.gov || OpenFlights.org&quot;), color = &quot;white&quot;, alpha = 0.5) + coord_equal() 一次性映射多家航空公司航行路线123456789101112131415161718192021222324252627282930#抽取数据集flights_subset &lt;- c(&quot;Lufthansa&quot;, &quot;Emirates&quot;, &quot;British Airways&quot;)flights_subset &lt;- flights_fortified[flights_fortified$name %in% flights_subset, ]flights_subset_points &lt;- flights_subset%&gt;% group_by(group)%&gt;% filter(row_number()==1|row_number()==n())#可视化ggplot() + annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) + geom_path(aes(long, lat, group = id, color = name), alpha = 0.2, size = 0.3, data = flights_subset) + geom_point(data = flights_subset_points, aes(long, lat), alpha = 0.8, size = 0.1, colour = &quot;white&quot;) + scale_color_manual(values = c(&quot;#f9ba00&quot;, &quot;#ff0000&quot;, &quot;#075aaa&quot;)) + theme(panel.background = element_rect(fill = &quot;#05050f&quot;, colour = &quot;#05050f&quot;), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_blank(), axis.text = element_blank(), axis.ticks.length = unit(0, &quot;cm&quot;), legend.position = &quot;none&quot;) + annotate(&quot;text&quot;, x = -150, y = -4, hjust = 0, size = 14, label = paste(&quot;Lufthansa&quot;), color = &quot;#f9ba00&quot;, family = &quot;Helvetica Black&quot;) + annotate(&quot;text&quot;, x = -150, y = -11, hjust = 0, size = 14, label = paste(&quot;Emirates&quot;), color = &quot;#ff0000&quot;, family = &quot;Fontin&quot;) + annotate(&quot;text&quot;, x = -150, y = -18, hjust = 0, size = 14, label = paste(&quot;BRITISH AIRWAYS&quot;), color = &quot;#075aaa&quot;, family = &quot;Baker Signet Std&quot;) + annotate(&quot;text&quot;, x = -150, y = -30, hjust = 0, size = 8, label = paste(&quot;Flight routes&quot;), color = &quot;white&quot;) + annotate(&quot;text&quot;, x = -150, y = -34, hjust = 0, size = 7, label = paste(&quot;ytlogos.github.io || NASA.gov || OpenFlights.org&quot;), color = &quot;white&quot;, alpha = 0.5) + coord_equal() SessionInfo1sessionInfo() 123456789101112131415161718192021222324252627282930R version 3.4.3 (2017-11-30)Platform: x86_64-w64-mingw32/x64 (64-bit)Running under: Windows &gt;= 8 x64 (build 9200)Matrix products: defaultlocale:[1] LC_COLLATE=Chinese (Simplified)_China.936 LC_CTYPE=Chinese (Simplified)_China.936 [3] LC_MONETARY=Chinese (Simplified)_China.936 LC_NUMERIC=C [5] LC_TIME=Chinese (Simplified)_China.936 attached base packages:[1] grid stats graphics grDevices utils datasets methods base other attached packages: [1] plyr_1.8.4 jpeg_0.1-8 geosphere_1.5-7 data.table_1.10.4-3 [5] forcats_0.2.0 stringr_1.2.0 dplyr_0.7.4 purrr_0.2.4 [9] readr_1.1.1 tidyr_0.8.0 tibble_1.4.2 ggplot2_2.2.1.9000 [13] tidyverse_1.2.1 pacman_0.4.6 loaded via a namespace (and not attached): [1] Rcpp_0.12.15 cellranger_1.1.0 pillar_1.1.0 compiler_3.4.3 bindr_0.1 [6] tools_3.4.3 lubridate_1.7.1 jsonlite_1.5 nlme_3.1-131 gtable_0.2.0 [11] lattice_0.20-35 pkgconfig_2.0.1 rlang_0.1.6 psych_1.7.8 cli_1.0.0 [16] rstudioapi_0.7 yaml_2.1.16 parallel_3.4.3 haven_1.1.1 bindrcpp_0.2 [21] xml2_1.2.0 httr_1.3.1 knitr_1.19 hms_0.4.1 glue_1.2.0 [26] R6_2.2.2 readxl_1.0.0 foreign_0.8-69 sp_1.2-7 modelr_0.1.1 [31] reshape2_1.4.3 magrittr_1.5 scales_0.5.0.9000 rvest_0.3.2 assertthat_0.2.0 [36] mnormt_1.5-5 colorspace_1.3-2 stringi_1.1.6 lazyeval_0.2.1 munsell_0.4.3 [41] broom_0.4.3 crayon_1.3.4 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化学习笔记之gganimate包]]></title>
    <url>%2F2018%2F02%2F06%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bgganimate%E5%8C%85%2F</url>
    <content type="text"><![CDATA[简介gganimate包是ggplot2的扩展包，主要用于绘制动画。它在ggplot2的基础上了补充了一个美学映射frame，就像x,y,size,color,fill一样进行映射。 安装12if(!require(devtools)) install.packages("devtools")devtools::install_github("dgrtwo/gganimate") 需要注意的是这个包依赖于ImageMagick来产生动画，如果自行安装的话在调用ImageMagick很容易出错，所以推荐在RStudio里面安装。 12install.packages("installr")installr::install.ImageMagick("http://www.imagemagick.org/script/download.php") 安装好之后以管理员身份运行RStudio 可视化这里我们使用gapminder包里的数据集gapminder进行可视化12345library(gapminder)library(ggplot2)library(gganimate)theme_set(theme_bw())head(gapminder) 123456789# A tibble: 6 x 6 country continent year lifeExp pop gdpPercap &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;1 Afghanistan Asia 1952 28.8 8425333 7792 Afghanistan Asia 1957 30.3 9240934 8213 Afghanistan Asia 1962 32.0 10267083 8534 Afghanistan Asia 1967 34.0 11537966 8365 Afghanistan Asia 1972 36.1 13079460 7406 Afghanistan Asia 1977 38.4 14880372 786 1234p &lt;- ggplot(gapminder, aes(gdpPercap, lifeExp, size=pop, color=continent,frame=year))+ geom_point()+ scale_x_log10() gganimate(p) 不管动画中的图形如何移动，坐标轴、图例等都是固定的。 定制化将gganimate与ggplot2结合起来可以定制化很多复杂的动画 12345p2 &lt;- ggplot(gapminder, aes(gdpPercap, lifeExp, size=pop))+ geom_point()+ geom_point(aes(frame=year), color="red")+ scale_x_log10()gganimate(p2) 如果要绘制累积效果图，gganimate提供了cumalative参数，这对于路径图来说十分是有效的12345p3 &lt;- ggplot(gapminder, aes(gdpPercap, lifeExp, frame=year, color=continent))+ geom_path(aes(cumulative=TRUE, group=country))+ scale_x_log10()+ facet_wrap(~continent)gganimate(p3) 一般来说我们都是将时间映射给frame，这也符合我们的直觉，但是这并不意味着我们只能将时间映射给frame，我们可以将任何想要的变量映射给frame。 1234p4 &lt;- ggplot(gapminder, aes(gdpPercap, lifeExp, size=pop, frame=continent))+ geom_point(color="blue")+ scale_x_log10()gganimate(p4) 需要注意的是如何我们绘制的图形涉及到统计汇总比如geom_smooth()，那么在geom_smooth()图层中需要添加group映射。 123456p5 &lt;- ggplot(gapminder,aes(gdpPercap, lifeExp, size=pop, frame=year))+ geom_point()+ geom_smooth(aes(group=year),method = "lm", show.legend = FALSE)+ facet_wrap(~continent, scales = "free")+ scale_x_log10()gganimate(p5) 最后如果需要控制动画播放速度，使用interval参数控制 1gganimate(p, interval = .2) SessionInfo1sessionInfo() 1234567891011121314151617181920212223242526272829303132R version 3.4.3 (2017-11-30)Platform: x86_64-w64-mingw32/x64 (64-bit)Running under: Windows &gt;= 8 x64 (build 9200)Matrix products: defaultlocale:[1] LC_COLLATE=Chinese (Simplified)_China.936 [2] LC_CTYPE=Chinese (Simplified)_China.936 [3] LC_MONETARY=Chinese (Simplified)_China.936[4] LC_NUMERIC=C [5] LC_TIME=Chinese (Simplified)_China.936 attached base packages:[1] stats graphics grDevices utils datasets methods [7] base other attached packages:[1] gganimate_0.1.0.9000 ggplot2_2.2.1.9000 [3] gapminder_0.3.0 loaded via a namespace (and not attached): [1] Rcpp_0.12.15 rstudioapi_0.7 magrittr_1.5 [4] munsell_0.4.3 colorspace_1.3-2 rlang_0.1.6 [7] stringr_1.2.0 plyr_1.8.4 tools_3.4.3 [10] grid_3.4.3 gtable_0.2.0 utf8_1.1.3 [13] cli_1.0.0 withr_2.1.1.9000 htmltools_0.3.6 [16] yaml_2.1.16 lazyeval_0.2.1 assertthat_0.2.0 [19] digest_0.6.15 tibble_1.4.2 crayon_1.3.4 [22] base64enc_0.1-3 animation_2.5 labeling_0.3 [25] stringi_1.1.6 compiler_3.4.3 pillar_1.1.0 [28] installr_0.19.0 scales_0.5.0.9000 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>gganimate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化学习笔记之ggridges包]]></title>
    <url>%2F2018%2F02%2F05%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bggridges%E5%8C%85%2F</url>
    <content type="text"><![CDATA[简介ggridges包主要用来绘制山峦图。尤其是针对时间或者空间分布份可视化具有十分好的效果。ggridges主要提供两个几何图像函数： geom_ridgeline():主要绘制山脊线图 geom_density_ridges()：主要根据密度绘制山脊线图 具体用法可以参考官方文档 geom_ridgeline()1234567library(ggridges)library(tidyverse)library(gridExtra)my_data &lt;- data.frame(x=1:5, y=rep(1,5), height=c(0,1,-1,3,2))plot_base &lt;- ggplot(my_data, aes(x, y, height=height))grid.arrange(plot_base+geom_ridgeline(), plot_base+geom_ridgeline(min_height=-2), ncol=2) geom_density_ridges()geom_density_ridges()函数首先会根据数据计算密度然后绘图，此时美学映射height没有必要写入函数中。下面使用lincoln_weather数据集。 12library(viridis)head(lincoln_weather[ ,1:4]) 123456789## # A tibble: 6 x 4## CST `Max Temperature [F]` `Mean Temperature [F]` `Min Temperature ~## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;## 1 2016-1-1 37 24 11## 2 2016-1-2 41 23 5## 3 2016-1-3 37 23 8## 4 2016-1-4 30 17 4## 5 2016-1-5 38 29 19## 6 2016-1-6 34 33 32 123456789ggplot(lincoln_weather, aes(x=`Mean Temperature [F]`, y=`Month`, fill=..x..))+ geom_density_ridges_gradient(scale=3, rel_min_height=0.01, gradient_lwd = 1.)+ scale_x_continuous(expand = c(0.01, 0))+ scale_y_discrete(expand = c(0.01,0))+ scale_fill_viridis(name="Temp. [F]", option = "C")+ labs(title="Temperature in Lincoln NE", subtitle="Mean temperature (Fahrenheit) by month for 2016\nData:Orogin CSV from the Weather Underground ")+ theme_ridges(font_size = 13, grid = FALSE)+ theme(axis.title.y = element_blank()) cyclinal scales为了使得ggridges绘制的图形可视化效果最好，同时为了减少用户对颜色设置的困难，作者提供了cyclinal scales用于颜色轮转映射。1234ggplot(diamonds, aes(x=price, y=cut, fill=cut))+ geom_density_ridges(scale=4)+ scale_fill_cyclical(values = c(&quot;blue&quot;, &quot;green&quot;))+ theme_ridges(grid = FALSE) 默认的，cyclinal scales为了防止误解是不绘制图例的，但是可以通过选项guide=&quot;legend&quot;添加图例。1234ggplot(diamonds, aes(x=price, y=cut, fill=cut))+ geom_density_ridges(scale=4)+ scale_fill_cyclical(values = c(&quot;blue&quot;, &quot;green&quot;), guide=&quot;legend&quot;)+ theme_ridges(grid = FALSE) 跟ggplot2一样，图例是可以修改的,其他参数比如大小、透明度、形状等都是可以通过cyclinal scales修改。123456ggplot(diamonds, aes(x=price, y=cut, fill=cut))+ geom_density_ridges(scale=4)+ scale_fill_cyclical(values = c(&quot;blue&quot;, &quot;green&quot;), guide=&quot;legend&quot;, labels=c(&quot;Fair&quot;=&quot;blue&quot;, &quot;Good&quot;=&quot;green&quot;), name=&quot;Fill colors&quot;)+ theme_ridges(grid = FALSE) 还有很多用法有兴趣的可以查看官方文档继续学习。 SessionInfo1sessionInfo() 1234567891011121314151617181920212223242526272829303132333435363738394041## R version 3.4.3 (2017-11-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 16299)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] viridis_0.5.0 viridisLite_0.3.0 gridExtra_2.3 ## [4] forcats_0.2.0 stringr_1.2.0 dplyr_0.7.4 ## [7] purrr_0.2.4 readr_1.1.1 tidyr_0.8.0 ## [10] tibble_1.4.2 tidyverse_1.2.1 ggridges_0.4.1.9990## [13] ggplot2_2.2.1.9000 ## ## loaded via a namespace (and not attached):## [1] reshape2_1.4.3 haven_1.1.1 lattice_0.20-35 ## [4] colorspace_1.3-2 htmltools_0.3.6 yaml_2.1.16 ## [7] utf8_1.1.3 rlang_0.1.6 pillar_1.1.0 ## [10] foreign_0.8-69 glue_1.2.0 modelr_0.1.1 ## [13] readxl_1.0.0 bindrcpp_0.2 bindr_0.1 ## [16] plyr_1.8.4 munsell_0.4.3 gtable_0.2.0 ## [19] cellranger_1.1.0 rvest_0.3.2 psych_1.7.8 ## [22] evaluate_0.10.1 labeling_0.3 knitr_1.19 ## [25] parallel_3.4.3 broom_0.4.3 Rcpp_0.12.15 ## [28] scales_0.5.0.9000 backports_1.1.2 jsonlite_1.5 ## [31] mnormt_1.5-5 hms_0.4.1 digest_0.6.15 ## [34] stringi_1.1.6 grid_3.4.3 rprojroot_1.3-2 ## [37] cli_1.0.0 tools_3.4.3 magrittr_1.5 ## [40] lazyeval_0.2.1 crayon_1.3.4 pkgconfig_2.0.1 ## [43] xml2_1.2.0 lubridate_1.7.1 assertthat_0.2.0 ## [46] rmarkdown_1.8 httr_1.3.1 rstudioapi_0.7 ## [49] R6_2.2.2 nlme_3.1-131 compiler_3.4.3 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>ggridges</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shell编程：数组]]></title>
    <url>%2F2018%2F02%2F04%2FShell%E7%BC%96%E7%A8%8B%EF%BC%9A%E6%95%B0%E7%BB%84%2F</url>
    <content type="text"><![CDATA[数组数组中可以存放多个值。Bash只支持一维数组，初始化时无需定义数组大小，数组元素下标从0开始。Shell数组用括号表示，元素之间由空号隔开： 1array_name=(value1 value2 ... valuen) 实例创建数据12#!/bin/bashmy_array=(A B "C" D) 也可以通过下标赋值来定义数组 123array_name[0]=value0array_name[1]=value1array_name[2]=value2 读取数组读取数组的一般格式为： 1$&#123;array_name[index]&#125; 现在创建一个脚本test.sh来演示一下： 1234567#！/bin/bash#创建脚本test.shmy_array=(A B "C" D)echo "第一个元素为：$&#123;my_array[0]&#125;"echo "第二个元素为：$&#123;my_array[1]&#125;"echo "第三个元素为：$&#123;my_array[2]&#125;"echo "第四个元素为：$&#123;my_array[3]&#125;" 执行脚本结果如下123456$ chmod +x test.sh $ ./test.sh 第一个元素为：A第二个元素为：B第三个元素为：C第四个元素为：D 获取数组中所有元素使用@或者*可以获取数组中的所有元素 12345678910#!/bin/bash# 创建脚本test.shmy_array[0]=Amy_array[1]=Bmy_array[2]=Cmy_array[3]=Decho "数组的元素为: $&#123;my_array[*]&#125;"echo "数组的元素为: $&#123;my_array[@]&#125;" 执行脚本结果如下：123$ ./test.sh 数组的元素为: A B C D数组的元素为: A B C D 获取数组长度获取数组长度的方法与获取字符串长度的方法相同 12345678910#!/bin/bash# 创建脚本test.shmy_array[0]=Amy_array[1]=Bmy_array[2]=Cmy_array[3]=Decho "数组元素个数为: $&#123;#my_array[*]&#125;"echo "数组元素个数为: $&#123;#my_array[@]&#125;" 执行脚本结果如下123$ ./test.sh 数组元素个数为: 4数组元素个数为: 4 数组的值也可以写入变量123456789#!/bin/bash# 创建脚本test.shA=1my_array=($A B C D)echo "第一个元素为：$&#123;my_array[0]&#125;"echo "第二个元素为：$&#123;my_array[1]&#125;"echo "第三个元素为：$&#123;my_array[2]&#125;"echo "第四个元素为：$&#123;my_array[3]&#125;" 执行脚本结果如下12345$ ./test.sh 第一个元素为：1第二个元素为：B第三个元素为：C第四个元素为：D 数组下标也可以为变量1234567#!/bin/bash# 创建脚本test.shmy_array=(A B C D)i=2echo $&#123;my_array[i]&#125; 执行脚本结果如下 12$ ./test.sh C 数组遍历这里讲解几种方法用于数据遍历 123456789101112131415161718192021222324252627282930313233343536373839404142#!/bin/bash# 创建演示脚本test.shmy_array=(A B C D E F G)echo "---------for循环遍历数组-----------"for i in $&#123;my_array[@]&#125;do echo $idoneecho "--------while循环遍历数组，使用let i++自增-------------"i=0#注意[与$之间要有空格，否则报错,下同while [ $i -lt $&#123;#my_array[@]&#125; ]do echo $&#123;my_array[$i]&#125; let i++doneecho "-------while循环遍历数组，使用let "n++ "自增：双引号可有可无，推荐加上双引号-----------"n=0while [ $n -lt $&#123;#my_array[@]&#125; ]do echo $&#123;my_array[$n]&#125; let "n++"doneecho "-----------while循环遍历数组，使用let m+=1自增--------------"m=0while [ $m -lt $&#123;#my_array[@]&#125; ]do echo $&#123;my_array[$m]&#125; let m+=1doneecho "------------------while循环遍历数组，使用a=$[$a+1]自增------------------"a=0while [ $a -lt $&#123;#my_array[@]&#125; ]do echo $&#123;my_array[$a]&#125; a=$[$a+1]done 执行脚本结果如下1234567891011121314151617181920212223242526272829303132333435363738394041$ ./test.sh ---------for循环遍历数组-----------ABCDEFG--------while循环遍历数组，使用let i++自增-------------ABCDEFG-------while循环遍历数组，使用let n++ 自增：双引号可有可无，推荐加上双引号-----------ABCDEFG-----------while循环遍历数组，使用let m+=1自增--------------ABCDEFG------------------while循环遍历数组，使用a=$[$a+1]自增------------------ABCDEFG 可以看出各种遍历方法大同小异，区别就在于自增方式的不同 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shell编程：传参]]></title>
    <url>%2F2018%2F02%2F03%2FShell%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BC%A0%E5%8F%82%2F</url>
    <content type="text"><![CDATA[shell传递参数执行shell脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n代表数字，1为执行脚本的第一个参数，2为第二个，以此类推。 实例下面实例我们向脚本传递三个参数并分别输出，其中$0为执行的文件名：新建一个脚本canshu.sh 123456#!/bin/bashecho "Shell 传递参数实例！"echo "执行的文件名：$0"echo "第一个参数为：$1"echo "第二个参数为：$2"echo "第三个参数为：$3" 运行：123456$ ./canshu.sh 1 2 3Shell 传递参数实例！执行的文件名：./canshu.sh第一个参数为：1第二个参数为：2第三个参数为：3 特殊字符处理参数 参数处理 说明 $# 传递到脚本的参数个数 $* 以一个单字符串显示所有向脚本传递的参数,以”$1 $2 … $n”输出所有参数 $$ 脚本运行的当前进程ID号 $! 后台运行的最后一个进程ID号 $@ 类似于$*,但是以”$1” “\$2” … “\$n”输出参数 $- 显示shell使用的当前选项 $? 显示最后命令的退出状态。0表示没有错误，其他任何输出表明有错误 修改上述脚本canshu.sh12345#!/bin/bashecho "Shell 传递参数实例！"echo "第一个参数为：$1"echo "参数个数为：$#"echo "传递的参数作为一个字符串显示：$*" 运行：12345$ ./canshu.sh 1 2 3Shell 传递参数实例！第一个参数为：1参数个数为：3传递的参数作为一个字符串显示：1 2 3 需要注意的是$*与\$@的区别 相同点：都是引用所有参数 不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数1、2、3，则”*”等价于”1 2 3”（传递了一个参数），而”@”等价于”1”,”2”,”3”(传递了三个参数) 下面通过一个脚本来说明,新建脚本compare.sh12345678910#!/bin/bashecho "-- \$* 演示 ---"for i in "$*";doecho $idoneecho "-- \$@ 演示 ---"for i in "$@";doecho $idone 运行脚本1234567$ ./compare.sh 1 2 3-- $* 演示 ---1 2 3-- $@ 演示 ---123 区别一目了然。 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/]]></content>
      <categories>
        <category>Shell</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Shell编程：变量]]></title>
    <url>%2F2018%2F02%2F02%2FShell%E7%BC%96%E7%A8%8B%EF%BC%9A%E5%8F%98%E9%87%8F%2F</url>
    <content type="text"><![CDATA[Shell变量定义变量时，变量名不加美元符号$，如：1$ my_name="logos" 需要注意的是，变量名与等号之间不能有空格。同时变量命名遵循以下规则： 只能使用英文字母，数字与下划线，首个字符不能以数字开头 中间不能有空格，可以使用下划线 不能使用标点符号 不能使用bash里的关键字 使用变量使用已经定义过的变量只需在变量名前加美元符号$即可12345$ echo $my-name$ echo $my_namelogos$ echo $&#123;my_name&#125;logos 变量名外面的花括号是可选的，加花括号是为了帮助解释器识别变量边界，因此推荐使用花括号。另已经定义过的变量可以重新被定义。 只读变量使用readonly命令可以将变量定义为只读变量，只读变量的值不能被改变1234$ my_name="logos"$ readonly my_name$ my_name="other"zsh: read-only variable: my_name 删除变量使用unset命令可以删除变量，但是无法删除只读变量1$ unset my_name 变量类型运行shell时，会同时存在三种变量 局部变量：局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量 环境变量：所有程序包括shell启动的程序都能访问环境变量 shell变量：由shell设置的特殊变量。shell变量中一部分是局部变量，一部分是环境变量。这些变量保证shell的正常运行 shell字符串字符串是最常用的数据类型，可以用单引号、双引号，也可以不用引号。 单引号1$ str='This is a string' 单引号字符串的限制： 单引号里的任意字符都会原样输出，单引号字符串中的变量是无效的 单引号字符串中不能出现单引号,使用转义符也没用 双引号1234$ my_name='logos'$ str="Hello, I know you are \"$&#123;my_name&#125;\"! \n"$ echo $&#123;str&#125;Hello, I know you are "logos"! 双引号的优点： 双引号里面可以有变量 双引号里可以出现转义符 拼接字符串新建一个脚本string.sh12345#!/bin/bashmy_name="logos"greeting="hello, "$my_name" !"greeting_1="hello, $&#123;my_name&#125; !"echo $greeting $greeting_1 运行脚本12$ bash string.shhello, logos ! hello, logos ! 获取字符串长度123$string="abcde"$echo $&#123;#string&#125;5 计算字符串长度也可以用length 12$ expr length "$url"26 字符串截取字符串截取主要有4个截取符：#、##、%、%%：删除包含了指定的字符 #、##表示从左边开始截取，#表示从左边删除到指定的第一个字符；##表示从左边删除到最后一个指定的字符 %、%%表示从右边开始删除，%表示从右边删除到指定的第一个字符；%%表示从右边删除到最后一个指定的字符 linux的字符串截取有八种方法 假设我们有变量url=https://ytlogos.github.io/ #截取，删除左边字符，保留右边字符12$ echo $&#123;url#*//&#125;ytlogos.github.io/ 其中url是变量名，#是字符截取运算符，*//表示从左边开始删除第一个//及其左边所有字符，即删除https://。 ##截取，删除左边字符，保留右边字符1$ echo $&#123;url##*/&#125; ##*/表示从左边开始删除指定的最后一个字符/及其左边所有字符，所以上述结果就是空的。 %截取，删除右边字符，保留左边字符12$ echo $&#123;url%/*&#125;https://ytlogos.github.io %/*表示从右边开始删除第一个/及其右边字符 %%截取，删除右边字符，保留左边字符12$ echo $&#123;url%%/*&#125;https: %%表示从右边开始删除最后一个/及其右边的字符 从左边第几个字符开始及字符个数12$ echo $&#123;url:0:5&#125;https 上述命令表示从左边第一个字符开始截取5个字符 从左边开始第几个字符开始一直到结束12$ echo $&#123;url:5&#125;://ytlogos.github.io/ 从右边第几个字符开始及字符个数12$ echo $&#123;url:0-4:3&#125;.io 上述命令表示从右边第四个字符开始向右截取3个字符 从右边第几个字符开始一直到结束12$ echo $&#123;url:0-7&#125;hub.io/ 左边第一个字符用0表示，右边第一个字符用0-1表示 查找子字符串查找字符g的位置12$ echo `expr index "$url" g`13 如果字符串中不含那个字符的话，结果显示为0，另外如果查找多个字符的话只显示排在前面的字符 还有一点需要注意的是上面的是反引号`而不是单引号’ 12$ echo `expr index "$url" gt`2 shell数组bash支持一维数组（不支持多维数组），并且没有限定数组大小，数组元素下标从0开始，可以是整数或算术表达式。 定义数组shell中数组的定义用括号表示，数组元素用空格分隔开。定义数组形式如下： 1数组名=(值1 值2 ... 值n) 具体如下：1array_name=(v0 v1 v2 v3 v4 v5) 或12345678array_name=( v0 v1 v2 v3 v4 v5) 还可以通过赋值单独定义数组各个分量 12345array_name[0]=v0array_name[1]=v1... 可以不使用连续的下标，而且下标范围没有限制 数组读取数组读取的一帮格式如下：1$&#123;数组名[下标]&#125; 12$ echo $&#123;array_name[2]&#125;v1 使用@符号可以获取数组中所有元素12$ echo $&#123;array_name[@]&#125;v0 v1 v2 v3 v4 v5 获取数组长度获取数组长度的方法与获取字符串长度的方法相同：首先获取数组元素个数，再获取长度 12345$ echo $&#123;#array_name[@]&#125;6# 或$ echo $&#123;#array_name[*]&#125;6 shell注释注释行都是以#开头，会被解释器忽略。不支持多行注释。 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/]]></content>
      <categories>
        <category>Shell</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Shell编程：简介]]></title>
    <url>%2F2018%2F02%2F01%2FShell%E7%BC%96%E7%A8%8B%EF%BC%9A%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[简介Shell是一个用C语言编写的程序，提供用户使用linux的桥梁。它既是一种命令语言，又是一种程序设计语言。Shell脚本(Shell script)shiyizhongweiShel编写的脚本程序。通常我们说的Shell就是指的Shell脚本，但是应该记住的是Shell与Shell脚本是两个不同的概念。linux的Shell种类众多，但是我们常用的是bash。 Shell脚本由于Shell种类众多，所以我们编写Shell脚本的时候解释该脚本的Shell程序。所以第一行我们通常写成这样： 1#!/bin/bash #!是一个约定的标记，用来告诉系统这个脚本用什么解释器来执行，也就是使用哪一种Shell来执行，这里我们指定由bash来执行。 12!#/bin/bashecho "Hello World !" echo命令用于向窗口输出文本。 运行脚本运行脚本有两种方法 作为可执行程序 将上面的代码保存为hello.sh，然后进入其所在的目录1234#使脚本具有执行权限chmod +x ./hello.sh#执行脚本./hello.sh 需要注意的是，一定要写成./hello.sh，而不是./hello.sh，运行其他二进制的程序也一样。如果直接写成hello.sh的话，linux系统会去PATH里寻找有没有hello.sh这个文本，但是只有/bin,/sbin,/usr/bin等在PATH里，当前目录通常不在PATH里，所以写成hello.sh是找不到命令的，要用./hello.sh告诉系统就在当前目录找。 作为解释器参数这种运行方式是直接运行解释器，参数就是shell脚本文件名。 1/bin/sh hello.sh 此时就无需声明解释器了，因为已经在命令中指定了 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/]]></content>
      <categories>
        <category>Shell</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[关于如何修改坐标轴表达式以及分面图例的一个例子]]></title>
    <url>%2F2018%2F01%2F31%2F%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E5%9D%90%E6%A0%87%E8%BD%B4%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BB%A5%E5%8F%8A%E5%88%86%E9%9D%A2%E5%9B%BE%E4%BE%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%2F</url>
    <content type="text"><![CDATA[ggplot2绘制的图形如果需要修改细节的话，没有对ggplot2有一定的了解的话是十分困难的，毕竟连创建这个包的作者Hadley Wickham都自称自己使用ggplot2的时候都需要查文档。在对ggplot2有一定了解的基础上如果需要修改ggplot图的话稍微查查文档基本能解决。 来源这两天有人问我如何修改她的图形，她绘制的图如下： 她希望修改三点： 各个分面的图例比如DK、NL等是否可以修改，使得大一点 Y轴标题中的-1如何变成上标 平均值虚线如何针对不同物种画相对应的虚线平均值 她是使用ggpubr包绘制的，这个包就是对一些ggplot2函数的一些封装及继承，本质上来说是可以通过ggplot2来修改参数的。我参考了一部分的官方文档之后解决了这三个问题，所以写了这篇博客。 数据12345library(tidyverse)library(ggpubr)ICP&lt;-read.csv("C:/Users/taoyan/Desktop/element.csv")ICP$Order &lt;- factor(ICP$Species, levels = c("DK", "NL", "RO", "IT", "TL", "AP", "AD"))head(ICP) 1234567## Species Treatment Na Ca P## 1 DK A 268.4234 3021.933 1791.317## 2 DK A 301.9390 3314.308 1595.479## 3 DK A 261.1024 3417.643 1547.596## 4 DK A 229.1169 3069.978 1735.703## 5 DK A 265.1454 3205.965 1667.524## 6 DK B 330.7135 4028.279 1638.113 构造数据由于后面需要用到平均值，所以需要构造含有平均值的数据集123meanvalue &lt;- ICP%&gt;%group_by(Species)%&gt;%summarise(mean=mean(Na))data &lt;- left_join(ICP,meanvalue,by=c('Species'='Species'))head(data[,c(1:4,13)]) 1234567## Species Treatment Na Ca mean## 1 DK A 268.4234 3021.933 426.6542## 2 DK A 301.9390 3314.308 426.6542## 3 DK A 261.1024 3417.643 426.6542## 4 DK A 229.1169 3069.978 426.6542## 5 DK A 265.1454 3205.965 426.6542## 6 DK B 330.7135 4028.279 426.6542 绘图123456789p &lt;- ggboxplot(ICP, x="Treatment", y="Na",group="Species", color="Treatment",add="mean_se",facet.by = "Order",ncol=4, legend="none")+geom_hline(aes(yintercept=mean),data,linetype=2)+ #由于要在不同的分面里绘制水平线，这里要mappingstat_compare_means(method="anova",label="p.format",label.y=3500,size=8)+stat_compare_means(label="p.signif",size=8,method="wilcox.test",ref.group=".all.",hide.ns=TRUE)ggpar(p,palette = "npg",font.tickslab = c(18,"bold"))+ theme(strip.text = element_text(size=15,face = "bold"))+ #调整分面legend labs(x="Treatment", y=expression(bold(paste("Na ( ", 'mg Kg'^&#123;-1&#125;,")",' DM'))))+ theme(axis.title = element_text(face = "bold", size=18)) SessionInfo()1sessionInfo() 12345678910111213141516171819202122232425262728293031323334353637383940## R version 3.4.3 (2017-11-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 16299)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] bindrcpp_0.2 ggpubr_0.1.6 magrittr_1.5 ## [4] forcats_0.2.0 stringr_1.2.0 dplyr_0.7.4 ## [7] purrr_0.2.4 readr_1.1.1 tidyr_0.7.2 ## [10] tibble_1.4.2 ggplot2_2.2.1.9000 tidyverse_1.2.1 ## ## loaded via a namespace (and not attached):## [1] tidyselect_0.2.3 reshape2_1.4.3 haven_1.1.1 ## [4] lattice_0.20-35 colorspace_1.3-2 htmltools_0.3.6 ## [7] yaml_2.1.16 rlang_0.1.6 pillar_1.1.0 ## [10] foreign_0.8-69 glue_1.2.0 modelr_0.1.1 ## [13] readxl_1.0.0 bindr_0.1 plyr_1.8.4 ## [16] munsell_0.4.3 gtable_0.2.0 cellranger_1.1.0 ## [19] rvest_0.3.2 ggsci_2.8 psych_1.7.8 ## [22] evaluate_0.10.1 labeling_0.3 knitr_1.18 ## [25] parallel_3.4.3 broom_0.4.3 Rcpp_0.12.15 ## [28] scales_0.5.0.9000 backports_1.1.2 jsonlite_1.5 ## [31] mnormt_1.5-5 hms_0.4.1 digest_0.6.14 ## [34] stringi_1.1.6 grid_3.4.3 rprojroot_1.3-2 ## [37] cli_1.0.0 tools_3.4.3 lazyeval_0.2.1 ## [40] crayon_1.3.4 pkgconfig_2.0.1 xml2_1.2.0 ## [43] lubridate_1.7.1 assertthat_0.2.0 rmarkdown_1.8 ## [46] httr_1.3.1 rstudioapi_0.7 R6_2.2.2 ## [49] nlme_3.1-131 compiler_3.4.3 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggplot2</tag>
        <tag>ggpubr</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lesson 08 for Plotting in R for Biologists]]></title>
    <url>%2F2018%2F01%2F31%2F%20Lesson%2008%20for%20Plotting%20in%20R%20for%20Biologists%2F</url>
    <content type="text"><![CDATA[这节课是最后一节课，主要将如何绘制热图(heatmap)。实际上关于热图的绘制，我以前写了一篇博客：R语言学习笔记之热图绘制，里面写的十分详细。但是今天热图绘制主要利用一个新的R包ComplexHeatmap进行绘制。 包安装123source("https://bioconductor.org/biocLite.R")options(BioC_mirror="http://mirrors.ustc.edu.cn/bioc/")biocLite("ComplexHeatmap") 数据加载123library(ComplexHeatmap)my_data &lt;- read.table(&quot;copy_number_data.txt&quot;, sep = &quot;\t&quot;, quote=&quot;&quot;, stringsAsFactors = FALSE, header = TRUE)head(my_data[,1:6]) 1234567## CHR START END X.SRR089523. X.SRR089526. X.SRR089529.## 1 chr1 53440429 53494914 1.1002112 1.1000844 1.0487301## 2 chr1 105459037 105514187 1.1860780 0.6553897 0.4980016## 3 chr1 183998520 184048557 1.3791250 1.2024487 0.5735184## 4 chr1 236135655 236186012 0.8987158 1.1182392 0.6396842## 5 chr2 38944803 38996507 1.0788216 0.9663390 1.0473623## 6 chr2 97248366 97298651 1.0459629 1.0658991 1.0473623 123#绘制热图前先进行矩阵化my_matrix &lt;- as.matrix(my_data[, c(4:100)])head(my_matrix[,1:4]) 1234567## X.SRR089523. X.SRR089526. X.SRR089529. X.SRR089533.## [1,] 1.1002112 1.1000844 1.0487301 0.5656784## [2,] 1.1860780 0.6553897 0.4980016 0.5656784## [3,] 1.3791250 1.2024487 0.5735184 1.0362551## [4,] 0.8987158 1.1182392 0.6396842 0.4659238## [5,] 1.0788216 0.9663390 1.0473623 1.1702930## [6,] 1.0459629 1.0658991 1.0473623 1.2298119 12#将染色体信息存储好以便后续热图注释chromosome_info &lt;- data.frame(chrom=my_data$CHR) 可视化1Heatmap(my_matrix) 可以看到使用默认参数热图时十分不美观，可以进行部分调整123#坐标旋转my_matrix &lt;- t(my_matrix)Heatmap(my_matrix) 坐标标签还是十分乱，还得进行调整1Heatmap(my_matrix, cluster_columns = FALSE)#列不聚类 将坐标标签位置置于左边123456Heatmap(my_matrix, cluster_columns = FALSE, row_names_side = &quot;left&quot;, row_hclust_side = &quot;left&quot;, row_names_gp = gpar(cex=0.6) ) 123456Heatmap(my_matrix, cluster_columns = FALSE, row_names_side = &quot;left&quot;, row_hclust_side = &quot;left&quot;, row_names_gp = gpar(cex=0.6), row_hclust_width = unit(3, &quot;cm&quot;)) 热图绘制的时候可以使用不同的距离计算方式以及聚类方法，具体的用法可以参考我以前的博客：R语言学习笔记之热图绘制。 12345678Heatmap(my_matrix, cluster_columns = FALSE, row_names_side = &quot;left&quot;, row_hclust_side = &quot;left&quot;, row_names_gp = gpar(cex=0.6), row_hclust_width = unit(3, &quot;cm&quot;), clustering_distance_rows = &quot;maximum&quot;, clustering_method_rows = &quot;ward.D&quot;) 热图注释主要是对聚成的类进行颜色标记123456789library(dendextend)dend &lt;- hclust(dist(my_matrix, method = &quot;maximum&quot;), method = &quot;ward.D&quot;)Heatmap(my_matrix, cluster_columns = FALSE, row_names_side = &quot;left&quot;, row_hclust_side = &quot;left&quot;, row_names_gp = gpar(cex=0.6), row_hclust_width = unit(3, &quot;cm&quot;), cluster_rows = color_branches(dend, k=3)) 将热图分类随便你先分成几类，但是一般来说有一个最佳分类数，可参考我的另一篇博客：R语言学习笔记之聚类分析 123456789Heatmap(my_matrix, cluster_columns = FALSE, row_names_side = &quot;left&quot;, row_hclust_side = &quot;left&quot;, row_names_gp = gpar(cex=0.6), row_hclust_width = unit(3, &quot;cm&quot;), clustering_distance_rows = &quot;maximum&quot;, clustering_method_rows = &quot;ward.D&quot;, km=2) 根据染色体信息进行注释123456789101112chromosome_colors &lt;- c(rep(c(&quot;black&quot;,&quot;white&quot;),11), &quot;red&quot;)names(chromosome_colors) &lt;- paste(&quot;chr&quot;,c(seq(1:22), &quot;X&quot;), sep = &quot;&quot;)Heatmap(my_matrix, cluster_columns = FALSE, row_names_side = &quot;left&quot;, row_hclust_side = &quot;left&quot;, row_names_gp = gpar(cex=0.6), row_hclust_width = unit(3, &quot;cm&quot;), clustering_distance_rows = &quot;maximum&quot;, clustering_method_rows = &quot;ward.D&quot;, km=2, bottom_annotation = HeatmapAnnotation(chromosome_info, col = list(chrom=chromosome_colors), show_legend = FALSE)) SessionInfo1sessionInfo() 1234567891011121314151617181920212223242526272829303132333435363738## R version 3.4.3 (2017-11-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 16299)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] grid stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages:## [1] dendextend_1.6.0 ComplexHeatmap_1.17.1## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.15 DEoptimR_1.0-8 compiler_3.4.3 ## [4] pillar_1.1.0 RColorBrewer_1.1-2 plyr_1.8.4 ## [7] viridis_0.4.1 class_7.3-14 prabclus_2.2-6 ## [10] tools_3.4.3 digest_0.6.15 mclust_5.4 ## [13] viridisLite_0.3.0 evaluate_0.10.1 tibble_1.4.2 ## [16] gtable_0.2.0 lattice_0.20-35 rlang_0.1.6 ## [19] yaml_2.1.16 mvtnorm_1.0-7 gridExtra_2.3 ## [22] trimcluster_0.1-2 stringr_1.2.0 knitr_1.19 ## [25] cluster_2.0.6 GlobalOptions_0.0.12 fpc_2.1-11 ## [28] diptest_0.75-7 nnet_7.3-12 stats4_3.4.3 ## [31] rprojroot_1.3-2 robustbase_0.92-8 GetoptLong_0.1.6 ## [34] flexmix_2.3-14 rmarkdown_1.8 kernlab_0.9-25 ## [37] ggplot2_2.2.1.9000 magrittr_1.5 whisker_0.3-2 ## [40] modeltools_0.2-21 backports_1.1.2 scales_0.5.0.9000 ## [43] htmltools_0.3.6 MASS_7.3-48 shape_1.4.3 ## [46] circlize_0.4.3 colorspace_1.3-2 stringi_1.1.6 ## [49] lazyeval_0.2.1 munsell_0.4.3 rjson_0.2.15 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>Biologists</tag>
        <tag>heatmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lesson 07 for Plotting in R for Biologists]]></title>
    <url>%2F2018%2F01%2F30%2F%20Lesson%2007%20for%20Plotting%20in%20R%20for%20Biologists%2F</url>
    <content type="text"><![CDATA[这节课主要两个知识点，一个是图形分面，一个是图形嵌入。 数据加载及清洗12345library(tidyverse)theme_set(theme_gray())my_data &lt;- read.csv(&quot;variants_from_assembly.bed&quot;, sep = &quot;\t&quot;, quote = &apos;&apos;, stringsAsFactors = TRUE, header = FALSE)names(my_data) &lt;- c(&quot;chrom&quot;,&quot;start&quot;,&quot;stop&quot;,&quot;name&quot;,&quot;size&quot;,&quot;strand&quot;,&quot;type&quot;,&quot;ref.dist&quot;,&quot;query.dist&quot;)head(my_data) 1234567## chrom start stop name size strand type ref.dist query.dist## 1 6 103832058 103832059 SV1 185 + Insertion 0 185## 2 6 102958468 102958469 SV2 317 + Insertion -14 303## 3 6 102741692 102741693 SV3 130 + Deletion 130 0## 4 6 102283759 102283760 SV4 1271 + Insertion -12 1259## 5 6 101194032 101194033 SV5 2864 + Insertion -13 2851## 6 6 101056644 101056645 SV6 265 + Insertion 0 265 123my_data &lt;- my_data[my_data$chrom %in% c(seq(1:22), "X","Y"), ]my_data$chrom &lt;- factor(gsub("chr", "",my_data$chrom), levels = c(seq(1:22),"X","Y"))my_data$type &lt;- factor(my_data$type, levels = c("Insertion","Deletion","Expansion","Contraction")) 可视化&amp;分面1ggplot(my_data, aes(x=size, fill=type))+geom_density(alpha=0.5)+xlim(0,500) 1ggplot(my_data, aes(x=size, fill=type))+geom_density(alpha=0.5)+xlim(0,500)+facet_grid(type~.) 1ggplot(my_data, aes(x=size, fill=type))+geom_density(alpha=0.5)+xlim(0,500)+facet_grid(.~type) 分面的规则语法是：1plot+facet_grid(rows~columns) 比如下面的图按染色体为行、type为列进行分面1ggplot(my_data, aes(x=size, fill=type))+geom_density()+xlim(0,500)+facet_grid(chrom~type) 12#也可以反过来ggplot(my_data, aes(x=size, fill=type))+geom_density()+xlim(0,500)+facet_grid(type~chrom) 可以根据自己的喜好以及数据的分布进行分面，有的时候数据不是很适合分面操作，需要慎重，不然越分越乱，无法直观地展示数据。 图形嵌入123456789101112131415#先设置主题theme_set(theme_gray()+ theme( axis.line = element_line(size=0.5), panel.background = element_rect(fill=NA, size = rel(20)), panel.grid.minor = element_line(colour = NA), axis.text = element_text(size = 16), axis.title = element_text(size = 16) ) )big_plot &lt;- ggplot(my_data, aes(x=size, fill=type))+ geom_bar(binwidth = 100)+ guides(fill=FALSE)+ scale_y_continuous(expand = c(0,0))big_plot 123456small_plot &lt;- ggplot(my_data, aes(x=size, fill=type))+ geom_bar(binwidth = 5)+ xlim(0, 500)+ theme(axis.title = element_blank())+ scale_y_continuous(expand = c(0,0))small_plot 图形嵌入需要使用包grid1234567library(grid)#构造画布，这一步需要不断调整位置vp &lt;- viewport(width = 0.8, height = 0.7, x=0.65, y=0.65)#分别设置需要嵌入的图形的宽度、高度以及坐标位置png(&quot;insert_plot.png&quot;)print(big_plot)print(small_plot, vp = vp)dev.off() SessionInfo1sessionInfo() 12345678910111213141516171819202122232425262728293031323334353637383940## R version 3.4.3 (2017-11-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 16299)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] grid stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages:## [1] forcats_0.2.0 stringr_1.2.0 dplyr_0.7.4 ## [4] purrr_0.2.4 readr_1.1.1 tidyr_0.7.2 ## [7] tibble_1.4.2 ggplot2_2.2.1.9000 tidyverse_1.2.1 ## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.15 cellranger_1.1.0 pillar_1.1.0 ## [4] compiler_3.4.3 plyr_1.8.4 bindr_0.1 ## [7] tools_3.4.3 digest_0.6.15 lubridate_1.7.1 ## [10] jsonlite_1.5 evaluate_0.10.1 nlme_3.1-131 ## [13] gtable_0.2.0 lattice_0.20-35 pkgconfig_2.0.1 ## [16] rlang_0.1.6 psych_1.7.8 cli_1.0.0 ## [19] rstudioapi_0.7 yaml_2.1.16 parallel_3.4.3 ## [22] haven_1.1.1 bindrcpp_0.2 xml2_1.2.0 ## [25] httr_1.3.1 knitr_1.19 hms_0.4.1 ## [28] rprojroot_1.3-2 glue_1.2.0 R6_2.2.2 ## [31] readxl_1.0.0 foreign_0.8-69 rmarkdown_1.8 ## [34] modelr_0.1.1 reshape2_1.4.3 magrittr_1.5 ## [37] backports_1.1.2 scales_0.5.0.9000 htmltools_0.3.6 ## [40] rvest_0.3.2 assertthat_0.2.0 mnormt_1.5-5 ## [43] colorspace_1.3-2 labeling_0.3 stringi_1.1.6 ## [46] lazyeval_0.2.1 munsell_0.4.3 broom_0.4.3 ## [49] crayon_1.3.4 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>Biologists</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lesson 06 for Plotting in R for Biologists]]></title>
    <url>%2F2018%2F01%2F29%2F%20Lesson%2006%20for%20Plotting%20in%20R%20for%20Biologists%2F</url>
    <content type="text"><![CDATA[前面几节课绘制的图形只有条形图，但是我们科研过程中需要绘制各种各样的图形来展现我们的数据，这节课就主要讲一下利用ggplot2绘制各种图形，这也是ggplot2的魔力所在。相同的数据可以通过不同类型的图形来可视化。本节课主要将绘制以下几类图形： 条形图 直方图 散点图 箱线图 小提琴图 密度图 点状图 线图 饼图 韦恩图 数据加载清洗12345library(tidyverse)theme_set(theme_gray(base_size = 18))my_data &lt;- read.csv(&quot;variants_from_assembly.bed&quot;, sep = &quot;\t&quot;, quote = &apos;&apos;, stringsAsFactors = FALSE)names(my_data) &lt;- c(&quot;chrom&quot;,&quot;start&quot;,&quot;stop&quot;,&quot;name&quot;,&quot;size&quot;,&quot;strand&quot;,&quot;type&quot;,&quot;ref.dist&quot;,&quot;query.dist&quot;)head(my_data) 1234567## chrom start stop name size strand type ref.dist query.dist## 1 6 102958468 102958469 SV2 317 + Insertion -14 303## 2 6 102741692 102741693 SV3 130 + Deletion 130 0## 3 6 102283759 102283760 SV4 1271 + Insertion -12 1259## 4 6 101194032 101194033 SV5 2864 + Insertion -13 2851## 5 6 101056644 101056645 SV6 265 + Insertion 0 265## 6 6 100407499 100407500 SV7 334 + Insertion 0 334 1summary(my_data$chrom) 12## Length Class Mode ## 9555 character character 1234567#数据过滤my_data &lt;- my_data[my_data$chrom %in% c(seq(1:22), "X", "Y","MT"), ]#染色体排序my_data$chrom &lt;- factor(my_data$chrom, levels = c(seq(1:22), "X", "Y","MT"))#类型(type)排序my_data$type &lt;- factor(my_data$type, levels = c("Insertion","Deletion","Expansion","Contraction"))head(my_data) 1234567## chrom start stop name size strand type ref.dist query.dist## 1 6 102958468 102958469 SV2 317 + Insertion -14 303## 2 6 102741692 102741693 SV3 130 + Deletion 130 0## 3 6 102283759 102283760 SV4 1271 + Insertion -12 1259## 4 6 101194032 101194033 SV5 2864 + Insertion -13 2851## 5 6 101056644 101056645 SV6 265 + Insertion 0 265## 6 6 100407499 100407500 SV7 334 + Insertion 0 334 可视化条形图1ggplot(my_data, aes(x=chrom, fill=type))+geom_bar() 直方图1ggplot(my_data, aes(x=size, fill=type))+geom_histogram() 1ggplot(my_data, aes(x=size, fill=type))+geom_histogram()+xlim(0,500) 1ggplot(my_data, aes(x=size, fill=type))+geom_histogram(binwidth = 5)+xlim(0,500) 散点图12#将type映射给颜色ggplot(my_data, aes(x=ref.dist, y=query.dist, color=type))+geom_point() 1ggplot(my_data, aes(x=ref.dist, y=query.dist, color=type))+geom_point()+xlim(-500,500)+ylim(-500,500) 12#将数值型变量size映射给颜色ggplot(my_data, aes(x=ref.dist, y=query.dist, color=size))+geom_point()+xlim(-500,500)+ylim(-500,500) 1ggplot(my_data, aes(x=ref.dist, y=query.dist,color=size))+geom_point()+xlim(-500,500)+ylim(-500,500)+scale_color_gradient(limits=c(0, 500)) 箱线图1ggplot(my_data, aes(type, y=size))+geom_boxplot() 1ggplot(my_data, aes(x=type, y=size, fill=type))+geom_boxplot() 1ggplot(my_data, aes(x=type, y=size, fill=type))+geom_boxplot()+coord_flip() 小提琴图1ggplot(my_data, aes(x=type, y=size, fill=type))+geom_violin()+ylim(0,1000)+guides(fill=FALSE) 1ggplot(my_data, aes(x=type, y=size, fill=type))+geom_violin(adjust=0.2)+ylim(0,1000)+guides(fill=FALSE)#adjust调整分辨率，默认为1，值越低，分辨率越高 12#坐标变换ggplot(my_data, aes(x=type, y=size, fill=type))+geom_violin()+scale_y_log10() 密度图1ggplot(my_data, aes(x=size, fill=type))+geom_density()+xlim(0,500) 1ggplot(my_data, aes(x=size, fill=type))+geom_density(position = "stack")+xlim(0,500) 1ggplot(my_data, aes(x=size, fill=type))+geom_density(alpha=0.5)+xlim(0,500) 12#图形分面ggplot(my_data, aes(x=size, fill=type))+geom_density()+xlim(0,500)+facet_grid(type~.) 点状图1ggplot(my_data, aes(x=size, fill=type))+geom_dotplot() 线图12time_cource &lt;- read.csv(&quot;time_course_data.txt&quot;, sep = &quot;,&quot;, quote = &apos;&apos;, stringsAsFactors = TRUE, header = TRUE)head(time_cource) 1234567## seconds value sample## 1 0 0.00 A## 2 1 5.97 A## 3 2 13.42 A## 4 3 56.08 A## 5 4 98.04 A## 6 5 27.11 A 1ggplot(time_cource, aes(x=seconds, y=value, color=sample))+geom_line() 1ggplot(time_cource, aes(x=seconds, y=value, color=sample))+geom_line(size=3) 饼图12type_counts &lt;- summary(my_data$type)type_counts 12## Insertion Deletion Expansion Contraction ## 3141 2256 2476 1674 12library(RColorBrewer)pie(type_counts, col = brewer.pal(length(type_counts), "Set1")) 韦恩图这里利用四个基因集1234567891011listA &lt;- read.csv(&quot;genes_list_A.txt&quot;, header = FALSE)A &lt;- listA$V1listB &lt;- read.csv(&quot;genes_list_B.txt&quot;, header = FALSE)B &lt;- listB$V1listC &lt;- read.csv(&quot;genes_list_C.txt&quot;, header = FALSE)C &lt;- listC$V1listD &lt;- read.csv(&quot;genes_list_D.txt&quot;, header = FALSE)D &lt;- listD$V1library(VennDiagram)#注意这个包绘制的图只能直接保存在文件中，无法实时显示venn.diagram(list(A=A, B=B, C=C, D=D), fill=c(&quot;yellow&quot;,&quot;red&quot;,&quot;cyan&quot;,&quot;forestgreen&quot;), cex=1.5, filename = &quot;Venn_diagram_genes_4.png&quot;) SessionInfo1sessionInfo() 1234567891011121314151617181920212223242526272829303132333435363738394041## R version 3.4.3 (2017-11-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 16299)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] grid stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages:## [1] VennDiagram_1.6.18 futile.logger_1.4.3 RColorBrewer_1.1-2 ## [4] forcats_0.2.0 stringr_1.2.0 dplyr_0.7.4 ## [7] purrr_0.2.4 readr_1.1.1 tidyr_0.7.2 ## [10] tibble_1.4.2 ggplot2_2.2.1.9000 tidyverse_1.2.1 ## ## loaded via a namespace (and not attached):## [1] reshape2_1.4.3 haven_1.1.1 lattice_0.20-35 ## [4] colorspace_1.3-2 htmltools_0.3.6 yaml_2.1.16 ## [7] rlang_0.1.6 pillar_1.1.0 foreign_0.8-69 ## [10] glue_1.2.0 lambda.r_1.2 modelr_0.1.1 ## [13] readxl_1.0.0 bindrcpp_0.2 bindr_0.1 ## [16] plyr_1.8.4 munsell_0.4.3 gtable_0.2.0 ## [19] cellranger_1.1.0 rvest_0.3.2 psych_1.7.8 ## [22] evaluate_0.10.1 labeling_0.3 knitr_1.18 ## [25] parallel_3.4.3 broom_0.4.3 Rcpp_0.12.15 ## [28] scales_0.5.0.9000 backports_1.1.2 jsonlite_1.5 ## [31] mnormt_1.5-5 hms_0.4.1 digest_0.6.14 ## [34] stringi_1.1.6 rprojroot_1.3-2 cli_1.0.0 ## [37] tools_3.4.3 magrittr_1.5 lazyeval_0.2.1 ## [40] futile.options_1.0.0 crayon_1.3.4 pkgconfig_2.0.1 ## [43] xml2_1.2.0 lubridate_1.7.1 assertthat_0.2.0 ## [46] rmarkdown_1.8 httr_1.3.1 rstudioapi_0.7 ## [49] R6_2.2.2 nlme_3.1-131 compiler_3.4.3 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>Biologists</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lesson 05 for Plotting in R for Biologists]]></title>
    <url>%2F2018%2F01%2F28%2F%20Lesson%2005%20for%20Plotting%20in%20R%20for%20Biologists%2F</url>
    <content type="text"><![CDATA[这节课作者命名为”Tweaking everything in a plot”。主要是对图形细节进行优化，包括： 题目(title)、坐标轴标签、图例标签等 字体 颜色 背景 网格线等 数据加载及清洗这部分在上节课已经讲过了，这里就不再详述了。 1234567library(tidyverse)library(plyr)my_data &lt;- read.csv(&quot;Encode_HMM_data.txt&quot;, sep = &quot;\t&quot;, header = FALSE)names(my_data)[1:4] &lt;- c(&quot;chrom&quot;,&quot;start&quot;,&quot;stop&quot;,&quot;type&quot;)my_data$chrom &lt;- factor(gsub(&quot;chr&quot;,&quot;&quot;, my_data$chrom, fixed = TRUE), levels = c(seq(1:22),&quot;X&quot;,&quot;Y&quot;))my_data &lt;- my_data[my_data$type %in% c(&quot;1_Active_Promoter&quot;,&quot;4_Strong_Enhancer&quot;,&quot;8_Insulator&quot;), ]my_data$type &lt;- revalue(my_data$type, c(&quot;1_Active_Promoter&quot;=&quot;Promoter&quot;, &quot;4_Strong_Enhancer&quot;=&quot;Enhancer&quot;,&quot;8_Insulator&quot;=&quot;Insulator&quot;)) 可视化接下来就针对图形进行优化调整 1ggplot(my_data, aes(x=chrom, fill=type))+geom_bar() 添加标题1ggplot(my_data, aes(x=chrom, fill=type))+geom_bar()+labs(title=&quot;Regulatory features by chromosomes&quot;) 需要注意的一点是，添加的title默认是位于左上角，如果要居中显示的话最简单的办法就是在标题前添加空格。 修改坐标轴以及图例标签123ggplot(my_data, aes(x=chrom, fill=type))+ geom_bar()+ labs(x=&quot;Chromosome&quot;, y=&quot;Count&quot;, fill=&quot;Feature&quot;)#这里fill是对应ampping里面的fill映射，显示于图例 主题修改12345basic &lt;- ggplot(my_data, aes(x=chrom, fill=type))+ geom_bar()+ labs(x=&quot;Chromosome&quot;, y=&quot;Count&quot;, fill=&quot;Feature&quot;)#设置文本大小(basic+theme_gray(base_size = 20)) 如果想要使得主题适用于所有的图形，可以通过theme_set()进行设置。 12theme_set(theme_gray(base_size = 20))basic 恢复默认设置主题 12theme_set(theme_gray())basic 颜色R有个包RColorNBrewer提供调色板12library(RColorBrewer)display.brewer.all() 下面测试一下这些调色板1basic+scale_fill_brewer(palette = &quot;Set1&quot;) 1basic+scale_fill_brewer(palette = "Pastel1") 1basic+scale_fill_brewer(palette = "YlorRd") 不使用调色板的话也可以自己设置颜色，结合取色器的话很是很赞的 1basic+scale_fill_manual(values = c(&quot;green&quot;, &quot;blue&quot;, &quot;red&quot;)) 1head(colors()) 12## [1] "white" "aliceblue" "antiquewhite" "antiquewhite1"## [5] "antiquewhite2" "antiquewhite3" 有的时候我们需要很多种颜色，多到一个调色板都满足不了时怎么办？12chrom_plot &lt;- ggplot(my_data, aes(x=type, fill=chrom))+geom_bar()chrom_plot 1chrom_plot+scale_fill_brewer(type = "qual", palette = 1) ggplot默认调用的是rainbpw调色板，颜色容易让人误解，不好分辨，但是其他的调色板颜色数量是不足的。这时可以通过将好几个palette合并在一起组成一个新的palette。 12palette1 &lt;- brewer.pal(9, &quot;Set1&quot;)palette1 12## [1] "#E41A1C" "#377EB8" "#4DAF4A" "#984EA3" "#FF7F00" "#FFFF33" "#A65628"## [8] "#F781BF" "#999999" 12palette2 &lt;- brewer.pal(8, "Set2")palette2 12## [1] "#66C2A5" "#FC8D62" "#8DA0CB" "#E78AC3" "#A6D854" "#FFD92F" "#E5C494"## [8] "#B3B3B3" 12palette3 &lt;- brewer.pal(9, "Set3")palette3 12## [1] "#8DD3C7" "#FFFFB3" "#BEBADA" "#FB8072" "#80B1D3" "#FDB462" "#B3DE69"## [8] "#FCCDE5" "#D9D9D9" 通过饼图来查看一下这几个调色板1pie(rep(1, length(palette1)), col = palette1) 1pie(rep(1, length(palette2)), col = palette2) 1pie(rep(1, length(palette3)), col = palette3) 将这几个色斑合并成一个大的调色板12big_palette &lt;- c(palette1, palette2, palette3)pie(rep(1, length(big_palette)), col = big_palette) 1chrom_plot+scale_fill_manual(values = big_palette) 也可以打乱颜色顺序1chrom_plot+scale_fill_manual(values = sample(big_palette)) 字体后续大部分调整都是通过theme来实现的。12#对所有字体进行调整basic+theme_gray(base_size = 24, base_family = &quot;Times New Roman&quot;) 但是很多时候我们都是对特定字体、标签、颜色等进行特定的调整，这时就可以通过theme逐一调整。1basic+theme(axis.text = element_text(size=20)) 1basic+theme(axis.title = element_text(size = 20)) 1basic+theme(legend.title = element_text(size = 20)) 1basic+theme(legend.text = element_text(size=20, family = "Times New Roman")) 123basic+theme(legend.text = element_text(size=20, family = "Times New Roman"), axis.title = element_text(size=30), axis.text = element_text(size=20)) 背景1basic+theme(panel.background = element_rect(fill=&quot;pink&quot;)) 1basic+theme(panel.background = element_rect(fill="white")) 网格线1basic+theme(panel.grid.major = element_line(colour = &quot;blue&quot;), panel.grid.minor = element_line(colour = &quot;red&quot;)) 移除所有的网格线12basic+theme(panel.grid.major = element_line(NA), panel.grid.minor = element_line(NA)) 只保留y轴线123basic+theme(panel.grid.major.y = element_line(colour = &quot;black&quot;, size = 0.20), panel.grid.major.x = element_line(NA), panel.grid.minor = element_line(NA)) 修改刻度1basic+theme(axis.ticks = element_line(size=0.2)) 1basic+theme(axis.ticks = element_line(NA)) 1basic+theme(axis.ticks = element_line(colour = "blue", size = 2)) 123basic+theme(axis.ticks = element_line(size=2), axis.ticks.x = element_line(colour = "blue"), axis.ticks.y = element_line(colour = "red")) 图例修改图例位置1basic+theme(legend.position = &quot;top&quot;) 1basic+theme(legend.position = "bottom") 1basic+theme(legend.position = c(0,0))#左下角 1basic+theme(legend.position = c(1,1))#右上角 1basic+theme(legend.position = c(0.8,0.8))#通过坐标设置可以将图例置于任意位置 移除图例1basic+labs(fill=&quot;&quot;) 1basic+labs(fill="")+theme(legend.position = c(0.8,0.8)) 看看文章发表样式图形1234567publication_style &lt;- basic+guides(fill=FALSE)+ theme(axis.line = element_line(size = 0.5), panel.background = element_rect(fill=NA, size = rel(20)), panel.grid.minor = element_line(colour = NA), axis.text = element_text(size=16), axis.title = element_text(size = 18))publication_style 将柱形图与x轴之间的距离消除1publication_style+scale_y_continuous(expand = c(0,0)) 可以看到上述图形基本达到了文章发表的水平，因此我们可以将主题theme保存下来以后使用，通过设置全局主题来使所有图形有相同版式。1234567theme_set(theme_gray()+ theme(axis.line = element_line(size = 0.5), panel.background = element_rect(fill=NA, size = rel(20)), panel.grid.minor = element_line(colour = NA), axis.text = element_text(size = 16), axis.title = element_text(size = 18)))basic 1basic+scale_y_continuous(expand = c(0,0))+guides(fill=FALSE) 如果需要还原主题设定的话，只要运行以下命令就行：1theme_set(theme_gray()) SessionInfO()1sessionInfo() 12345678910111213141516171819202122232425262728293031323334353637383940## R version 3.4.3 (2017-11-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 16299)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] RColorBrewer_1.1-2 plyr_1.8.4 forcats_0.2.0 ## [4] stringr_1.2.0 dplyr_0.7.4 purrr_0.2.4 ## [7] readr_1.1.1 tidyr_0.7.2 tibble_1.4.2 ## [10] ggplot2_2.2.1.9000 tidyverse_1.2.1 ## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.15 cellranger_1.1.0 pillar_1.1.0 ## [4] compiler_3.4.3 bindr_0.1 tools_3.4.3 ## [7] digest_0.6.14 lubridate_1.7.1 jsonlite_1.5 ## [10] evaluate_0.10.1 nlme_3.1-131 gtable_0.2.0 ## [13] lattice_0.20-35 pkgconfig_2.0.1 rlang_0.1.6 ## [16] psych_1.7.8 cli_1.0.0 rstudioapi_0.7 ## [19] yaml_2.1.16 parallel_3.4.3 haven_1.1.1 ## [22] bindrcpp_0.2 xml2_1.2.0 httr_1.3.1 ## [25] knitr_1.18 hms_0.4.1 rprojroot_1.3-2 ## [28] grid_3.4.3 glue_1.2.0 R6_2.2.2 ## [31] readxl_1.0.0 foreign_0.8-69 rmarkdown_1.8 ## [34] modelr_0.1.1 reshape2_1.4.3 magrittr_1.5 ## [37] backports_1.1.2 scales_0.5.0.9000 htmltools_0.3.6 ## [40] rvest_0.3.2 assertthat_0.2.0 mnormt_1.5-5 ## [43] colorspace_1.3-2 labeling_0.3 stringi_1.1.6 ## [46] lazyeval_0.2.1 munsell_0.4.3 broom_0.4.3 ## [49] crayon_1.3.4 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>Biologists</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lesson 04 for Plotting in R for Biologists]]></title>
    <url>%2F2018%2F01%2F25%2F%20Lesson%2004%20for%20Plotting%20in%20R%20for%20Biologists%2F</url>
    <content type="text"><![CDATA[上次将Lesson 02&amp;03一起讲解完了，在Lesson 04中主要解决下面几个问题 剔除掉染色体前缀chr 对染色体进行正确排序 对数据进行过滤 对部分type重命名 加载数据123library(tidyverse)my_data &lt;- read.csv(&quot;Encode_HMM_data.txt&quot;, sep = &quot;\t&quot;, header = FALSE)head(my_data[, c(1:6)]) 1234567## V1 V2 V3 V4 V5 V6## 1 chr1 10000 10600 15_Repetitive/CNV 0 .## 2 chr1 10600 11137 13_Heterochrom/lo 0 .## 3 chr1 11137 11737 8_Insulator 0 .## 4 chr1 11737 11937 11_Weak_Txn 0 .## 5 chr1 11937 12137 7_Weak_Enhancer 0 .## 6 chr1 12137 14537 11_Weak_Txn 0 . 对数据部分列进行重命名12names(my_data)[1:4] &lt;- c(&quot;chrom&quot;, &quot;start&quot;, &quot;stop&quot;,&quot;type&quot;)head(my_data[, c(1:4)]) 1234567## chrom start stop type## 1 chr1 10000 10600 15_Repetitive/CNV## 2 chr1 10600 11137 13_Heterochrom/lo## 3 chr1 11137 11737 8_Insulator## 4 chr1 11737 11937 11_Weak_Txn## 5 chr1 11937 12137 7_Weak_Enhancer## 6 chr1 12137 14537 11_Weak_Txn 绘图1ggplot(my_data, aes(x=chrom, fill=type))+geom_bar() 数据调整主要是针对上面提出的几个问题对数据进行调整 剔除染色体前缀chr12my_data$chrom &lt;- factor(gsub(&quot;chr&quot;, &quot;&quot;, my_data$chrom))ggplot(my_data, aes(x=chrom, fill=type))+geom_bar() 对染色体进行排序这个关于人类的基因组数据，所以染色体顺序应该是1：22,X,Y。 12my_data$chrom &lt;- factor(my_data$chrom, levels = c(seq(1:22), &quot;X&quot;, &quot;Y&quot;))ggplot(my_data, aes(x=chrom, fill=type))+geom_bar() 这下看起来相对好一点 选取type只选取我们感兴趣的type进行可视化 1my_data &lt;- my_data[my_data$type %in% c(&quot;1_Active_Promoter&quot;, &quot;4_Strong_Enhancer&quot;, &quot;8_Insulator&quot;), ] 对选取的type进行重命名123library(plyr)my_data$type &lt;- revalue(my_data$type,c(&quot;1_Active_Promoter&quot;=&quot;Promoter&quot;,&quot;4_Strong_Enhancer&quot;=&quot;Enhancer&quot;,&quot;8_Insulator&quot;=&quot;Insulator&quot;))ggplot(my_data, aes(x=chrom, fill=type))+geom_bar() SessionInfo1sessionInfo() 12345678910111213141516171819202122232425262728293031323334353637383940## R version 3.4.3 (2017-11-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 16299)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] plyr_1.8.4 forcats_0.2.0 stringr_1.2.0 ## [4] dplyr_0.7.4 purrr_0.2.4 readr_1.1.1 ## [7] tidyr_0.7.2 tibble_1.4.2 ggplot2_2.2.1.9000## [10] tidyverse_1.2.1 ## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.15 cellranger_1.1.0 pillar_1.1.0 ## [4] compiler_3.4.3 bindr_0.1 tools_3.4.3 ## [7] digest_0.6.14 lubridate_1.7.1 jsonlite_1.5 ## [10] evaluate_0.10.1 nlme_3.1-131 gtable_0.2.0 ## [13] lattice_0.20-35 pkgconfig_2.0.1 rlang_0.1.6 ## [16] psych_1.7.8 cli_1.0.0 rstudioapi_0.7 ## [19] yaml_2.1.16 parallel_3.4.3 haven_1.1.1 ## [22] bindrcpp_0.2 xml2_1.2.0 httr_1.3.1 ## [25] knitr_1.18 hms_0.4.1 rprojroot_1.3-2 ## [28] grid_3.4.3 glue_1.2.0 R6_2.2.2 ## [31] readxl_1.0.0 foreign_0.8-69 rmarkdown_1.8 ## [34] modelr_0.1.1 reshape2_1.4.3 magrittr_1.5 ## [37] backports_1.1.2 scales_0.5.0.9000 htmltools_0.3.6 ## [40] rvest_0.3.2 assertthat_0.2.0 mnormt_1.5-5 ## [43] colorspace_1.3-2 labeling_0.3 stringi_1.1.6 ## [46] lazyeval_0.2.1 munsell_0.4.3 broom_0.4.3 ## [49] crayon_1.3.4 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>Biologists</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lesson 02&03 for Plotting in R for Biologists]]></title>
    <url>%2F2018%2F01%2F20%2F%20Lesson%2002%2603%20for%20Plotting%20in%20R%20for%20Biologists%2F</url>
    <content type="text"><![CDATA[Lesson02主要讲了如何从Excel导入数据以及如何从UCSC、ENSEMBL和RENCODE上下载数据，因此我就将Lesson02并入Lesson03一起讲了。 从ECXEl中导入数据数据来源于文献“Gene expression profiling of breast cell lines identifies potential new basal markers”的补充数据集Supplementary Table 1。将之下载到工作目录区。数据读取的话只需要用read.csv()即可，指定sep。gtf、bed文件都可以通过read.csv()读取。即使是没有后缀的文件，只要知道其分隔符，就可以通过设置sep来读取数据。 12my_data &lt;- read.csv(&quot;micro_array_results_table1.txt&quot;, sep = &apos;\t&apos;, header = TRUE)head(my_data[,c(1:6)]) 1234567## Probe.Set.ID Gene.Symbol Type X184B5 BrCa.MZ.01 BT.20## 1 1007_s_at DDR1 gene 1113.91 815.53 1564.76## 2 1053_at RFC2 gene 159.02 253.24 320.22## 3 117_at HSPA6 gene 60.76 33.91 26.39## 4 121_at PAX8 gene 197.76 121.33 122.81## 5 1255_g_at GUCA1A gene 6.73 7.88 6.28## 6 1294_at UBE1L gene 118.82 57.24 432.24 试试读取gtf文件12Brassica_gtf &lt;- read.csv(&quot;E:/Brassica napus database/Brassica_napus.annotation_v5.gtf&quot;, sep = &quot;\t&quot;, header = FALSE)head(Brassica_gtf) 1234567## V1 V2 V3 V4 V5 V6 V7 V8 V9## 1 chrA01 GazeA2 exon 831 1437 7.80 + . transcript_id BnaA01g00010D;## 2 chrA01 GazeA2 CDS 1070 1345 . + 0 transcript_id BnaA01g00010D;## 3 chrA01 GazeA2 exon 1487 2124 2.15 - . transcript_id BnaA01g00020D;## 4 chrA01 GazeA2 exon 2256 2436 3.19 - . transcript_id BnaA01g00020D;## 5 chrA01 GazeA2 CDS 1645 2124 . - 0 transcript_id BnaA01g00020D;## 6 chrA01 GazeA2 CDS 2256 2282 . - 0 transcript_id BnaA01g00020D; 其他格式文件我这里就不试了，有兴趣的话可以自己去尝试。 数据探索1234library(tidyverse)#读取数据my_data &lt;- read.csv(&quot;Encode_HMM_data.txt&quot;, sep = &quot;\t&quot;, header = FALSE)dim(my_data) 1## [1] 571339 9 1head(my_data[, c(1:6)]) 1234567## V1 V2 V3 V4 V5 V6## 1 chr1 10000 10600 15_Repetitive/CNV 0 .## 2 chr1 10600 11137 13_Heterochrom/lo 0 .## 3 chr1 11137 11737 8_Insulator 0 .## 4 chr1 11737 11937 11_Weak_Txn 0 .## 5 chr1 11937 12137 7_Weak_Enhancer 0 .## 6 chr1 12137 14537 11_Weak_Txn 0 . 对数据部分列进行重命名1names(my_data)[1:4] &lt;- c(&quot;chrom&quot;, &quot;start&quot;, &quot;stop&quot;, &quot;type&quot;) 可视化先初步看一下不同染色体上的type类型1ggplot(my_data, aes(x=chrom, fill=type))+geom_bar() 从这个图中可以看到还有很多缺陷 染色体顺序错乱，前缀chr在坐标轴上排列乱 类型太多了，我们只需要可视化我们感兴趣的type 类型的名字乱 这几个问题将在Lesson04解决 SessionInfo()1sessionInfo() 123456789101112131415161718192021222324252627282930313233343536373839## R version 3.4.3 (2017-11-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 16299)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] forcats_0.2.0 stringr_1.2.0 dplyr_0.7.4 ## [4] purrr_0.2.4 readr_1.1.1 tidyr_0.7.2 ## [7] tibble_1.4.2 ggplot2_2.2.1.9000 tidyverse_1.2.1 ## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.15 cellranger_1.1.0 pillar_1.1.0 ## [4] compiler_3.4.3 plyr_1.8.4 bindr_0.1 ## [7] tools_3.4.3 digest_0.6.14 lubridate_1.7.1 ## [10] jsonlite_1.5 evaluate_0.10.1 nlme_3.1-131 ## [13] gtable_0.2.0 lattice_0.20-35 pkgconfig_2.0.1 ## [16] rlang_0.1.6 psych_1.7.8 cli_1.0.0 ## [19] rstudioapi_0.7 yaml_2.1.16 parallel_3.4.3 ## [22] haven_1.1.1 bindrcpp_0.2 xml2_1.2.0 ## [25] httr_1.3.1 knitr_1.18 hms_0.4.1 ## [28] rprojroot_1.3-2 grid_3.4.3 glue_1.2.0 ## [31] R6_2.2.2 readxl_1.0.0 foreign_0.8-69 ## [34] rmarkdown_1.8 modelr_0.1.1 reshape2_1.4.3 ## [37] magrittr_1.5 backports_1.1.2 scales_0.5.0.9000## [40] htmltools_0.3.6 rvest_0.3.2 assertthat_0.2.0 ## [43] mnormt_1.5-5 colorspace_1.3-2 labeling_0.3 ## [46] stringi_1.1.6 lazyeval_0.2.1 munsell_0.4.3 ## [49] broom_0.4.3 crayon_1.3.4 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>Biologists</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lesson 01 for Plotting in R for Biologists]]></title>
    <url>%2F2018%2F01%2F15%2F%20Lesson%2001%20for%20Plotting%20in%20R%20for%20Biologists%2F</url>
    <content type="text"><![CDATA[简介老早之前就知道了这门课Plotting in R for Biologists,一直没有去学习一下，最近花时间看了一遍videos，发现讲的很不错，虽然有一节有一知识点讲的不是很清楚。学了一遍之后记点笔记，这是lesson1的学习笔记。这一节主要讲了数据读取、快速绘图以及图形保存。 数据12345library(ggplot2)filename &lt;- &quot;/home/taoyan/Plotting in R for Biologists/Lesson-01/Encode_HMM_data.txt&quot;my_data &lt;- read.csv(filename, sep=&quot;\t&quot;, header=FALSE)# 查看一下数据head(my_data) 1234567## V1 V2 V3 V4 V5 V6 V7 V8 V9## 1 chr1 10000 10600 15_Repetitive/CNV 0 . 10000 10600 245,245,245## 2 chr1 10600 11137 13_Heterochrom/lo 0 . 10600 11137 245,245,245## 3 chr1 11137 11737 8_Insulator 0 . 11137 11737 10,190,254## 4 chr1 11737 11937 11_Weak_Txn 0 . 11737 11937 153,255,102## 5 chr1 11937 12137 7_Weak_Enhancer 0 . 11937 12137 255,252,4## 6 chr1 12137 14537 11_Weak_Txn 0 . 12137 14537 153,255,102 对数据列名重命名12names(my_data)[1:4] &lt;- c(&quot;chrom&quot;,&quot;start&quot;,&quot;end&quot;,&quot;type&quot;)head(my_data) 1234567## chrom start end type V5 V6 V7 V8 V9## 1 chr1 10000 10600 15_Repetitive/CNV 0 . 10000 10600 245,245,245## 2 chr1 10600 11137 13_Heterochrom/lo 0 . 10600 11137 245,245,245## 3 chr1 11137 11737 8_Insulator 0 . 11137 11737 10,190,254## 4 chr1 11737 11937 11_Weak_Txn 0 . 11737 11937 153,255,102## 5 chr1 11937 12137 7_Weak_Enhancer 0 . 11937 12137 255,252,4## 6 chr1 12137 14537 11_Weak_Txn 0 . 12137 14537 153,255,102 绘图对不同染色体上的不同type绘制柱形图1ggplot(data = my_data, aes(x= chrom, fill= type))+geom_bar() 保存如果想直接保存图片到文件中，可以用dev.off，R语言支持多种图形类型 1234567891011121314151617181920png("Lesson-01/plot.png")ggplot(my_data,aes(x=chrom,fill=type)) + geom_bar()dev.off()tiff("Lesson-01/plot.tiff")ggplot(my_data,aes(x=chrom,fill=type)) + geom_bar()dev.off()jpeg("Lesson-01/plot.jpg")ggplot(my_data,aes(x=chrom,fill=type)) + geom_bar()dev.off()pdf("Lesson-01/plot.pdf")ggplot(my_data,aes(x=chrom,fill=type)) + geom_bar()dev.off()# 设置清晰度png("Lesson-01/plot_hi_res.png",1000,1000)ggplot(my_data,aes(x=chrom,fill=type)) + geom_bar()dev.off() 这节课比较简单，没什么知识点，当然如果R语言没入门的话读个数据都困难重重，所以如果基础不太好的可以直接去youtube看视频，讲的很详细。 ##SessionInfo1sessionInfo() 123456789101112131415161718192021222324252627282930## R version 3.4.3 (2017-11-30)## Platform: x86_64-pc-linux-gnu (64-bit)## Running under: Ubuntu 17.10## ## Matrix products: default## BLAS: /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3## ## locale:## [1] LC_CTYPE=zh_CN.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=zh_CN.UTF-8 LC_COLLATE=zh_CN.UTF-8 ## [5] LC_MONETARY=zh_CN.UTF-8 LC_MESSAGES=zh_CN.UTF-8 ## [7] LC_PAPER=zh_CN.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] ggplot2_2.2.1## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.14 digest_0.6.14 rprojroot_1.3-2 plyr_1.8.4 ## [5] grid_3.4.3 gtable_0.2.0 backports_1.1.2 magrittr_1.5 ## [9] evaluate_0.10.1 scales_0.5.0 pillar_1.1.0 rlang_0.1.6 ## [13] stringi_1.1.6 lazyeval_0.2.1 rmarkdown_1.8 labeling_0.3 ## [17] tools_3.4.3 stringr_1.2.0 munsell_0.4.3 yaml_2.1.16 ## [21] compiler_3.4.3 colorspace_1.3-2 htmltools_0.3.6 knitr_1.18 ## [25] tibble_1.4.1 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>Biologists</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一步步教你如何绘制GWAS中的曼哈顿图以及QQ图]]></title>
    <url>%2F2018%2F01%2F11%2F%E4%B8%80%E6%AD%A5%E6%AD%A5%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E7%BB%98%E5%88%B6GWAS%E4%B8%AD%E7%9A%84%E6%9B%BC%E5%93%88%E9%A1%BF%E5%9B%BE%E4%BB%A5%E5%8F%8AQQ%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[简介GWAS研究中的曼哈顿图以及QQ图可以说是标配了，至于具体如何理解这两个图，可以参考我以前的博客。上周我利用自己的数据跑了个GWAS，我是利用GAPIT跑的，出的图感觉真心丑，大家可以看看： 所以我利用GAPIT出来的数据重新画了图，用的就是包qqman。 安装Github主页上提供了三种安装方式：123456# Install the stable release from CRAninstall.packages("qqman")# 直接从Github上安装devtools::install_github("stephenturner/qqman")# 从Github上安装最新的开发版devtools::install_github("stephenturner/qqman",ref="dev") 数据格式qqman里内置了一套数据集gwasResults123library(qqman)dim(gwasResults)## [1] 16470 4 1head(gwasResults) 1234567## SNP CHR BP P## 1 rs1 1 1 0.9148060## 2 rs2 1 2 0.9370754## 3 rs3 1 3 0.2861395## 4 rs4 1 4 0.8304476## 5 rs5 1 5 0.6417455## 6 rs6 1 6 0.5190959 1str(gwasResults) 12345## 'data.frame': 16470 obs. of 4 variables:## $ SNP: chr "rs1" "rs2" "rs3" "rs4" ...## $ CHR: int 1 1 1 1 1 1 1 1 1 1 ...## $ BP : int 1 2 3 4 5 6 7 8 9 10 ...## $ P : num 0.915 0.937 0.286 0.83 0.642 ... 可以看到该数据集共有16470行，4列，分别为SNP名、染色体、SNP位置以及P值。该数据集不大，SNP标记十分少，通过每条染色体上的SNP标记可以看出1as.data.frame(table(gwasResults$CHR)) 1234567891011121314151617181920212223## Var1 Freq## 1 1 1500## 2 2 1191## 3 3 1040## 4 4 945## 5 5 877## 6 6 825## 7 7 784## 8 8 750## 9 9 721## 10 10 696## 11 11 674## 12 12 655## 13 13 638## 14 14 622## 15 15 608## 16 16 595## 17 17 583## 18 18 572## 19 19 562## 20 20 553## 21 21 544## 22 22 535 Manhattan plotqqman提供了一个绘制Manhattan plot的函数manhattan()。1manhattan(gwasResults) manhattan()提供了大量的参数设置：标题(main=)、y轴范围(ylim=)、控制点的大小(cex=)、x轴坐标轴标签的字体大小(cex.axis=)、颜色(col=)、阈值参考线控制(suggestiveline=, genomewideline=)、以及添加注释信息等。 1manhattan(gwasResults, main=&quot;Manhattan plot&quot;, ylim=c(0, 10), cex=0.6, cex.axis=0.9, col = c(&quot;blue&quot;,&quot;orange&quot;), suggestiveline = F, genomewideline = F, chrlabs = c(1:20, &quot;P&quot;,&quot;Q&quot;)) 还提供针对一条染色体数据进行绘图1manhattan(subset(gwasResults, CHR==3)) 对有显著性影响的SNP进行高亮(没有的话会忽略掉)1manhattan(gwasResults, highlight = snpsOfInterest) 针对特定染色体以及特定区间进行高亮1manhattan(subset(gwasResults, CHR==3), highlight=snpsOfInterest, xlim=c(200, 500), main=&quot;Chr 3&quot;) manhattan注释的时候默认注释每条染色体中P值最小且超过我们设定的p值阈值的SNP点，默认的P值阈值为0.011manhattan(gwasResults, annotatePval = 0.01) 我们可以通过自行设定参数注释所有超过P值阈值的SNP点1manhattan(gwasResults, annotatePval = 0.001, annotateTop = FALSE) manhattan可以绘制任意的value值，不限于p-value，只需要在设置中指定value值就行了。12gwasResults &lt;- transform(gwasResults, zscore=qnorm(P/2, lower.tail = FALSE))head(gwasResults) 1234567## SNP CHR BP P zscore## 1 rs1 1 1 0.9148060 0.1069785## 2 rs2 1 2 0.9370754 0.0789462## 3 rs3 1 3 0.2861395 1.0666287## 4 rs4 1 4 0.8304476 0.2141275## 5 rs5 1 5 0.6417455 0.4652597## 6 rs6 1 6 0.5190959 0.6447396 接下来利用value值zscore来绘制图形1manhattan(gwasResults, p = &quot;zscore&quot;, logp = FALSE, ylab=&quot;Z-score&quot;, genomewideline = FALSE, suggestiveline = FALSE, main=&quot;Manhattan plot of Z-scores&quot;) 需要注意的几点： 数据集列名默认是SNP、CHR、BP和P，因此如何自己的数据集列名与此不一致的话，要么转为一致，要么绘图时指定chr=、bp=、p=和snp=。具体情况可见help(manhattan)。 染色体编号那一列必须是数值型，如果数据集中有”X”、”Y”以及”MT”等染色体，想要转为数值型编号再在绘图时指定坐标名 manhattan只提供了修改snp点的颜色参数，如果要修改阈值线、高亮、注释等的颜色，需要修改源码。 QQ图qqman提供了绘制QQ图的函数qq() 1qq(gwasResults) 通过参数设置可以指定点的类型、大小、颜色等1qq(gwasResults$P, main=&quot;Q-Q plot of GWAS p-value&quot;, xlim=c(0,7), ylim=c(0,12), pch=18, col = &quot;blue4&quot;, cex=1.5, las=1) SessionInfo1sessionInfo() 123456789101112131415161718192021222324## R version 3.4.3 (2017-11-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 16299)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] qqman_0.1.3## ## loaded via a namespace (and not attached):## [1] compiler_3.4.3 backports_1.1.2 magrittr_1.5 rprojroot_1.3-2## [5] tools_3.4.3 htmltools_0.3.6 yaml_2.1.16 Rcpp_0.12.14 ## [9] calibrate_1.7.2 stringi_1.1.6 rmarkdown_1.8 knitr_1.18 ## [13] stringr_1.2.0 digest_0.6.13 evaluate_0.10.1 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>GWAS</category>
      </categories>
      <tags>
        <tag>GWAS</tag>
        <tag>QQ Plot</tag>
        <tag>Manhattan Plot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生物信息学学习笔记（七）]]></title>
    <url>%2F2018%2F01%2F07%2F%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Polycomb group(PcG)蛋白是一组通过染色质修饰调控靶基因的抑制子，从生化和功能上可以分为两个主要的核心蛋白复合体PRC1(Polycomb repressive complex 1)和PRC2(Polycomb repressive complex 2)。PcG蛋白家族是一类在进化上极为保守的转录抑制因子。 Pericentrometric区域是接近端粒的DNA序列，它们含有大量的重复片段即其进行拷贝的常染色质起源位置(euchromatic ancestral loci)非常相似的大量DNA序列，是基因组结构中迅速改变的区域。 曼哈顿图p值不是很大的位点从图上看要尽量压缩到下面，而p值显著的位点突出在上面才是一个好的曼哈顿图，不然数据质控有问题。QQ图只在尾巴上翘起，显示显著性位点，如果从开始就偏离了，数据质控就有问题了。 基因组重测序中除了ACGT之外的其他字母含义： R =&gt; AG Y =&gt; CT M =&gt; AC K =&gt; GT S =&gt; CG W =&gt; AT 关于GWAS数据过滤的问题（摘自微信公众号：解螺旋的矿工） 现在较难定义常规GWAS，现在的GWAS方向已经从基于芯片数据的关联分析往基因组重测序数据关联分析偏转。如果完全基于genotype进行关联分析，数据过滤通常包括：genotype missing rate &lt; 90%，chi-square test of HWE &gt; 1e-06，minor allele frequency &gt; 0.01等，这个过程可以使用plink或者自己造轮子完成过滤。当然过滤的阈值与样本量及最终结果有关，一般需要个性化调试。功效更加大的做法是基于imputed genotype probability进行关联分析，此时需要在GWAS之前先做imputation，imputation过程会产生info score,过滤标准一般是info score &gt; 0.4,chi-square test of HWE &gt; 1e-06，minor allele frequency &gt; 0.01等，当然有时也需要进行个性化调试。GWAS只要inflation控制的好（GC lambda接近1，控制的要素是covariates的设定来解决population stratification），不需要太关心过滤的问题，甚至可以不过滤直接画曼哈顿图看是否有关联信号。大多数情况过滤不是影响能否获得有生物学意义位点的关键因素。 QQ图可以用来估计我们GWAS所用的模型能够多大程度地显示群体结构和群体相关性。由于大部分的SNP与性状是不相关联的，因此大部分的点应该是落在对角线上，偏离对角线表明伪关联性，主要是由于群体结构以及群体之间的相关性导致的。我们期望得到的是对角线上方的偏离，这往往意味着这些SNP与我们所研究的性状是可能关联的。 高水平的杂合率意味着低质量，在近交系snp中超过50%的杂合率说哦名数据是有问题的，不是很适合用来接下来的GWAS分析。 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>bioinformatics</category>
      </categories>
      <tags>
        <tag>GWAS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用ggmap绘制简单地图]]></title>
    <url>%2F2018%2F01%2F03%2F%E5%88%A9%E7%94%A8ggmap%E7%BB%98%E5%88%B6%E7%AE%80%E5%8D%95%E5%9C%B0%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[简介ggmap允许用户从Google地图下载并绘制地图。并且ggmap完美契合ggplot2，因此经ggmap绘制的图形可以作为ggplot2的图层，进而在此基础上不断添加图形元素形成十分复杂的图形。ggplot2+ggmap是地理可视化的利器。 安装安装方法有两种：1234# From CRANinstall.packages("ggmap")# From Github,必须先安装devtoolsdevtools::install_github("dkahle/ggmap") 绘制先画个杭州的地图，由于调用的是Google地图，可能需要翻墙，同时速度有点慢（访问的是Google地图数据库，由于网络限制数据抓取可能不完整）。 1234library(tidyverse)library(ggmap)map.hangzhou &lt;- get_map(&quot;Hangzhou&quot;)ggmap(map.hangzhou) 这里我们只使用了两个函数，分别是get_map()从Google中检索并下载地图，之后使用函数ggmap()绘制地图。同时ggmap支持管道操作(%&gt;%)。1get_map(&quot;Hangzhou&quot;)%&gt;%ggmap() 现在我们绘制中国地图 1get_map(&quot;China&quot;)%&gt;%ggmap() 可以看出画出来的图形十分不美观，加上zoom参数之后好看一点。1get_map(&quot;China&quot;, zoom=4)%&gt;%ggmap() 我们再来看一下天安门1get_map(&quot;Tiananmen&quot;,zoom=18)%&gt;%ggmap() 应该足够清晰了再来看看浙江大学的情形,这里默认显示的是玉泉校区1get_map(&quot;ZheJiang University Zijingang Campus&quot;, zoom = 17)%&gt;%ggmap() 接下来我们将浙江大学在杭州的几个校区标识出来，分别是紫金港、玉泉、华家池、西溪、之江12345678910# 首先创建含有校区名字的数据集df.zjucampus_locations &lt;- tibble(location=c(&quot;Zhejiang university Zijingang Campus,Hangzhou,China&quot;,&quot;Zhejiang university Yuquan Campus,Hangzhou,China&quot;,&quot;Zhejiang university Zhijiang Campus,Hangzhou,China&quot;,&quot;Zhejiang university Huajiachi Campus,Hangzhou,China&quot;,&quot;Zhejiang university Xixi Campus,Hangzhou,China&quot;))# 获取经纬度geo.zjucampus_locations &lt;- geocode(df.zjucampus_locations$location)# 合并数据集df.zjucampus_locations &lt;- cbind(df.zjucampus_locations,geo.zjucampus_locations)# 绘制图形，在地图上将几个校区标识出来get_map(&quot;Hangzhou&quot;, zoom = 11)%&gt;%ggmap()+ geom_point(data=df.zjucampus_locations, aes(x=lon, y=lat), color=&quot;red&quot;, size=5)+ geom_text(data = df.zjucampus_locations,aes(lon, lat, label=c(&quot;Zhejiang university Zijingang Campus&quot;,&quot;Zhejiang university Yuquan Campus&quot;,&quot;Zhejiang university Zhijiang Campus&quot;,&quot;Zhejiang university Huajiachi Campus&quot;,&quot;Zhejiang university Xixi Campus&quot;)), size=3, color=&quot;blue&quot;) 由于网络限制就不调整了，这次能出图已经不容易了。可以看到玉泉校区与华家池校区竟然重叠在一起，通过它们的经纬度数据也发现相同，可能Google地图数据库对于国内来说还不是很好用，但是没办法调用百度地图只能很好的获取国内地图数据，一遇到国外的就歇菜了！ SessionInfo12345678910111213141516171819202122232425262728293031sessionInfo()R version 3.4.3 (2017-11-30)Platform: x86_64-w64-mingw32/x64 (64-bit)Running under: Windows &gt;= 8 x64 (build 9200)Matrix products: defaultlocale:[1] LC_COLLATE=Chinese (Simplified)_China.936 LC_CTYPE=Chinese (Simplified)_China.936 [3] LC_MONETARY=Chinese (Simplified)_China.936 LC_NUMERIC=C [5] LC_TIME=Chinese (Simplified)_China.936 attached base packages:[1] stats graphics grDevices utils datasets methods base other attached packages: [1] ggmap_2.6.1 forcats_0.2.0 stringr_1.2.0 dplyr_0.7.4 purrr_0.2.4 [6] readr_1.1.1 tidyr_0.7.2 tibble_1.4.1 ggplot2_2.2.1.9000 tidyverse_1.2.1 loaded via a namespace (and not attached): [1] reshape2_1.4.3 haven_1.1.0 lattice_0.20-35 colorspace_1.3-2 yaml_2.1.16 [6] rlang_0.1.6 pillar_1.0.1 foreign_0.8-69 glue_1.2.0 sp_1.2-5 [11] modelr_0.1.1 readxl_1.0.0 bindrcpp_0.2 jpeg_0.1-8 bindr_0.1 [16] plyr_1.8.4 munsell_0.4.3 gtable_0.2.0 cellranger_1.1.0 rvest_0.3.2 [21] RgoogleMaps_1.4.1 mapproj_1.2-5 psych_1.7.8 knitr_1.18 parallel_3.4.3 [26] proto_1.0.0 broom_0.4.3 Rcpp_0.12.14 geosphere_1.5-7 scales_0.5.0.9000[31] jsonlite_1.5 mnormt_1.5-5 rjson_0.2.15 hms_0.4.0 png_0.1-7 [36] stringi_1.1.6 grid_3.4.3 cli_1.0.0 tools_3.4.3 maps_3.2.0 [41] magrittr_1.5 lazyeval_0.2.1 crayon_1.3.4 pkgconfig_2.0.1 xml2_1.1.1 [46] lubridate_1.7.1 assertthat_0.2.0 httr_1.3.1 rstudioapi_0.7 R6_2.2.2 [51] nlme_3.1-131 compiler_3.4.3 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>地图</tag>
        <tag>ggmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习概念及算法类型]]></title>
    <url>%2F2017%2F12%2F25%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9A%E4%B9%89%E4%BB%A5%E5%8F%8A%E7%AE%97%E6%B3%95%E7%B1%BB%E5%9E%8B%E5%88%9D%E6%8E%A2%2F</url>
    <content type="text"><![CDATA[机器学习机器学习是什么？Arthur Samuel在1959年将机器学习定义为在特定编程的情况下，给予计算机学习能力的领域。他编写了一个西洋棋程序让计算机自己不断下棋进而进行学习，最后棋艺大涨，远远超过了Samuel自己的水平。来自卡内基梅隆大学的Tom Mitchell在1998年将机器学习定义为：一个程序被认为能够从经验E中学习，解决了任务T，达到性能度量值P，当且仅当有了经验E后经过P评判，程序在处理T时的性能有所提升。E也就是计算机自己不断学习，学会了如何解决问题T，并且达到了一定的成功率P。 目前存在几种不同类型的学习算法，主要的两种类型为监督学习(Supervised learning)以及无监督学习(Unsuoervised learning)。 监督学习监督学习又叫回归问题，意指要预测一个连续值的输出，也可以用于分类问题预测，在监督学习中，数据集中的每个例子，算法将预测得到例子的“正确答案”，比如预测房价、肿瘤类型等。监督学习实际运用中我们需合理判断出我们要解决的问题是回归问题还是分类问题。 无监督学习监督学习中的数据集我们知道每一个数据代表的意思，比如房子多大对应房价多少，肿瘤多大对应是恶性肿瘤。但是在无监督学习中只有数据集，我们对这个数据集完全不了解，数据集中的数据没有属性或标签这一概念。也就是说数据集中的数据都是一样的没有区别。 比如上图中我们看到所有的数据都是一样的，没有属性与标签的区别，计算机通过无监督学习可能会将数据分成两类，也就是聚类。联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生物信息学学习笔记（六）]]></title>
    <url>%2F2017%2F12%2F24%2F%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Tajima’s D值检验Tajima’s D值检验的目的是鉴定目标DNA序列在进化过程中是否遵循中性进化模型。当Tajima’s D显著大于0时，可用于推断瓶颈效应和平衡选择，当Tajima’s D显著小于0时，可用于推断群体规模放大和定向选择。由于平衡选择和定向选择均属于正选择的范畴，因此只要D值显著背离0，就可能是自然选择的结果，当D值不显著背离0时，中性假说则不能被排除。连锁不平衡程度高的染色体可能是由于在现代育种和栽培过程中那些与重要农艺性状相关的QTLs或基因被人工或自然选择保留下来，进而使得这些染色体受到强选择增强了其LD程度。另外LD的衰减距离也决定了关联分析所需要的标记密度和作图精度，LD衰减越快关联分析所需要的标记就越多，作图精度也越高。 遗传渗透分析亚洲栽培油菜(主要是中国半冬性油菜)从欧洲引入亚洲之后导入了油菜亲本之一白菜的遗传成分，这样拓宽了半冬性油菜A亚基因组的遗传多样性，导致半冬性油菜在A亚基因组上的遗传距离增加，LD衰减加快。半冬性油菜在上世纪30-40年代从欧洲直接或间接通过日本引进中国之后正在经历群体扩张，而且这种扩张还在继续。甘蓝和油菜杂交是不亲和的，油菜在栽培驯化中A、C亚基因组间存在很强的基因流渗透现象。 选择性消除分析选择性消除(Selective sweep)是由于某一位点受到强选择后，其周围的位点的多态性因受该位点牵连而发生多态性降低的现象。也可以认为某个位点发生突变，突变后的位点因对物种在特定的情况下有利或者受到了人为选择，那么该突变位点在群体中的频率必然提高，但是其附近和它处在同一单体型或者block的其它位点同样跟着受到了选择，频率发生了提高，也就是单体型内的其它多态位点的某一多态形式比率大大提高，从而降低了整个周围区域的多态性。 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>bioinformatics</category>
      </categories>
      <tags>
        <tag>evolution</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图形组合R包patchwork]]></title>
    <url>%2F2017%2F12%2F18%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8B%E5%9B%BE%E5%BD%A2%E7%BB%84%E5%90%88R%E5%8C%85patchwork%2F</url>
    <content type="text"><![CDATA[平常我们绘制图形的时候常常要将几幅图形组合在一起，有很多R包可以用于图形组合，经典的是gridExtra，还有egg。今天介绍一个新包patchwork 安装12# install.packages("devtools")devtools::install_github("thomasp85/patchwork") 例子patchwork的使用非常简单，就是利用+将图形组合起来。123456library(ggplot2)library(patchwork)p1 &lt;- ggplot(mtcars)+geom_point(aes(mpg, disp))p2 &lt;- ggplot(mtcars)+geom_boxplot(aes(gear, disp, group=gear))# Combine these two plots togetherp1+p2 布局patchwork提供了一个专门用于图形布局的函数plot_layout()，这样我们就可以自定义布局的行列数了 1p1+p2+plot_layout(ncol = 1, heights = c(3,1)) 如果需要在组合的图形之间留点空间，使用plot_spacer()就行了 1p1+plot_spacer()+p2 还可以将不同图形用{}封装，这样可以实现双重布局1234567891011p3 &lt;- ggplot(mtcars)+geom_smooth(aes(disp, qsec))p4 &lt;- ggplot(mtcars)+geom_bar(aes(carb))# nested plots layoutp4+&#123; p1+&#123; p2+ p3+ plot_layout(ncol = 1) &#125;&#125;+ plot_layout(ncol = 1) 高级参数patchwork还提供了一些高级参数，比如/,/类似于操作符+，但是它可以将不同plots至于同一个nesting水平，具体如下：12# first we use + to add plots and layout(p1+p2)+p3+plot_layout(ncol = 1) 可以看出p1+p2组合之后并没有处于同一nesting水平12# then we use /(p1+p2)/p3 + plot_layout(ncol = 1) 此时p1+p2先组合在同一水平再与p3组合 另外再介绍两个操作符：*和^这两个有点类似于正则表达式里的通配符了，主要是为了减轻代码量。比如如果我们需要修改所有plots的背景，就没必要每个plot都修改一遍了。这两个操作符的主要区别是*只改变处于当前nesting水平的所有plots，^则修改所有plots，具体如下： 1(p1+(p2+p3)+p4+plot_layout(ncol = 1))*theme_bw() 可以看到这里只修改了p1和p4的背景主题，(p2+p3)没有修改 1(p1+(p2+p3)+p4+plot_layout(ncol = 1))^theme_bw() 这里所有的plots的主题背景都被修改了。目前这个包还处于开发阶段，将来还有很多功能会被加进去，我们拭目以待吧 SessionInfo1234567891011121314151617181920212223242526272829sessionInfo()## R version 3.4.3 (2017-11-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 16299)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] patchwork_0.0.1 ggplot2_2.2.1.9000## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.14 digest_0.6.13 rprojroot_1.2 ## [4] plyr_1.8.4 grid_3.4.3 gtable_0.2.0 ## [7] backports_1.1.2 magrittr_1.5 evaluate_0.10.1 ## [10] scales_0.5.0.9000 rlang_0.1.4 stringi_1.1.6 ## [13] lazyeval_0.2.1 rmarkdown_1.8 labeling_0.3 ## [16] tools_3.4.3 stringr_1.2.0 munsell_0.4.3 ## [19] yaml_2.1.16 compiler_3.4.3 colorspace_1.3-2 ## [22] htmltools_0.3.6 knitr_1.17 tibble_1.3.4 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>图形组合</tag>
        <tag>patchwork</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生物信息学学习笔记（五）]]></title>
    <url>%2F2017%2F12%2F09%2F%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%2F</url>
    <content type="text"><![CDATA[全基因组水平的连锁不平衡(LD)和遗传结构分析当r2=0.1时，A亚基因组的衰退距离为0.35-0.4Mb，而C亚基因组的衰退距离为3.5-4Mb，说明甘蓝型油菜A亚基因组发生了更多的重组，使得衰退距离显著小于C亚基因组。重组的发生会打破LD，将那些容易发生重组，LD相对较低的区域称为LD热点，反之称为LD冷点。通过全基因水平的LD热点和冷点研究发现，78.16%的LD热点分布在A亚基因组而72.59%的LD冷点分布在C亚基因组。另外LD热点区间的基因密度是冷点区间的2倍多，GC含量也多于冷点区间，但是冷点区间内含有更多的转座子，这和LD反映的结果一致，说明了甘蓝型油菜A亚基因组的遗传变异更加丰富。 关联分析的基础——连锁不平衡生物在进化过程中，对于某一特定基因座，在自然和人工选择、重组与突变、遗传漂变、群体扩张和瓶颈效应等因素的影响下，某一“有利”变异（或等位基因）在正向选择的过程中被保留下来，与该基因座紧密连锁的两侧一定范围内的序列也会随着该“有利”等位基因的固定而被大量保留下来，从而使其遗传多样性大大降低，遗传学上将这种个别基因的正向选择致使其侧翼遗传多样性降低的现象称为选择牵连效应或者选择性消除。由于基因座间的选择牵连效应，使群体内个体在不同位点、基因间发生非随机性关联，即连锁不平衡，又称等位基因关联。它包括染色体内和染色体间的连锁不平衡，前者是关联分析的基础，具体指当位于同一染色体的两对等位基因同时存在的概率大于群体内因随机分布而同时出现的概率时，就称这两个位点处于LD状态。连锁不平衡并不等同于遗传连锁，它们之间相辅相成，连锁不平衡是指在两个或者多个位点上的非随机关联性，这些位点既可能在同一条染色体上，也可以在不同染色体上，只要两个位点同时出现的概率大于群体随机组合的概率就说明这两个位点处于连锁不平衡状态，而遗传连锁主要考虑的是重组率，连锁的基因在染色体上的位点相距越远，他们之间发生交换的几率就越大，重组率就越高，连锁就越弱。当然两个位点处于完全连锁状态其等位基因间也存在较强的连锁不平衡。 LD的原理及度量LD的统计是实际观测到的单倍型的频率与随机分离时期单倍型的频率之间的差异(D)。LD的度量一般是对D进行归一化后，用LD系数D’和r2进行检验，其中D’(AB)=D(AB)/(fA*fB),r2(AB)=D2(AB)/(fA*fa*fB*fb)，这里D’和r2的变化范围都是从0到1。LD反映样本的重组史，敏感度更高，适合小样本的研究，而r2除了能反映样本的重组史还能反映突变史，所以r2更能客观地反映不同基因间的连锁不平衡关系 LD的影响因素LD是由突变或重组造成的，在染色体某一SNP附近有新的突变发生时则LD出现。LD强度与2个SNP间的距离有关，距离越小则发生重组的机会越小，LD就越强。所以LD重度与重组率和突变率均呈反比；另外遗传漂变(群体较小，导致群体中基因频率随机波动的现象)和奠基者效应(是一种剧烈的漂变，指一个小群体从一个大群体中分离出来并逐渐发展壮大的现象)都会增强LD，基因突变可导致野生等位基因之间LD水平的降低，也可导致突变等位基因之间LD水平的提高。LD的衰减指位点之间由连锁不平衡到连锁平衡的演变过程，能够很好的反映LD程度。自花授粉植物的重组率要普遍低于异花授粉植物，所以异花授粉植物的LD衰减距离就要大些，常染色质组成的着丝粒区域的LD的衰减速度快于由异染色质组成的各个染色体臂，基因富集的区域的LD衰减比较快。 植物中影响LD的因素 因素 对LD的影响 授粉方式 自交植物有效重组数少于异交植物，LD衰减慢 染色体位置 异染色质区交换少于常染色质区，LD衰减慢 基因区 基因富集区，LD衰减快 瓶颈效应 有效群体数目减少，增加LD 遗传漂变 增加LD 奠基者效应 增加LD 群体分化 增加LD 群体大小 小群体，增加LD 选择 增加受选择区段的LD 突变 造成LD总体水平的降低，但新产生突变的染色体位置LD水平升高 基因转换 降低LD 等位基因频率 最小等位基因频率增加，增加LD 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>bioinformatics</category>
      </categories>
      <tags>
        <tag>LD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生物信息学学习笔记（四）]]></title>
    <url>%2F2017%2F12%2F06%2F%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[最近看了华中农业大学张献龙老师发在Nature Genetics上的文章Asymmetric subgenome selection and cis-regulatory divergence during cotton domestication以及第一作者王茂军博士的博士毕业论文，十分精彩，故学习之并做适当笔记。 通过分析四倍体棉花At和Dt亚组同源基因甲基化和表达量之间的关系，推测不同亚组基因的表观修饰差异可能是基因偏向性表达的原因之一 部分名词解释： H3K27me3：组蛋白H3上第27位赖氨酸三甲基化 H3K4me1：组蛋白H3上第4位赖氨酸一甲基化 H3K4me3：组蛋白H3上第4位赖氨酸三甲基化 H3K9me2：组蛋白H3上第9位赖氨酸二甲基化 不同作物基因组大小差异非常大，这主要是由于重复序列和转座子的插入与丢失造成的。对于二倍体来说，不同作物基因数量与基因组大小并不显著相关，基因数量一般在3万到4万之间 不同作物生物学特性与其对应的基因的扩增与丢失，基因表达的差异有关 同一作物的不同材料之间基因组序列变异非常大，因此需要测序群体基因组去研究 DNA甲基化是一种重要的表观调控机制。在植物中发生在胞嘧啶上的DNA甲基化主要存在三种形式：对称形式的CG，CHG和非对称形式的CHH(H=A,T或者C) 植物种DNA甲基化主要发生在转座子区域和其他高度重复序列区域 组蛋白修饰是另外一种非常重要的表观遗传修饰，参与异染色质区域转座子的失活调控，同时调控植物发育和环境响应相关途径。组蛋白甲基化存在于赖氨酸和精氨酸上，通过依赖组蛋白赖氨酸甲基转移酶和精氨酸甲基转移酶建立，这些酶都被称为写入器，组蛋白甲基化之后能够被特定蛋白识别，然后参与不同生物学过程的调控，这些识别蛋白被称为阅读器。组蛋白甲基化的存在是动态的，可以被一些蛋白清除，这些蛋白被称为清除器 DNA甲基化和组蛋白修饰在基因上的分布和对基因表达的影响 利用DNase Ⅰ酶切染色质并收集酶切片段进行测序(DNase-Seq),可以高通量鉴定顺式调控元件。DNase-Seq可以用于鉴定DNase Ⅰ酶切超敏感位点，这些位点通常对应顺式调控元件。DNase Ⅰ酶切位点不是均匀的，被转录因子结合的位点会阻止酶切，这些位点的酶切效率很低。通过分析DNase Ⅰ酶切足迹，可以在单核苷酸水平鉴定转录因子结合位点 顺式作用元件调控基因转录的模式图 除了启动子区域外，增强子是另外一种重要的顺势调控元件。DNase-Seq鉴定的DHS包含大量增强子区域，增强子能够招募装录因子，从而促进靶标基因的表达，这种作用常常以细胞特异或组织特异的形式存在。增强子的作用与靶标基因的物理位置和方向关系较小，因此增强子元件可以位于基因组的不同位置。 基因表达的可变剪接是在pri-mRNA水平进行的能增强蛋白多样性的一种机制。可变剪接事件可以分为五种基本类型，包含内含子保留(IR)，外显子跳跃(ES),可变供体(AD)，可变受体(AA)和可变位置(AP)，其中IR在植物中占据绝大部分 祖先染色体构建 为了分析驯化选择在不同亚基因祖上的差异性，构建棉花的At和Dt亚组的祖先染色体。因为两个亚组的基因组大小差异巨大，在构建祖先染色体的时候，只使用了共线性区段的基因对。共线性区段是通过MCScanX软件鉴定出来的，规定最小共线性区段必须包括5个基因。同时将两个亚组的基因做相互blastp分析，保留最好的匹配结果。结合共线性区段和blastp的结果，得到最终的亚组之间的同源基因。这些同源基因必须同时被这两种方法检测。提取这些同源基因上下游2kb的区段与基因区域一起构建祖先染色体。祖先染色体上的基因顺序依据于Dt亚基因祖上的基因排列顺序 可以通过DNase-Seq测序鉴定棉花基因组上的顺式调控元件主要是根据顺式调控元件通常位于开放的染色质区域，很容易被核酸酶切 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>bioinformatics</category>
      </categories>
      <tags>
        <tag>Hi-C</tag>
        <tag>DHSs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生物信息学学习笔记（三）]]></title>
    <url>%2F2017%2F12%2F04%2F%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[CpG位点(CpG sites，CG位点)：指DNA的某个区域，其上的碱基序列以胞嘧啶接着鸟嘌呤出现。CpG是“—C—磷酸—G—”的缩写，指磷酸二脂键连接了胞嘧啶和鸟嘌呤，其中C位于5’端而G位于3’端。在CpG位点中的胞嘧啶可以被甲基化为5-甲基胞嘧啶，基因内CpG位点的甲基化会改变基因的表达 顺式调控元件 启动子(promoter)：指导RNA聚合酶并起始DNA转录的一段DNA序列，该序列往往位于编码基因的上游，可以调控目标基因表达的程度、时间和组织等。通常核心启动子都具有一些特征序列，这些特征序列称为基序(motif),常见的基序有TATA盒(TATA box)等。 增强子和沉默子：指DNA分子上可以与特定蛋白相结合从而正向或负向调控基因表达的顺式作用元件。其中增强子与蛋白结合之后，基因的转录水平会增强，其位置可以位于启动子上游、基因内、基因下游或基因区间，甚至于被调控基因不在同一条染色体上，这是由于增强子主要依靠空间作用来调控基因表达。 绝缘子：绝缘子是一种长程调控元件，主要有两类。第一类主要功能是阻遏邻近的调控元件如增强子。绝缘子发挥功能时具有方向性，其可以阻断增强子与启动子的作用，从而导致增强子的目标基因表达下调。第二类是异染色质的边界原件。由于异染色质包装折叠较常染色体显得更加紧密，异染色质中的基因很少表达，而第二类绝缘子可以在异染色质的边界阻断异染色质结构的延伸，保证边界另一侧的基因表达不受影响。 转录水平的调控是真核基因表达调控的关键环节，染色质对DNase Ⅰ的敏感性与基因转录有关。基因活化使其染色质一呈开放的疏松型构象，更易被DNase Ⅰ降解，形成DNase Ⅰ超敏感位点(DNase Ⅰ hypersensitive site，DHSs).DHSs不仅与染色质的开放度相关，还与启动子、增强子、绝缘子以及沉默子等元件相偶联，并且染色质上具有调控功能的DNA序列、调控蛋白结合位点也与DHSs重叠 DHSs是一段跨度为数百碱基对，甲基化程度较低，对DNase Ⅰ具有高度敏感性的染色质区域，可富集转录因子和重要酶类，具有转录调控功能 染色质由一系列盘绕着DNA的核小体组成，转录因子在与基因结合时，取代了核小体的位置，baoluchuDNA，使其对DNase Ⅰ的切割更为敏感，在此基础上，利用染色质对DNase Ⅰ的敏感性鉴定活化的调控序列 DNase-seq方案包括用DNase Ⅰ优先切割核小体被取代的DNA序列，对生成的短片段进行测序并将其定位到基因组上以鉴定对敏感酶的“染色质开放”区域。一些转录因子的结合位点显示出高度特异性的DNase Ⅰ剪切模式。这种“Dnase 足迹”常被用来检测特定转录因子的结合 ATAC-seq(assay for transposase-accesiible chromatin using sequencing)：通过Tn5转座酶优先标记和测序核小体之间的DNA。类似于DNase-seq，但是步骤更为简单，所需细胞也更少 对DNase-seq片段进行双端测序，发现短片段主要源自于核小体之间的区域，而长片段跨越了核小体。研究指出短片段对鉴定转录因子的结合更有用，长片段可以提供核小体的间隔信息 研究人员发现由于DNase Ⅰ和Tn5的切割偏好性，之前许多Dnase印记分析反映的更多是切割偏好而不是转录因子的真实结合情况。 3D基因组 不同染色质在细胞核内的分布不是杂乱无章的，而是被限定在特定的“疆域”内，基因相对密集的染色质通常分布在远离核膜的位置，而基因稀疏的染色质则分布在靠近核膜的位置。在基因组上分离的染色质区段在空间上可能被拉到一起共同被转录，形成“转录工厂” 基因组区室是指存在于染色质上的相互间隔的连续区域，通常这些区域大小为1~10Mb，每个区域内的点具有相似的全基因组交互模式，根据交互模式的差异，这些区域可以分为两类：A类区室和B类区室。相同类型的区室具有相似的全基因组交互模式，其交互频率要显著高于不同类型区室之间的交互。A类区室往往代表基因富集的常染色质区域，B类区室则对应着基因稀疏的异染色质区域 拓扑相关结构域(TAD)则是位于高等动物染色质的更精细的结构单元，TAD被定义为这样一块块连续的染色质区域，区域内部互作强度要显著强于区域之间的互作。每个TAD通常只有200Kb~1Mb。 染色质位点的相互作用存在某种固有的模式，而这些模式与特定生物学过程/功能是无关的 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>bioinformatics</category>
      </categories>
      <tags>
        <tag>Hi-C</tag>
        <tag>DHSs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生物信息学学习笔记（二）]]></title>
    <url>%2F2017%2F11%2F29%2F%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Hi-C 拓扑相关结构域(TAD)是基因组上空间上分隔的一些DNA序列，TAD平均长度在1M左右，其中包含一个或数个基因以及基因的调控元件——增强子(enhancer)。增强子不仅控制基因的表达时间还控制基因在不同细胞中的选择性表达。TAD由边界原件(boundary elements，也称为绝缘子)相互隔离，因此TAD内部的基因活性独立于其它TAD 群体进化今天逛生信技能树的时候发现了ydchen写的一篇关于群体进化名词解释的帖子，写的很不错，所以我这里就copy一下了。要想生信学得好，还得多逛生信技能树 等位基因频率：在一个群体中某类等位基因占该基因位点上全部等位基因数的比率 基因型频率：群体中某一基因型个体占群体总个数的比例。可以反映某一基因型个体在群体中的相对数量 群体：指生活在一定空间范围内，能够互相交配并生育具有正常生殖能力后代的同种个体群 遗传平衡定律(又称为哈迪·温伯格定律)：一个不发生突变、迁移和选择的无限大的相互交配的群体中，群体的基因频率和基因型频率将逐代保持不变 适合度：指一个个体能够生存并将基因传给下一代的能力，可用相同环境中不同个体的相对生育率来衡量 突变压力：一定条件下，一个群体的突变率可明显增加形成突变压力，使某个基因频率增高 选择压力：受某种环境条件的影响，某些突变型被选择所作用，使突变基因的频率降低 选择系数：指在选择作用下降低的适合度 群体分层：指群体内存在亚群的现象，亚群内部个体间的相互关系大于整个群体内部个体间的平均亲缘关系 核苷酸多态性(π)：衡量特定群体多态性高低的参数，是指在同一群体中随机挑选的两条DNA序列在各个核苷酸位点上变异的均值。π值越大说明其对应的亚群多态性越高 群体间固定指数(Fst)：衡量群体中等位基因频率是否偏离遗传平衡论比例的指标，用来研究不同群体间的分化程度。其取值为0到1，0代表两个群体未分化，其成员间是完全随机交配的；1代表两个群体完全分化，形成物种隔离，且无共同的多样性存在 θw：Watterson’s 多态性估值，从理论上讲，在中性条件下应当有θw=4Neμ的平衡状态，Ne表示有效群体大小，μ表示每一代的序列突变率 连锁不平衡：相邻位点间的非随机关联，当一个位点上的某一等位基因与另一位点上的某一等位基因共同出现的概率大于随机组合的概率，则这两个位点存在连锁不平衡 瓶颈效应：由于环境骤变(如火灾、地震、洪水等)或者人类活动(如人工选择、驯化)，使得某一生物种群的规模迅速较少，仅有一小部分个体能够顺利通过瓶颈事件，在之后的恢复期内产生大量后代 随机遗传漂变：当一个种群中的生物个体的数量较少时，下一代的个体容易因为有的个体没有产生后代，或是有的等位基因没有传给后代，而和上一代有不同的等位基因频率。一个等位基因可能(在经过一个以上的世代后)因此在这个群体中消失或者固定成为唯一的等位基因。这种现象就是随机遗传漂变 奠基者效应：有少数个体的基因频率决定了他们后代中的基因频率的效应，是一种极端的遗传漂变作用 迁移压力(又称为基因流)：由于某种原因，具有某一基因频率的群体的一部分移入基因频率与其不同的群体中并杂交定居，就会引起迁入群体的基因频率发生改变 有效群体大小：指与实际群体具有相同的基因频率方差或相同杂合度衰减率的理想群体大小，它反映了群体平均近交系数增量的大小以及群体遗传结构中基因的平均纯度 中性学说：认为分子水平上的大多数突变是中性的或近中性的，自然选择对它们不起作用，这些突变靠一代又一代的随机漂变而被保存或趋于消失，从而形成分子水平上的进化性变化或种内变异 Tajima’s D值检验：在原有的平衡状态中θT=θW=4Neμ，所以D值为0，但是如果群体中存在许多低频率的等位基因(稀有等位基因)，使θT&lt;θW，则DθW，D&gt;0。Tajima把过多低频率等位基因的存在归咎为定向选择时，选择性消除会削弱原有等位基因在群体中的频率，而是新等位基因以低频率补充进来成为稀有等位基因。相反，如果中等频率等位基因占主导，则可能是平衡选择的结果，或者是种群大小在经历瓶颈效应时使稀有等位基因丢失。因此当Tajima’s D显著大于0时，可用于推断瓶颈效应和平衡选择；Tajima’s D显著小于0时，可用于推断群体规模放大和定向选择。由于平衡选择和正向选择都属于正选择的范畴，因此只要D值显著偏离0就可能是自然选择的结果，而当D值不显著偏离0时则中性零假说不能被排除 正选择：自然选择“选留”一些稀少的等位基因，拥有这些等位基因的个体能繁殖更多的后代，这样的突变基因往往具有与原来基因不同的功能，而且该功能使得拥有它的生物更能适应环境 负选择：自然选择淘汰一些稀少的等位基因，拥有这些等位基因的个体不能繁殖或者繁殖很少的后代，这些基因往往丧失了功能 平衡选择：是一种关于自然选择保持种群内遗传多态性的假说，是在一些等位基因上杂合的基因型的系列，这些等位基因的纯合体仅在正常的杂交群体中少量个体中存在，并且在适合度上低于杂合体，然后将会出现有利于在许多座位上发展复等位基因系列的选择压力 正向选择：是指生存环境中的方向性选择(自然选择)或品种的人工定向选择 选择性消除：指由于最近较强的正向自然选择，一个突变位点相邻DNA上的核苷酸之间的差异性下降或消除 微进化：群体在世代过程中等位基因频率的变化，成为微进化即发生在物种内的遗传变化 大进化：从现有物种中产生新物种的过程，是微进化扩展、累积的结果 趋同进化：在突变和选择的作用下，不同物种间具有趋同进化的趋势，这种现象称为趋同进化 遗传负荷：如果一个群体的突变不断积累，并且这些突变是有害的，就会出现适合度下降。这种现象称为遗传负荷 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogosJianShu: http://www.jianshu.com/u/bd001545cf0bBlog: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>bioinformatics</category>
      </categories>
      <tags>
        <tag>evolution</tag>
        <tag>Hi-C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生物信息学学习笔记（一）]]></title>
    <url>%2F2017%2F11%2F28%2F%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[生物信息学学习笔记主要是我平常看文献以及一些资料时总结的一些东西，相对来说有点杂，所以我专门开辟出一个新的系列，以便后面可以持续更新。 sequence logos方法利用每个位置的高度来表示其保守程度，这样特征高度就反映了相对的变化频率，比如说一个consensus sequence位置上可能是C或者T，sequence logos上C的高度代表了其出现的频率。 改良品种中LD显著增加，这是驯化正向选择的结果，栽培品种的π值、w值相比于野生种明显降低 顺式(cis-)指的是“分子内”，也就是说顺式作用就是自己作用于自己，就像顺式作用元件就是一段DNA序列作用于自己的临近序列，调节它的表达，比如我们常说的增强子、沉默子等。反式(tran-)指的是“分子间”的作用，所以反式作用因子就是一个蛋白质分子，是由A基因编码的，但是可以作用于B基因，调节B基因的表达。但是也存在少量的“顺式作用因子”。因子(factor)在分子生物学中就是特指DNA片段产生的物质，换句话说就是特指蛋白质，比如调节因子、转录因子等。元件(element)指的是DNA或者RNA具有某种特定功能的序列，换句话说就是DNA或者RNA的一片段。 染色质开放性 染色质开放性(chromatin accessibility)是指真核生物染色质DNA在核小体或转录因子等蛋白与其结合后，对其它蛋白能否再结合的开放程度。这一特征反映了染色质转录活跃程度，结合其他DNA修饰(如甲基化)信息，特定条件下的染色质开放性变化可以提供大量的基因表达调控信息，为各种蛋白质结合新位点的发现指明方向。 有趣的是染色质开放性变化往往是各种应激反应(stimulus response)、抗逆反应(stress response)或者发育阶段过渡(transition)发生时非常早期的细胞学事件。在癌症早期诊断和治疗、农作物逆境胁迫的早期防治等方面，染色质结构研究可以提供非常上游的宝贵信息。 检测染色质开放性的手段主要是足迹法(footprinting)，即利用外来蛋白(如核酸酶、修饰酶等)处理细胞核，再利用酶切、电泳、测序等手段衡量这些蛋白与DNA的结合程度，以此来体现染色质开放性。用于足迹法的外来蛋白主要是核酸酶，最开始简单除暴用的是Dnase Ⅰ，价格低廉，但需要大量的实验材料。DNase Ⅰ主要切割核小体未占据的DNA区域，生成的片段测序之后获得的就是染色质开放区域。后来又出现了MNase Ⅰ，其为外切酶，消化了开放区域之后，测序获得的就是当前状态下核小体或者转录因子等占据的封闭区域。因此二者互为补充。得益于二代测序技术的发展，ATAC-seq(Assay for transposase Accessible Chromatin with sequencing)是其中具备高灵敏度的一种方法。ATAC-seq使用Tn5转座酶，在开放区域跳转，边切割边加上接头，利用PCR技术富集开放区域片段，因此灵敏度高，甚至可以做单细胞测序。所有以核酸酶为基础的DNA足迹法都有一个致命的缺陷：核酸酶切割的偏好性(Bias)。有研究指出DNase Ⅰ切割无核小体和转录因子结合的“裸”DNA时展现出强烈的偏好性，之前许多DNase Ⅰ印记更多地反映是切割的偏好性而非真实的蛋白质结合情况，再加上植物材料由于其细胞结构的特殊性(主要是细胞壁的存在以及丰富的纤维素和多糖)，获取细胞核用于足迹法分析本身就是一个挑战。MAPit(methyltransferase accessibility protocol for individual templates)技术的出现解决了上述部分难题，MAPit利用外源DNA甲基化转移酶处理细胞核，染色质开放区域中的特定“C”位点可被甲基化，封闭区域中的相应“C”位点则不被甲基化，之后进行甲基化测序(Bisulfite sequencing)，从而精确显示染色质的开放程度。该技术利用DNA甲基化组来显示染色质开放性，避免了核酸酶的偏好性问题，且结果同时提供了DNA甲基化组和染色质开放性的信息，配合转录组测序(RNA-seq)，可一次性组合出特定状态下全基因组的甲基化修饰、蛋白结合以及基因表达调控的复杂网络，是功能强大的组合型分析。 单体型是指位于一条染色体特定区域的一组相互关联，并倾向于以整体遗传给后代的单核苷酸多态性的组合。简单地说就是同源染色体上同一位点的杂合SNP，如在某一位置同源染色体中一条为G，另一条染色体为A。单体型图谱能够将来自于亲本的遗传信息区分开，研究遗传变异。 Hi-C技术是染色体构象捕获(Chromosome Confirmation Capture,3C)的一种衍生技术，是指基于高通量进行染色体构象的捕获，它能够在全基因组范围内捕捉不同基因座位之间的空间交互，研究三维空间中调控基因的DNA元件。 Hi-C技术流程 用甲醛对细胞进行交联固定，使DNA与蛋白、蛋白与蛋白之间进行交联，这样会导致相互作用的DNA片段被交联在一起。 进行酶切(如Hind Ⅲ等限制性内切酶)，使交联两侧产生粘性末端，加入过量限制性内切酶将未交联的DNA与交联的DNA相互分离。限制酶的选择取决于需要分析的基因座位的情况，限制序列较短(4bp)的内切酶切点密集，用于研究较短的座位(10~20kp),而限制序列较长(6bp)的内切酶用于研究较长的座位。 末端修复，引入生物素标记，连接 解交联，使DNA和蛋白、蛋白与蛋白分开，提取DNA，打断，捕获带有生物素标记的片段，进行建库 测序 影响基因表达的染色质相互作用的例子之一是：染色体区域可以折叠将增强子以及相关转录因子带到基因附近。 拓扑关联结构域(TAD)是利用Hi-C map分析研究染色质构象信息时获取的一种图形现象，也是染色质局部相互作用较为强烈的一个作用单元，与基因转录表达调控有着密切关系。 2012年四个独立的研究小组利用Hi-C技术分析不同物种染色质构象信息时均发现了一种高度自我相互作用的基因组单元，并称之为拓扑关联结构域(TAD)，具有保守性 染色质环(chromatin loop)是染色质物理结构的特性之一。染色质中的调控元件一般都相距较远，比如启动子、增强子等距离调控基因位点均有一定间隔。随着3C技术和一些分子研究技术的证实，这些调控元件在三维空间上的距离要比它们之间的插入序列更近一些，因此形成了染色质环。染色质环通过控制启动子、增强子这些顺式调控元件来调控基因转录表达 拓扑关联结构域更像是染色质环在全基因组所有作用位点进行图谱分析时表现出来的一种现象 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>bioinformatics</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux学习笔记（九）]]></title>
    <url>%2F2017%2F11%2F26%2FLinux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%2F</url>
    <content type="text"><![CDATA[sed实例讲解上篇博客已经讲解了sed的基本命令及其使用方法，sed有两种方式进行调用：12sed [-n] [-e] 'command(s)' filessed [-n] -f scriptfile files sed各个选项替换命令：s命令sed的替换命令语法如下：1s/pattern/replacement/ 现在有一个包含3列10行的数据集chroms.txt：1234$ head -n 3 chroms.txtchrom1 3214482 3216968chrom1 3216025 3216968chrom1 3216022 3216024 我们要将chrom替换成chr：1234$ sed 's/chrom/chr/' chroms.txt |head -n 3chr1 3214482 3216968chr1 3216025 3216968chr1 3216022 3216024 不管是pattern还是replacement都是被两个斜杠/包围，叫做定界符，定界符不仅仅只有/，还有：|等sed有部分命令会直接修改原文件，所以使用过程中最后将结果redirect到一个新的文件 -n选项和p命令一起使用表示只打印那些发生替换的行123456789$ cat company.txtbaidu 100 5000sohu 100 4500google 110 5000guge 50 3000$ sed -n 's/u/U/p' company.txtbaidU 100 5000sohU 100 4500gUge 50 3000 选项-i会匹配文件中每一行的第一个匹配1234567891011$ cat company.txtbaidu 100 5000sohu 100 4500google 110 5000guge 50 3000$ sed -i 's/g/G/' company.txt$ cat company.txtbaidu 100 5000sohu 100 4500Google 110 5000Guge 50 3000 全面替换标记g使用后缀/g标记会替换每一行中的所有匹配12345$ sed 's/g/G/g' company.txtbaidu 100 5000sohu 100 4500GooGle 110 5000GuGe 50 3000 从第n个匹配处开始匹配标记ng12345$ sed 's/g/G/2g' company.txtbaidu 100 5000sohu 100 4500gooGle 110 5000guGe 50 3000 上面是从第二个匹配处开始替换，所以第一个g没有发生替换 -E选项调用扩展正则表达式sed默认使用的时POSIX的基本正则表达式（BRE），通过选项-E我们可以使用扩展版的正则表达式（ERE），举个例子，假设我们有一个字符串：chr1:28427874-28425431,分别代表染色体（chr）、start position以及end position，我们要将这三者分离开来形成3列：12$ echo 'chr1:28427874-28425431'|sed -E 's/^(chr[^:]+):([0-9]+)-([0-9]+)/\1\t\2\t\3/'chr1 28427874 28425431 看起来有点复杂，主要是涉及到正则表达式，拆开来看的话也不复杂，第一部分^(chr[^:]+):,首先匹配一行的开始，接着匹配（）里面的一切。总结起来就是该部分匹配以chr开头以及至少一个非:的字符，一次匹配到:就结束了。第二部分和第三部分都是匹配至少一个数字。最后将匹配到的三部分形成三列。要实现这一功能还有sed很多方法，比如我们只需要将:和-替换成一个制表符就行了：12$ echo 'chr1:28427874-28425431'|sed 's/[:-]/\t/g'chr1 28427874 28425431 还可以拆成多个命令完成：12$ echo 'chr1:28427874-28425431'|sed 's/:/\t/g' | sed 's/-/\t/g'chr1 28427874 28425431 还可以通过-e选项来添加多个命令12$ echo 'chr1:28427874-28425431'|sed -e 's/:/\t/g' -e 's/-/\t/g'chr1 28427874 28425431 打印特定的几行这个类似于head，如果我们需要打印第m到n行，使用’m,np’进行匹配12345$ sed -n '2,5p' chroms.txtchrom1 3216025 3216968chrom1 3216022 3216024chrom1 3671349 3671498chrom1 3214482 3216021 删除命令：d命令删除空白行1$ sed '/^$/d' file 指定删除第几行比如删除第二行123456789$ cat company.txtbaidu 100 5000sohu 100 4500google 110 5000guge 50 3000$ sed '2d' company.txtbaidu 100 5000google 110 5000guge 50 3000 删除指定的第几行以及后面所有行比如删除第二行及其后面所有行12$ sed '2,$d' company.txtbaidu 100 5000 从上面很容易知道$d表示最后一行，同时删除第m行到第n行也很容易实现了123456789#删除最后一行$ sed '$d' company.txtbaidu 100 5000sohu 100 4500google 110 5000#删除第2到3行$ sed '2,3d' company.txtbaidu 100 5000guge 50 3000 匹配删除比如我们需要删除所有开头是g的行123$ sed '/^g/'d company.txtbaidu 100 5000sohu 100 4500 注意这里之间匹配用’’围住，d则不用 已匹配字符串标记&amp;啥意思呢，就是&amp;代表已匹配的项12345$ sed 's/\w\+/[&amp;]/g' company.txt[baidu] [100] [5000][sohu] [100] [4500][google] [110] [5000][guge] [50] [3000] 正则表达式\w\+匹配每一个单词，使用[&amp;]替换它，&amp;对应于之前匹配到的每个单词 子串匹配标记\1即匹配给定样式的其中一部分,对于匹配到的第一个子串就标记为\1，以此类推匹配到的第二个子串就是\212$ echo this is digit 7 in a number|sed 's/digit \([0-9]\)/\1/'this is 7 in a number \(..\)用于匹配子串数字，上述命令中digit 7被匹配到的是子串是7再举个例子12$ echo aaa BBB |sed 's/\([a-z]\+\) \([A-Z]\+\)/\2 \1/'BBB aaa 上述命令中匹配到的子串分别是aaa、BBB，\2表示BBB，\1表示aaa。 引用sed表达式可以使用单引号来引用，但是如果表达式内部包含变量字符串，就需要使用双引号。123test=hello echo hello WORLD | sed "s/$test/HELLO" HELLO WORLD 下一个：n命令如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行然后继续1$ sed '/test/&#123; n; s/aa/bb/; &#125;' file 变形：y命令把1~10行内所有的abcde转为大写，注意正则表达式元字符不能使用该命令：1$ sed '1,10y/abcde/ABCDE/' file 退出：q命令打印完第10行后退出sed1$ sed '10q' file 打印奇数行或者偶数行有两种方法：12345678#奇数行$ $ sed -n 'p;n' company.txtbaidu 100 5000google 110 5000#偶数行$ sed -n 'n;p' company.txtsohu 100 4500guge 50 3000 另一种方法12345678#奇数行$ sed -n '1~2p' company.txtbaidu 100 5000google 110 5000#偶数行$ sed -n '2~2p' company.txtsohu 100 4500guge 50 3000 sed内容十分丰富，这里只是稍微介绍一些主要功能，想要深入学习的话可参考官方文档 注：本文参考了sed的官方文档以及Linux命令大全中的sed命令用法 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>sed</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习笔记（八）]]></title>
    <url>%2F2017%2F11%2F20%2FLinux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%2F</url>
    <content type="text"><![CDATA[sedsed是一种功能强大的流式文本编辑器，能够完美结合正则表达式使用。处理时sed将当前处理的行储存在临时缓冲区中，称为模式空间（pattern space），接着sed命令处理缓冲区的内容，处理完成后打印到屏幕，接着继续处理下一行，不断重复直到文件结束。 sed的用途sed用途十分广泛： 文本替换 选择性的文件输出 从文本特定位置进行编辑 无交互式的文本编辑 工作流sed遵循简单的工作流：读取、执行以及显示，下图显示sed的工作流程： 读取：sed从输入流（文件、管道、标准输入STDIN等）中读取一行并且存储到模式空间的内部缓冲区 执行：默认情况下所有的sed命令都在模式空间中按顺序执行，除非指定了行的地址，否则sed命令将会在所有的行上依次执行 显示：发送修改后的内容到输出流，之后模式空间将被清空，继续重复上述过程直到文件结束 注意事项 模式空间（pattern space）是一块活跃的缓冲区，在sed编辑器执行命令时它会保存待检查的文本 默认情况下所有的sed命令都是在模式空间中执行，因此输入文件不会发生改变 另外一个缓冲区是保持空间（hold buffer），在处理模式空间中的某些行时，可以利用保持空间来临时保存一些行，在每一个循环结束的时候，sed将会移除模式空间的内容，但是保持空间的内容在所有循环过程中是持久存储的，sed命令无法直接在保持空间中执行，因此sed允许数据在模式空间与保持空间之间切换 初始情况下模式空间和保持空间都是空的 如果没有提供输入文件的话sed将会从标准输入接收请求 如果没有提供地址范围的话，默认情况下sed将对所有的行进行操作 sed的选型、命令、替换标记sed作为一个强大的流式编辑器，具有其特有的格式 sed命令格式12sed [options] 'commands' file(s)sed [options] -f scriptfile file(s) 选项 -e：以选项中指定的script来处理输入的文本文件 -f：以选项中指定的script文本来处理输入的文本文件 -n或者–quiet或者–silent：仅显示script处理后的结果 sed命令 a\：在当前行下面插入文本 i\：在当前行上面插入文本 c\：将选定的行改为新的版本 d：删除选择的行 D：删除模板块的第一行 s：替换指定字符 h：拷贝模板块中的内容到内存中的缓冲区 H：追加模板块中的内容到内存中的缓冲区 g：获取缓冲区的内容并替代当前模板块的内容 G：获取缓存区的内容，并追加到当前模板块文本后面 l：列出不能打印字符的清单 n：读取下一个输入行，并用下一个命令处理新的行而不是用第一个命令 N：追加下一个输入行到模板块后面并在两者间嵌入一个新行，改变当前行号码 p：打印模板块的行 P：打印模板块的第一行 q：退出sed b label：分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾 r file：从file中读取行 t table：if分支，从最后一行开始，条件一旦满足或者T、t命令，将导致分支到带有标号的命令处或者到脚本的末尾 T table：错误分支，从最后一行开始，一旦发生错误或者T、t命令，将导致分支到带有标号的命令处或者到脚本的末尾 w file：写并追加到file末尾 W file：写并追加模板块的第一行到file末尾 ！：表示后面的命令对所有没有被选定的行发生作用 =：打印当前行号码 sed替换标记 g：表示行内全面替换 p：表示打印行 w：表示将行写入一个文件 x：表示互换模板块中的文本和缓冲区的文本 y：表示将一个字符翻译为另外的字符（不用于正则表达式） \l：子串匹配标记 &amp;：已匹配字符串标记 sed元字符集（就是一些正则表达式） ^：匹配行的开始，如/^sed/匹配所有以sed开头的行 $：匹配行结束，如/sed$/匹配所有以sed结尾的行 .：匹配一个非换行符的任意字符，如/s.d/匹配在sd之间接一个任意字符 ：匹配0个或多个字符，如/sed/匹配所有模板是一个或多个字符后接sed的行 []：匹配一个指定范围内的字符，如/[sH]ed/匹配sed和Hed [^]：匹配一个不在指定范围内的字符，如/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字符开头紧跟sed的行 \(..\)：匹配子串，保存匹配的字符，如s/(love)able/\1rs，loveabel被替换成了lovers &amp;：保存搜索字符用来替换其它字符，如s/love/**&amp;**/，love替换成了**love** \&lt;：匹配单词的开始，如/\&lt;love/匹配包含以love开头的单词的行 \&gt;：匹配单词的结束，如/love\&gt;/匹配包含以love结尾的单词的行 x\{m\}：重复字符x，m次，如/0\{5\}匹配包含5个0的行】 x\{m,\}：重复字符x至少m次，如/0\{5,\}/匹配至少5个0的行 x\{m,n\}：重复字符x至少m次，之多n次，如/0\{5,10\}/匹配5-10个0的行 后面将讲解sed实例进行解释各个选项及其使用。 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>sed</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习笔记（七）]]></title>
    <url>%2F2017%2F11%2F16%2FLinux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%2F</url>
    <content type="text"><![CDATA[awk命令awk是一种编程语言，用于在unix下处理数据以及文本。数据可以来自stdin、一个或者多个文件或者其它命令的输出，同时支持自定义函数和正则表达式，更多是作为脚本来使用。 awk命令格式以及选项awk使用一个或多个如下结构： 1pattren &#123; action &#125; 每一个pattern是一个表达式或者正则表达式，pattern类似于其它编程语言中的if语句：如果表达式为TRUE或者正则表达式匹配到的话，后面的action命令会被执行。 awk语法形式12awk [options] 'script' var=value file(s)awk [options] -f scriptfile var=value file(s) 常用命令选项： -F fs：fs指定输入分隔符，fs可以是字符串或者正则表达式 -v var=value：赋值一个用户定义变量，将外部变量传递给awk -f scriptfile：从脚本文件中读取awk命令 -m[fr] val：对val值设置内在限制，-mf选项限制分配给val的最大块数目；-mr选项限制记录的最大块数目，这两个功能是扩展功能，在标准awk中不适用。 awk模式以及操作上面已经讲了pattern以及action，awk就是有一个或多个模式与操作组成的。 模式patternpattern可以是以下任意一种： 正则表达式 关系表达式：使用运算符操作，可以是字符串或者数字的比较测试 模式匹配表达式：用运算符~(匹配)和!(不匹配) BEGIN语句块、pattern语句块以及END语句块，涉及十分复杂，后续再讲解 操作操作由一个或多个命令、函数表达式组成，相互之间使用换行符或者分号分开，并位于大括号内。主要部分是： 变量或者数组赋值 输出命令 内置函数 控制流语句 awk脚本基本结构1awk 'BEGIN&#123; print "start"&#125; pattern&#123; command &#125; END&#123; print "end"&#125;' file 一个awk脚本通常是由：BEIGIN语句块、能够使用模式匹配的通用语句块、END语句块三部分组成，这三部分是可选的，任意一部分都可以不出现在脚本中。脚本通常是在’’或””中： 12awk 'BEGIN&#123; i=0 &#125; &#123; i++ &#125; END&#123; print i &#125;' filenameawk "BEGIN&#123; i=0 &#125; &#123; i++ &#125; END&#123; print i &#125;" filename awk的工作原理1awk 'BEGIN&#123; commands &#125; pattern&#123; commands &#125; END&#123; commands &#125;' 工作原理： 第一步是执行BEGIN{ commands }语句块中的语句 第二步是从文件或者标准输入中读取一行，然后执行pattern{ commands }语句块，它是逐行扫描文件，从第一行到最后一行重复此命令直到文件被完全读取完毕 最后当读至输入流末尾时，执行END{ commands }语句块 注意事项： BEGIN{ commands }语句块在awk开始从输入流中读取之前被执行，是一个可选语句块，比如变量初始化、打印输出表格的表头等语句通常可以写在此语句块中 END{ commands }语句块在awk从输入流中读取所有行之后被执行，比如打印所有行的分析结果这类信息汇总都是在此语句块中完成，也是一个可选语句块 pattern{ commands }语句块是最重要的组成部分，也是可选的，如果没有提供此语句块，则默认执行{ print },即打印每一个读取到的行，awk读取到的每一行都会执行该语句块 我们举个例子来说明一下：打印出example.bed文件的每一行，并且在开始读取之前打印出start，读取完毕之后打印出end 1234567891011$ awk 'BEGIN&#123;print "start"&#125;&#123;print&#125;END&#123;print "end"&#125;' example.bedstartchr1 26 39chr1 32 47chr3 11 28chr1 40 49chr3 16 27chr1 9 28chr2 35 54chr1 10 19end 敲黑板了！！！当print不带任何参数时，它就打印当前行，当print的参数以逗号进行分隔时，打印时则以空格作为定界符，在awk的print语句块中双引号是被当作拼接符来使用的。 123456$ echo|awk '&#123;var1="v1";var2="v2";var3="v3";print var1,var2,var3;&#125;'v1 v2 v3$ echo|awk '&#123;var1="v1";var2="v2";var3="v3";print var1"="var2"="var3;&#125;'v1=v2=v3 {}类似于循环体，会对文件每一行进行迭代，通常变量初始化语句(比如i=0)以及打印文件头部的语句放在BEGIN语句块中，而将打印的结果等语句放在END语句块中。 awk内置变量awk内置大量的变量方便我们直接调用 $n：当前记录的第n个字段，比如n为1表示第一个字段，n为2表示第二字段，以此类推 $0：表示执行过程中当前行的文本内容 FS：字段分隔符，默认是空格 IGNORECASE：如果为真表示忽略大小写进行匹配 NF：表示字段数，在执行过程中对应于当前的字段数 NR：表示记录数，在执行过程中对应于当前的行号 OFMT：数字的输出格式，默认为%.6g OFS：输出字段分隔符，默认值为空格 ORS：输出记录分隔符，默认值为一个换行符 RS：记录分隔符：默认是空格 RSTART：由match函数所匹配的字符串的第一个位置 RLENGTH：由match函数所匹配到的字符串的长度 举例说明部分变量： 1234$ head -n 3 example.bed|awk '&#123;print "Line No:"NR", No of fields:"NF, "$0="$0,"$1="$1,"$2="$2,"$3="$3&#125;'Line No:1, No of fields:3 $0=chr1 26 39 $1=chr1 $2=26 $3=39Line No:2, No of fields:3 $0=chr1 32 47 $1=chr1 $2=32 $3=47Line No:3, No of fields:3 $0=chr3 11 28 $1=chr3 $2=11 $3=28 上面我们先选取前三行，然后分别打印出每一行的行号，每一行的字段数以及每一行的每一个字段。由于NF表示字段数，因此print $NF就会打印出每一行的最后一个字段,print $(NF-1)就会打印出倒数第二个字段，依此类推。 1234$ head -n 3 example.bed|awk '&#123;print $NF&#125;'394728 统计一个文件有多少行可以使用以下命令语句： 12$ awk 'END&#123;print NR&#125;' Mus_musculus.GRCm38.75_chr1.gtf81231 上面我们只是用了END语句块，在读入每一行时awk会将NR更新为对应的行号，所以当读取到最后一行时就会打印出最后一行的行号NR也就是文件的总行数了。 传递外部变量给awk借助-v选项可以将外部值（非来自stdin）传递给awk： 123$ var=1000$ echo |awk '&#123;print var&#125;' var="$var"1000 awk运算与判断awk不仅支持算术运算还支持逻辑运算 算术运算符 运算符 描述 +- 加减 * / &amp; 乘 除 求余 +-！ 一元加减 逻辑非 ^* 求幂 —++ – 增加或减少，作为前缀 所有算术运算符进行操作，操作数自动转为数值，所有非数值转为0 赋值运算符主要赋值运算符有：= += -= = /= ……= *= 举例说明： 1a+=5,等价于a=a+5.其它类似 逻辑运算符就是我们常见的”或”、”与”、”非” 12$ awk 'BEGIN&#123;a=1;b=2;print (a&gt;5&amp;&amp;b&gt;2),(a&gt;5||b&lt;=2);&#125;'0 1 正则运算符主要有~和~！即匹配正则表达式和不匹配 12$ awk 'BEGIN&#123;a="100test";if(a~/^100*/)&#123;print "OK";&#125;&#125;'OK 关系运算符主要是&gt;、&gt;=、=、==、!=、&lt;、&lt;=等 12$ awk 'BEGIN&#123;a=11;if(a&gt;=9)&#123;print "OK";&#125;&#125;'OK 其他运算符 运算符 描述 $ 字段引用 空格 字符串连接符 ?: C条件表达式 in 数组中是否存在某值 运算符优先级 awk高级输入输出next语句读取下一条记录awk中的next语句使用：在循环逐行匹配，如果遇到next，就会跳过当前行，直接忽略下面的语句而进入下一匹配，一般用于多行匹配 12345$ awk 'NR%2==1&#123;next&#125;&#123;print NR,$0;&#125;' example.bed2 chr1 32 474 chr1 40 496 chr1 9 288 chr1 10 19 后面还有很多复杂用法我暂时不讲了，再者如果遇到更复杂的情况最好使用其他更强大的工具比如python。下面我会讲讲awk如何处理生物信息学数据。 条件筛选我们想要将长度大于18的行找出来（即end position-start position&gt;18） 123$ awk '$3-$2&gt;18' example.bedchr1 9 28chr2 35 54 下面是一些常用的逻辑操作符 Comparison Description a==b a is equal to b a!=b a is not equal to b a &lt; b a is less than b a &gt; b a is greater than b a &lt;= b a is less than or equal to b a &gt;= b a is greater than or equal to b a ~ b a matches regular expression pattern b a !~ b a does not match regular expression pattern b a &amp;&amp; b logical and a and b !a not a (logical negation) 筛选出位于染1号染色体上长度大于10的行 1234$ awk '$1~/chr1/ &amp;&amp; $3-$2&gt;10' example.bedchr1 26 39chr1 32 47chr1 9 28 $1~/chr1/是一正则表达式匹配（正则表达式在符号斜杠里），表示第一列中能匹配到chr1的行，~表示匹配，不匹配的话使用!~ 1234$ awk '$1!~/chr1/ &amp;&amp; $3-$2&gt;10' example.bedchr3 11 28chr3 16 27chr2 35 54 正则表达式结合其他复杂命令（action）可以解决很多复杂问题，比如我们想要将2和3号染色体每行长度都打印出来自成一列： 1234$ awk '$1!~/chr1/ &#123;print $0 "\t" $3-$2&#125;' example.bedchr3 11 28 17chr3 16 27 11chr2 35 54 19 目前我们已经讲了awk可以使用的两个功能： 结合正则表达式以及算术对数据集进行过滤 利用算术重铸数据集的列 BEGIN和END前面我们已经讲了BEGIN和END，BEGIN在初始化变量方面十分有用，比如如果我们想要求平均长度的话，首先我们可以求和再除以总行数12$ awk 'BEGIN&#123;sum=0&#125;;&#123;sum+=($3-$2)&#125;;END&#123;print "mean: "sum/NR&#125;;' example.bedmean: 14 由于NR表示当前行数，因此我们就可以利用它来提取数据集中的数据，比如提取example.bed中的3-5行1234$ awk 'NR&gt;=3&amp;&amp;NR&lt;=5' example.bedchr3 11 28chr1 40 49chr3 16 27 使用awk我们可以很方便的实现BED与GTF文件之间的转换，比如我们可以十分快速的实现从GTF文件中提取出BED文件：1234$ awk '!/^#/ &#123;print $1 "\t" $4-1 "\t" $5&#125;' Mus_musculus.GRCm38.75_chr1.gtf|head -n 31 3054232 30547331 3054232 30547331 3054232 3054733 这里需要注意的是BED文件索引是从0开始的，GTF索引是从1开始的，因此start position我们需要减去1. awk内置了很多函数可以调用： function description length(s) length 0f a string s tolower(s) convert string s to lowercase touppper(s) convert string s to uppercase substr(s,i,j) return the substring of s that starts at i and ends at j split(s,x,d) split string s into chunks by delimiter d,place chunks in array x sub(f,r,s) find regular expression f in s and replace it with r(modifing s in place);use gsub for global substitution;returns a positive value if string is found 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>awk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习笔记（六）]]></title>
    <url>%2F2017%2F11%2F15%2FLinux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%2F</url>
    <content type="text"><![CDATA[uniqlinux命令uniq可以将连续重复去除掉，举个例子说明：123456789$ cat letters.txtAABCBCCC 里面存有重复数据，利用uniq可以有效的去除连续重复：123456$ uniq letters.txtABCBC 可以看到只有连续重复才被执行只剩下一个，如果我们要去除所有的重复只保留一个，不管是不是连不连续，可以先进行排序再去重 1234$ sort letters.txt|uniqABC 如果存在大小写字母，可以添加参数-i来忽略大小写。还有一个选项-c可以用来统计连续重复次数，同理要统计所有重复次数先进行排序：1234567891011$ uniq -c letters.txt 2 A 1 B 1 C 1 B 3 C# sort then uniq$ sort letters.txt|uniq -c 2 A 2 B 4 C 再来一个，统计gtf文件中CDS、UTR等数目：12345678$ grep -v "^#" Mus_musculus.GRCm38.75_chr1.gtf|cut -f3|sort|uniq -c|column -t25901 CDS36128 exon2027 gene2290 start_codon2299 stop_codon4993 transcript7588 UTR 根据数目从大到小进行排序：12345678$ grep -v "^#" Mus_musculus.GRCm38.75_chr1.gtf|cut -f3|sort|uniq -c|sort -rn |column -t36128 exon25901 CDS7588 UTR4993 transcript2299 stop_codon2290 start_codon2027 gene 再深入一点展示不停链上的数目123456789101112131415$ grep -v "^#" Mus_musculus.GRCm38.75_chr1.gtf|cut -f3,7|sort|uniq -c|sort -rn|column -t18134 exon +17994 exon -13010 CDS -12891 CDS +3834 UTR -3754 UTR +2511 transcript -2482 transcript +1155 stop_codon -1155 start_codon -1144 stop_codon +1135 start_codon +1034 gene +993 gene - 还可以查看特定基因上的CDS等数目12345678$ grep "ENSMUSG00000033793" Mus_musculus.GRCm38.75_chr1.gtf|cut -f3|sort|uniq -c|sort -rn |column -t14 exon13 CDS3 UTR1 transcript1 stop_codon1 start_codon1 gene 参数选项-d提供了一个数据集中的重复项12$ uniq -d mm_gene_names.txt|wc -l0 这个数据集中没有重复项！！！ Joinjoin顾名思义就是将不同数据集根据相同的列合并在一起，需要注意的是两个文件需要经过排序才能合并在一起，因此第一步需要检查数据集有没有排序，没有的话需要进行排序。join基本语法：1join -1 &lt;file_1_field&gt; -2 &lt;file_2_field&gt; &lt;file_1&gt; &lt;file_2&gt; 其中file_1和file_2是两个需要合并的文件，file_1_field表示file_1中合并的列，file_2_field同理。12$ sort -k1,1 example.bed &gt; example_sorted.bed$ sort -c -k1,1 example_lengths.txt 经验证两个数据集都已经排过序了。12345678910$ join -1 1 -2 1 example_sorted.bed example_lengths.txt &gt; example_with_lengths.txt$ cat example_with_lengths.txt|column -tchr1 10 19 58352chr1 26 39 58352chr1 32 47 58352chr1 40 49 58352chr1 9 28 58352chr2 35 54 39521chr3 11 28 24859chr3 16 27 24859 如果我们将example_lengths.txt中的chr3去除掉再进行合并，结果会怎么样呢？12345678$ head -n2 example_lengths.txt &gt; example_lengths_alt.txt$ join -1 1 -2 1 example_sorted.bed example_lengths_alt.txtchr1 10 19 58352chr1 26 39 58352chr1 32 47 58352chr1 40 49 58352chr1 9 28 58352chr2 35 54 39521 结果发现chr3被join剔除掉了，因此join只会合并文件共有的项，如果想要保留chr3可以添加参数选项-a实现：123456789$ join -1 1 -2 1 -a 1 example_sorted.bed example_lengths_alt.txt|column -tchr1 10 19 58352chr1 26 39 58352chr1 32 47 58352chr1 40 49 58352chr1 9 28 58352chr2 35 54 39521chr3 11 28chr3 16 27 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>uniq</tag>
        <tag>join</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习笔记（五）]]></title>
    <url>%2F2017%2F11%2F14%2FLinux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%2F</url>
    <content type="text"><![CDATA[sortsort命令在linux中非常有用，它可以对文件进行排序并将排序结果标准输出。sort即可以从特定的文件中也可以从STDIN中获取输入。sort语法规则如下：1sort (选项) (参数) 文件 参数详解： -b：忽略每行前面开始出的空格字符； -c：检查文件是否已经按照顺序排序； -d：排序时，处理英文字母、数字及空格字符外，忽略其他的字符； -f：排序时，将小写字母视为大写字母； -i：排序时，除了040至176之间的ASCII字符外，忽略其他的字符； -m：将几个排序号的文件进行合并； -M：将前面3个字母依照月份的缩写进行排序； -n：依照数值的大小排序； -o&lt;输出文件&gt;：将排序后的结果存入制定的文件； -r：以相反的顺序来排序； -t&lt;分隔字符&gt;：指定排序时所用的栏位分隔字符； +&lt;起始栏位&gt;-&lt;结束栏位&gt;：以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。 sort将文件/文本的每一行作为一个单位相互比较，比较原则是从首字符向后，一次按ASCII码值进行比较，最后将他们按升序格式输出。12345678910111213141516171819$ cat example.bedchr1 26 39chr1 32 47chr3 11 28chr1 40 49chr3 16 27chr1 9 28chr2 35 54chr1 10 19#没有任何参数排序$ sort example.bedchr1 10 19chr1 26 39chr1 32 47chr1 40 49chr1 9 28chr2 35 54chr3 11 28chr3 16 27 sort默认空格（tab or spaces）作为分隔符，因此如果你的文件使用其他的分隔符，比如CSV文件（分隔符为“,”），这时就需要通过参数-t指定分隔符。 实际排序过程中我们希望能够指定依次按哪一列进行排序，这里面就涉及到了参数选项-k了。-k参数的语法格式如下：123FStart.CStart Modifie,FEnd.CEnd Modifier -------Start--------,-------End-------- FStart.CStart 选项 , FEnd.CEnd 选项 格式被”,”分为两部分Start以及End两部分。其中Start部分又分为三部分,重点解释一下其中的FStart以及CStart部分，CStart不是必须的可以省略，省略的话表示从本域的开头部分开始，FStart.CStart中的FStart表示作用的域，CStart则表示在FStart域中从第几个字符开始排序，同理，在End部分类似。下面我们举个例子说明一下：1234567891011121314$ head -n 3 example.bedchr1 26 39chr1 32 47chr3 11 28# sort 进行排序$ sort -k1,1 -k2,2n example.bedchr1 9 28chr1 10 19chr1 26 39chr1 32 47chr1 40 49chr2 35 54chr3 11 28chr3 16 27 在上面的命令中，我们通过参数-k来指定按哪一列来进行排序，首先第一个-k参数表示我们想要第一按第一列排序，接下来的第二个-k参数表示按第二列排序，n表示这一列是数值型数据。-k的语法十分复杂，再举个简单例子，假设我们有这样一个文件company.txt:有三个域，第一个域是公司名称，第二个域是公司人数，第三个域是员工平均工资。12345$ cat company.txt|column -tbaidu 100 5000sohu 100 4500google 110 5000guge 50 3000 按第一个域业也就是按公司名称的字母进行排序12345$ sort -k1 company.txtbaidu 100 5000google 110 5000guge 50 3000sohu 100 4500 这很好理解 按每个公司的人数也就是第二个域进行排序(n表示这一个域是数值型数据)12345$ sort -k2n company.txtguge 50 3000baidu 100 5000sohu 100 4500google 110 5000 从上面可以看出，baidu和sohu的员工人数相同，这时会按照默认的规则从第一个域进行升序排列，所以可以看到baidu排在sohu前面。 按公司员工人数排序，员工人数相同的按第三个域升序排列12345$ sort -k2n -k3n company.txtguge 50 3000sohu 100 4500baidu 100 5000google 110 5000 可以看出与前面的差别，这里按员工平均工资进行第二次排序，所以sohu排在baidu前面。 先按员工工资降序排序，如果员工人数相同，则再按公司人数升序排序12345$ sort -k3nr -k2n company.txtbaidu 100 5000google 110 5000sohu 100 4500guge 50 3000 命令中的r表示降序排序，可以看到我们将n、r这样的选项加入到了每一个-k选项中，其实就是-k语法中的Modifier选项。 从公司名称字母的第二个字母开始排序12345$ sort -k1.2 company.txtbaidu 100 5000sohu 100 4500google 110 5000guge 50 3000 -k1.2表示对第一个域的第二个字符开始到本域的最后一个字符为止的字符串进行排序，可以看到sohu与google的第二个字母都是o，但是接下来的字母sohu的h排在google的o之前，因此sohu排在google前面。 只针对公司名称的第二字母进行排序，相同的话则按员工平均工资降序排序 注意了，敲黑板！！！上面我们是从第一个域的第二个字符开始进行排序，而这里只针对第二个字符进行排序，如果第二字符相同的话则按员工平均工资降序排序，上面的例子是按第三个字符进行排序。 12345$ sort -k1.2,1.2 -k3rn company.txtbaidu 100 5000google 110 5000sohu 100 4500guge 50 3000 可以看到这次google排在sohu前面了。-k选项部分讲到这里基本脉络清楚了,此时再结合其他选项sort就会变得十分强大。 sort的-u选项u代表unique，因此此选项会将重复的选项删除，举个例子，这里我们根据第二域进行排序，添加-u选项，这样具有相同员工数且处于后续位置的行将被删除。1234$ sort -k2n -u company.txtguge 50 3000baidu 100 5000google 110 5000 这里就将sohu这一行删除了。注意了，当-k与u结合使用时，-u只识别-k设定的域，发现相同就将后续相同的行删除。 再举个例子看看特殊情况12345$ sort -k2n -k3n -u company.txtguge 50 3000sohu 100 4500baidu 100 5000google 110 5000 可以看到这次没有删除任何行，这主要是由于-u会权衡所有-k选项，只会将都相同的删除，只要其中有一级不同就不会轻易删除。 其他注意点最后我还想再讲讲sort一些其他比较有用的选项。第一个是-V选项。我们通过一个例子看看。12345678910111213141516171819$ cat example2.bedchr2 15 19chr22 32 46chr10 31 47chr1 34 49chr11 6 16chr2 17 22chr2 27 46chr10 30 42# 进行排序$ sort -k1,1 -k2,2n example2.bedchr1 34 49chr10 30 42chr10 31 47chr11 6 16chr2 15 19chr2 17 22chr2 27 46chr22 32 46 我们可以看到chr2排在chr11之后，主要是因为1排在2之前，sort对文本进行排序时无法按数字进行排序，通过选项-V可以解决这个问题：123456789$ sort -k1,1V -k2,2n example2.bedchr1 34 49chr2 15 19chr2 17 22chr2 27 46chr10 30 42chr10 31 47chr11 6 16chr22 32 46 另外一个需要考虑的是当我们处理大数据集文本时，提高运行速度是很重要的，sort提供了几种方法，第一是提供了-S选项：1$ sort -k1,1 -k4,4n -S2G Mus_musculus.GRCm38.75_chr1_random.gtf 其中G表示gigabyte，另外一种方法是提供了并行多线程计算–parallel选项1$ sort -k1,1 -k4,4n --parallel=4 Mus_musculus.GRCm38.75_chr1_random.gtf 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习笔记（四）]]></title>
    <url>%2F2017%2F11%2F13%2FLinux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[grepgrep全称是global search regular expression(RE) and print out the line，中文名即全面搜索正则表达式并把行打印出来。是一种强大的文本搜索工具，可以使用正则表达式搜索文本，并将匹配的行列打印出来。Unix的grep家族包括grep,egrep,fgrep以及zgrep等，egrep,fgrep与grep的差别很小，egrep支持更多的re元字符， fgrep就是fixed grep或fast grep，它们把所有的字母都看作单词，也就是说，正则表达式中的元字符表示其自身的字面意义，不再特殊grep可以通过-G、-E、-F命令行选项来使用egrep,fgrep的功能，zgrep可以用来处理ZIP格式文件。 grep常用用法grep常用用法如下：1grep [-acinv] [--color=auto] '字符串或者正则表达式' filename 选项参数： -a：将binary文件以text文件的方式搜索，即不要忽略二进制数据 -A&lt;显示列数&gt;：除了显示匹配到的那一行之外，还显示该行之后的内容 -b：除了显示匹配到的那一行之外，还显示该行之前的内容 -c：计算匹配到字符串的次数 -C&lt;显示列数&gt;：除了显示匹配到的那一列之外，还显示该列之前后的内容 -d&lt;进行动作&gt; 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep命令将回报信息并停止动作 -e&lt;范本样式&gt; 指定字符串作为查找文件内容的范本样式 -E 将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式 -f&lt;范本文件&gt; 指定范本文件，其内容有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每一列的范本样式 -F 将范本样式视为固定字符串的列表 -G 将范本样式视为普通的表示法来使用 -h 在显示符合范本样式的那一列之前，不标示该列所属的文件名称 -H 在显示符合范本样式的那一列之前，标示该列的文件名称 -l 列出文件内容符合指定的范本样式的文件名称。 -L 列出文件内容不符合指定的范本样式的文件名称。 -q 不显示任何信息。 -R/-r 此参数的效果和指定“-d recurse”参数相同。 -s 不显示错误信息。 -w 只显示全字符合的列。 -x 只显示全列符合的列。 -y 此参数效果跟“-i”相同。 -o 只输出文件中匹配到的部分。 -i：忽略大小写 -n：输出行号 -v：方向选择即显示出未匹配到字符串的那一行 –color=auto：匹配到的字符串颜色高亮 下面我们实战演练一下，我们要从GTF文件中搜索到匹配Olfr418-ps1的行：123456789$ grep 'Olfr418-ps1' Mus_musculus.GRCm38.75_chr1_genes.txtENSMUSG00000049605 Olfr418-ps1#打印出行号$ grep -n 'Olfr' Mus_musculus.GRCm38.75_chr1_genes.txt|head -n 5548:ENSMUSG00000067064 Olfr1416549:ENSMUSG00000057464 Olfr1415550:ENSMUSG00000042849 Olfr1414551:ENSMUSG00000058904 Olfr1413552:ENSMUSG00000046300 Olfr1412 通过参数-v设置可以不匹配不需要的字符串或者正则表达式：123456$ grep Olfr Mus_musculus.GRCm38.75_chr1_genes.txt|grep -v Olfr1413|head -n 5ENSMUSG00000067064 Olfr1416ENSMUSG00000057464 Olfr1415ENSMUSG00000042849 Olfr1414ENSMUSG00000046300 Olfr1412ENSMUSG00000062497 Olfr1411 需要注意的是，这里我们排除掉Olfr1413，但是如果数据集里存在类似于Olfr1413a这样的字符，grep也会将之剔除，因此我们需要设置参数-w进行精准匹配。下面举个例子说明：1234567891011121314$ cat example.txtbiobioinfobioinformaticscomputational biology# grep without -w$ grep -v bioinfo example.txtbiocomputational biology#可以看出这里将含有bioinfo字符串的bioinformatics也剔除掉了,使用参数-w可以避免$ grep -v -w bioinfo example.txtbiobioinformaticscomputational biology 我们平常接触的组学数据格式都是很复杂的，当我们匹配的时候我们希望能过浏览匹配到的字符串的前后文，Linux提供了参数设置：-B（前）、-A（后）以及-C（前后），每个参数后面都跟着一个数字，表示要显示几行,如果匹配到多行，则个匹配之间会用–分割开：1234567$ grep -B2 'AGATCGG' contam.fastq|head -n 6@DJB775P1:248:D0MDGACXX:7:1202:12362:49613TGCTTACTCTGCGTTGATACCACTGCTTAGATCGGAAGAGCACACGTCTGAA--JJJJJIIJJJJJJHIHHHGHFFFFFFCEEEEEDBD?DDDDDDBDDDABDDCA@DJB775P1:248:D0MDGACXX:7:1202:12782:49716CTCTGCGTTGATACCACTGCTTACTCTGCGTTGATACCACTGCTTAGATCGG grep如果结合正则表达式则会显得十分强大，比如如果我们要匹配Olfr1413以及Olfr1411,可以使用简单的正则表达式完成：123$ grep 'Olfr141[13]' Mus_musculus.GRCm38.75_chr1_genes.txtENSMUSG00000058904 Olfr1413ENSMUSG00000062497 Olfr1411 当然如果我们要匹配的不具有相同的前缀，那就很尴尬了，这时我们可以利用POSIX Extended Regular Expressions(ERE)进行匹配，可以添加参数-E或者直接使用egrep都行123$ grep -E "(Olfr1413|Olfr12)" Mus_musculus.GRCm38.75_chr1_genes.txtENSMUSG00000058904 Olfr1413ENSMUSG00000061616 Olfr12 很多时候我们只需要将匹配到的行打印出来，此时我们可以使用参数-o：1234$ grep -o "Olfr.*" Mus_musculus.GRCm38.75_chr1_genes.txt|head -n 3Olfr1416Olfr1415Olfr1414 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux学习笔记（三）]]></title>
    <url>%2F2017%2F11%2F12%2FLinux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[“write code for humans, write data for computers” cutcut允许我们从数据集中提取某几列进行查看，通过参数f来设置查看几列，比如我们想要查看第一和第三列或者只查看第二列：12345678$ cut -f 1,3 Mus_musculus.GRCm38.75_chr1.bed|head -n 31 30547331 30547331 3054733$ cut -f 2 Mus_musculus.GRCm38.75_chr1.bed|head -n 3305423330542333054233 结合grep我们可以十分方便的将GTF文件中的部分信息提取出来进行查看，使用grep主要用来将以#开头的部份内容剔除掉，这其中涉及到正则表达式，我将在后面集中学习。下面的命令可以将染色体、起始位置以及终止位置提取出来，类似于bed文件格式：1234$ grep -v '^#' Mus_musculus.GRCm38.75_chr1.gtf | cut -f 1,4,5 | head -n 31 3054233 30547331 3054233 30547331 3054233 3054733 我们也可以使用&gt;将提取的文件另存为一个文件，方便以后使用。这里我们存为test.txt1$ grep -v "^#" Mus_musculus.GRCm38.75_chr1.gtf | cut -f 1,4,5 &gt; test.txt cut默认分隔符为空格，因此如果使用cut来处理CSV文件的话，我们就需要通过参数d指定分隔符 ,:1234$ cut -d , -f 2,3 Mus_musculus.GRCm38.75_chr1_bed.csv | head -n 33054233,30547333054233,30547333054233,3054733 column当我们处理制表符文件时，常常行列之间无法对其，浏览效果很差,如下所示：1234$ grep -v "^#" Mus_musculus.GRCm38.75_chr1.gtf|cut -f1-8|head -n 31 pseudogene gene 3054233 3054733 . + .1 unprocessed_pseudogene transcript 3054233 3054733 . + .1 unprocessed_pseudogene exon 3054233 3054733 . + . column可以产生阅读效果很好的文件格式，参数t表示column将对数据集当作一个table来处理,下面的阅读效果明显好于前面的。1234$ grep -v "^#" Mus_musculus.GRCm38.75_chr1.gtf|cut -f1-8|head -n 3|column -t1 pseudogene gene 3054233 3054733 . + .1 unprocessed_pseudogene transcript 3054233 3054733 . + .1 unprocessed_pseudogene exon 3054233 3054733 . + . 需要注意的是，column -t只能支持在终端进行浏览数据，无法对数据集进行格式重写成一个文件。 column默认\t为分隔符，因此当我们处理其他分隔符数据时，需要使用参数s进行指定，比如当我们处理CSV数据时：1234$ column -s, -t Mus_musculus.GRCm38.75_chr1_bed.csv|head -n 31 3054233 30547331 3054233 30547331 3054233 3054733 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux学习笔记（二）]]></title>
    <url>%2F2017%2F11%2F11%2FLinux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[鉴于以后要大量使用Linux系统处理生物信息学数据，因此加强自身linux系统的学习，开辟一个新的分类专门记录我学习Linux的学习笔记，一是为了我自己以后方便查看，二也是希望能帮助到其他学习Linux系统的人，共勉！！！ head快速查看数据，以bed(只有三列)格式数据为例1234567891011$ head Mus_musculus.GRCm38.75_chr1.bed1 3054233 30547331 3054233 30547331 3054233 30547331 3102016 31021251 3102016 31021251 3102016 31021251 3205901 36714981 3205901 32163441 3213609 32163441 3205901 3207317 head默认显示前十行，可以通过参数n来指定显示几行，比如只显示三行：1234$ head -n 3 Mus_musculus.GRCm38.75_chr1.bed1 3054233 30547331 3054233 30547331 3054233 3054733 tail与head相对的有一个命令tail,tail显示后几行，默认显示后十行，也可以通过参数n来指定显示几行：123456789101112131415$ tail Mus_musculus.GRCm38.75_chr1.bed1 195166217 1951663901 195165745 1951658511 195165748 1951658511 195165745 1951657471 195228278 1952283981 195228278 1952283981 195228278 1952283981 195240910 1952410071 195240910 1952410071 195240910 195241007$ tail -n 3 Mus_musculus.GRCm38.75_chr1.bed1 195240910 1952410071 195240910 1952410071 195240910 195241007 基于这个特性，tail可以用来去除数据集的前几列，通过在参数n后面添加数字(即-n +x,区别于-n 2)指定从第几行开始，比如从第三行开始，也就是剔除了前两行。 123456789101112$ seq 5 &gt; nums.txt$ cat nums.txt12345# 从第三行开始$ tail -n +3 nums.txt345 结合这两个命令，我们可以十分方便的查看一个数据集的前几行以及后几行：12345$ (head -n 2; tail -n 2)&lt; Mus_musculus.GRCm38.75_chr1.bed1 3054233 30547331 3054233 30547331 195240910 1952410071 195240910 195241007 less一般小的文件我们直接用cat进行查看，但是如果大数据集的话用cat就十分不方便查看，less就是用来查看大数据集的命令。less一次性只显示前几行，但是可以通过滚动查看后面的信息，最后按q结束。下面列出less常用的命令： Shortcut Action space bar Next page b Previous page g First line G Last line j Down (one line at at time) k Up (one line at at time) /\ Search down (forward) for string \ ?\ Search up (backward) for string \ n Repeat last search downward (forward) N Repeat last search upward (backward) wc(word count)查看数据有多少行可以用wc命令,wc会显示出数据有多少行、多少word以及多少字符(characters)。12$ wc Mus_musculus.GRCm38.75_chr1.bed 81226 243678 1698545 Mus_musculus.GRCm38.75_chr1.bed wc支持同时处理多个文件：1234$ wc Mus_musculus.GRCm38.75_chr1.bed Mus_musculus.GRCm38.75_chr1.gtf 81226 243678 1698545 Mus_musculus.GRCm38.75_chr1.bed 81231 2385570 26607149 Mus_musculus.GRCm38.75_chr1.gtf 162457 2629248 28305694 总用量 如果只想显示多少行，添加参数l就行了：12$ wc -l Mus_musculus.GRCm38.75_chr1.bed81226 Mus_musculus.GRCm38.75_chr1.bed 更多用法可以用man wc查看。 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux学习笔记（一）]]></title>
    <url>%2F2017%2F11%2F09%2FLinux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[鉴于以后要大量使用Linux系统处理生物信息学数据，因此加强自身linux系统的学习，开辟一个新的分类专门记录我学习Linux的学习笔记，一是为了我自己以后方便查看，二也是希望能帮助到其他学习Linux系统的人，共勉！！！ 创建含有当前时间的文件，如创建一个含有今天时间日期的文件夹 123$ mkdir results-$(date +%F)$ lsresults-2017-11-02 设置自己的快捷命令，比如我们要创建项目时，需要创建data/seqs,scripts以及analysis文件夹，我们可以写一个快捷命令符，以后就可以直接调用即可：1$ alias mkpr="mkdir -p &#123;data/seqs,scripts,analysis&#125;" 这样后面我们每次运行mkpr就会创建data/seqs,scripts以及analysis文件夹。将上述两点综合我们就可以很容易创建含有当前时期的文件，这里我们将date +%F设置成快捷命令today。 1$ alias today="date +%F" 这样我们以后只需要运行以下命令就可以创建含有当前时间日期的文件了。 123$ mkdir results-$(today)$lsresults-2017-11-02 注意上述命令在我们重启终端时是无法再次作用的，要使得alias命令永久有效，我们可以将命令添加到.bashrc中，之后source ~/.bashrc即可生效。 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化之UpSetR包]]></title>
    <url>%2F2017%2F10%2F15%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8BUpSetR%E5%8C%85%2F</url>
    <content type="text"><![CDATA[简介集合可视化我们用得最多的是韦恩图，韦恩图在集合数少的时候是很好用的，但是当集合数多比如五个以上的时候那就会看花眼了，比如下面这副含有6个集合韦恩图，是发表在Nature上的文章里的，漂亮是漂亮，但是眼都快看花了。 今天介绍一个R包UpSetR，专门用来集合可视化，来源于UpSet，Python里面也有一个相似的包py-upset。此外还有个UpSetR shiny app以及源代码. 安装两种方式安装： 1234#从CRAN安装install.packages("UpSetR")#从Github上安装devtools::install_github("hms-dbmi/UpSetR") 数据导入UpSetR提供了两个函数fromList以及fromExpression将数据转换为UpsetR适用的数据格式。 123456#fromListlistinput &lt;- list(one = c(1, 2, 3, 5, 7, 8, 11, 12, 13), two = c(1, 2, 4, 5, 10), three = c(1, 5, 6, 7, 8, 9, 10, 12, 13))#fromExpressionexpressionInput &lt;- c(one = 2, two = 1, three = 2, `one&amp;two` = 1, `one&amp;three` = 4, `two&amp;three` = 1, `one&amp;two&amp;three` = 2) 接下来就可以绘制绘制图形了1234library(UpSetR)upset(fromList(listinput), order.by = &quot;freq&quot;)#下面绘制的图形等同于上图upset(fromExpression(expressionInput), order.by = &quot;freq&quot;) 参数详解下面所有的例子都将使用UpSetR内置的数据集movies来绘制。 1234#导入数据movies &lt;- read.csv(system.file(&quot;extdata&quot;, &quot;movies.csv&quot;, package = &quot;UpSetR&quot;), header = TRUE, sep = &quot;;&quot;)#先大致浏览一下该数据集,数据集太长，就只看前几列knitr::kable(head(movies[,1:10])) 该数据集展示的是电影名（name）、发行时间（ReleaseDate）以及电影类型，多了去了就不详讲了，自个可以看去。UpsetR绘制集合可视化图形使用函数upset()。1upset(movies, nsets = 6, number.angles = 30, point.size = 2, line.size = 1, mainbar.y.label = &quot;Genre Intersections&quot;, sets.x.label = &quot;Movies Per Genre&quot;, text.scale = c(1.3, 1.3, 1, 1, 1.5, 1)) 解释一下上面部分参数： nsets: 顾名思义，就是展示几个集合，movies数据集由20几个集合，不可能全部展示，另外从图中可以看出，这6个集合应该不是按顺序选择的。 numble.angle: 柱子上的数字看到了吧，这个参数就是调整数字角度的，可有可无的 mainbar.y.label/sets.x.label：坐标轴名称 text.scale(): 有六个数字，分别控制c(intersection size title, intersection size tick labels, set size title, set size tick labels, set names, numbers above bars)。 很多时候我们想要看特定的几个集合，UpSetR满足我们的需求。12upset(movies, sets = c(&quot;Action&quot;, &quot;Adventure&quot;, &quot;Comedy&quot;, &quot;Drama&quot;, &quot;Mystery&quot;, &quot;Thriller&quot;, &quot;Romance&quot;, &quot;War&quot;, &quot;Western&quot;), mb.ratio = c(0.55, 0.45), order.by = &quot;freq&quot;) 文中的参数： mb.ratio: 控制上方条形图以及下方点图的比例 order.by: 如何排序，这里freq表示从大到小排序展示，其他选项有degree以及先按freq再按degree排序。 各个变量也可以通过参数keep.order来排序123upset(movies, sets = c(&quot;Action&quot;, &quot;Adventure&quot;, &quot;Comedy&quot;, &quot;Drama&quot;, &quot;Mystery&quot;, &quot;Thriller&quot;, &quot;Romance&quot;, &quot;War&quot;, &quot;Western&quot;), mb.ratio = c(0.55, 0.45), order.by = &quot;freq&quot;, keep.order = TRUE) 也可以按group进行展示，这图展示的就是按各个变量自身、两个交集、三个交集…依次展示。参数cutoff控制每个group显示几个交集。参数intersects控制总共显示几个交集。 1upset(movies, nintersects = 70, group.by = &quot;sets&quot;, cutoff = 7) 还有很多参数比如控制颜色的参数，点、线大小等，具体可查看?upset queries参数queries参数分为四个部分：query, param, color, active. query: 指定哪个query，UpSetR有内置的，也可以自定义，说到底就是一个查询函数 param: list, query作用于哪个交集 color：每个query都是一个list，里面可以设置颜色,没设置的话将调用包里默认的调色板 active：被指定的条形图是否需要颜色覆盖，TRUE的话显示颜色，FALSE的话则在条形图顶端显示三角形 内置的intersects query123upset(movies, queries = list(list(query=intersects, params=list(&quot;Drama&quot;, &quot;Comedy&quot;, &quot;Action&quot;), color=&quot;orange&quot;, active=T), list(query=intersects, params=list(&quot;Drama&quot;), color=&quot;red&quot;, active=F), list(query=intersects, params=list(&quot;Action&quot;, &quot;Drama&quot;), active=T))) 内置的elements query此query可以可视化特定交集在不同条件下的情况 12upset(movies, queries = list(list(query=elements, params=list(&quot;AvgRating&quot;, 3.5, 4.1), color=&quot;blue&quot;, active=T), list(query=elements, params=list(&quot;ReleaseDate&quot;, 1980, 1990, 2000), color=&quot;red&quot;, active=F))) 自定义一个query1234myfunc &lt;- function(row, release, rating)&#123; newdata &lt;- (row[&quot;ReleaseDate&quot;]%in%release)&amp;(row[&quot;AvgRating&quot;]&gt;rating)&#125;upset(movies, queries = list(list(query=myfunc, params=list(c(1950,1960,1990,2000), 3.0), color=&quot;red&quot;, active=T))) 添加query图例12345upset(movies, query.legend = &quot;top&quot;, queries = list(list(query = intersects, params = list(&quot;Drama&quot;, &quot;Comedy&quot;, &quot;Action&quot;), color = &quot;orange&quot;, active = T, query.name = &quot;Funny action&quot;), list(query = intersects, params = list(&quot;Drama&quot;), color = &quot;red&quot;, active = F), list(query = intersects, params = list(&quot;Action&quot;, &quot;Drama&quot;), active = T, query.name = &quot;Emotional action&quot;))) 参数attribute.plots主要是用于添加属性图，内置有柱形图、散点图、热图等 柱形图1234upset(movies, main.bar.color = &quot;black&quot;, queries = list(list(query = intersects, params = list(&quot;Drama&quot;), active = T)), attribute.plots = list(gridrows = 50, plots = list(list(plot = histogram, x = &quot;ReleaseDate&quot;, queries = F), list(plot = histogram, x = &quot;AvgRating&quot;, queries = T)), ncols = 2)) 散点图1234567upset(movies, main.bar.color = &quot;black&quot;, queries = list(list(query = intersects, params = list(&quot;Drama&quot;), color = &quot;red&quot;, active = F), list(query = intersects, params = list(&quot;Action&quot;, &quot;Drama&quot;), active = T), list(query = intersects, params = list(&quot;Drama&quot;, &quot;Comedy&quot;, &quot;Action&quot;), color = &quot;orange&quot;, active = T)), attribute.plots = list(gridrows = 45, plots = list(list(plot = scatter_plot, x = &quot;ReleaseDate&quot;, y = &quot;AvgRating&quot;, queries = T), list(plot = scatter_plot, x = &quot;AvgRating&quot;, y = &quot;Watches&quot;, queries = F)), ncols = 2), query.legend = &quot;bottom&quot;) 箱线图箱线图可以展示数据的分布,通过参数boxplot.summary控制，最多可以一次性显示两个箱线图 1upset(movies, boxplot.summary = c(&quot;AvgRating&quot;, &quot;ReleaseDate&quot;)) 还有一个十分重要的功能Incorporating Set Metadata这里就不讲了，有兴趣的可以参考这份文档 SessionInfo12345678910111213141516171819202122232425262728sessionInfo()## R version 3.4.2 (2017-09-28)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 15063)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] UpSetR_1.3.3## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.13 knitr_1.17 magrittr_1.5 munsell_0.4.3 ## [5] colorspace_1.3-2 rlang_0.1.2 stringr_1.2.0 highr_0.6 ## [9] plyr_1.8.4 tools_3.4.2 grid_3.4.2 gtable_0.2.0 ## [13] htmltools_0.3.6 yaml_2.1.14 lazyeval_0.2.0 rprojroot_1.2 ## [17] digest_0.6.12 tibble_1.3.4 gridExtra_2.3 ggplot2_2.2.1 ## [21] evaluate_0.10.1 rmarkdown_1.6 labeling_0.3 stringi_1.1.5 ## [25] compiler_3.4.2 scales_0.5.0 backports_1.1.1 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>UpSetR</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ggplot2高效实用指南]]></title>
    <url>%2F2017%2F09%2F19%2Fggplot2%E9%AB%98%E6%95%88%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[简介本文内容基本是来源于STHDA，这是一份十分详细的ggplot2使用指南，因此我将其翻译成中文，一是有助于我自己学习理解，另外其他R语言爱好者或者可视化爱好者可以用来学习。翻译过程肯定不能十全十美，各位读者有建议或改进的话，十分欢迎发Email(tyan@zju.edu.cn)给我。 ggplot2是由Hadley Wickham创建的一个十分强大的可视化R包。按照ggplot2的绘图理念，Plot(图)= data(数据集)+ Aesthetics(美学映射)+ Geometry(几何对象)： data: 数据集，主要是data frame； Aesthetics: 美学映射，比如将变量映射给x,y坐标轴，或者映射给颜色、大小、形状等图形属性； Geometry: 几何对象，比如柱形图、直方图、散点图、线图、密度图等。 在ggplot2中有两个主要绘图函数：qplot()以及ggplot()。 qplot(): 顾名思义，快速绘图； ggplot()：此函数才是ggplot2的精髓，远比qplot()强大，可以一步步绘制十分复杂的图形。 由ggplot2绘制出来的ggplot图可以作为一个变量，然后由print()显示出来。 图形类型根据数据集，ggplot2提供不同的方法绘制图形，主要是为下面几类数据类型提供绘图方法： 一个变量x: 连续或离散 两个变量x&amp;y：连续和(或)离散 连续双变量分布x&amp;y: 都是连续 误差棒 地图 三变量 安装及加载安装ggplot2提供三种方式： 123456#直接安装tidyverse，一劳永逸（推荐,数据分析大礼包）install.packages("tidyverse")#直接安装ggplot2install.packages("ggplot2")#从Github上安装最新的版本，先安装devtools(如果没安装的话)devtools::install_github("tidyverse/ggplot2") 加载1library(ggplot2) 数据准备 数据集应该数据框data.frame 本文将使用数据集mtcars。123456#load the data setdata(mtcars)df &lt;- mtcars[, c(&quot;mpg&quot;,&quot;cyl&quot;,&quot;wt&quot;)]#将cyl转为因子型factordf$cyl &lt;- as.factor(df$cyl)head(df) 1234567## mpg cyl wt## Mazda RX4 21.0 6 2.620## Mazda RX4 Wag 21.0 6 2.875## Datsun 710 22.8 4 2.320## Hornet 4 Drive 21.4 6 3.215## Hornet Sportabout 18.7 8 3.440## Valiant 18.1 6 3.460 qplot()qplot()类似于R基本绘图函数plot(),可以快速绘制常见的几种图形：散点图、箱线图、小提琴图、直方图以及密度曲线图。其绘图格式为：1qplot(x, y=NULL, data, geom="auto") 其中： x,y: 根据需要绘制的图形使用; data：数据集; geom：几何图形，变量x,y同时指定的话默认为散点图，只指定x的话默认为直方图。 散点图1qplot(x=mpg, y=wt, data=df, geom = &quot;point&quot;) 也可以添加平滑曲线1qplot(x=mpg, y=wt, data = df, geom = c(&quot;point&quot;, &quot;smooth&quot;)) 还有其他参数可以修改，比如点的形状、大小、颜色等12#将变量cyl映射给颜色和形状qplot(x=mpg, y=wt, data = df, colour=cyl, shape=cyl) 箱线图、小提琴图、点图1234567#构造数据集set.seed(1234)wdata &lt;- data.frame( sex=factor(rep(c(&quot;F&quot;, &quot;M&quot;), each=200)), weight=c(rnorm(200, 55), rnorm(200, 58)))head(wdata) 1234567## sex weight## 1 F 53.79293## 2 F 55.27743## 3 F 56.08444## 4 F 52.65430## 5 F 55.42912## 6 F 55.50606 箱线图1qplot(sex, weight, data = wdata, geom = &quot;boxplot&quot;, fill=sex) 小提琴图1qplot(sex, weight, data = wdata, geom = &quot;violin&quot;) 点图1qplot(sex, weight, data = wdata, geom = &quot;dotplot&quot;, stackdir=&quot;center&quot;, binaxis=&quot;y&quot;, dotsize=0.5, color=sex) 直方图、密度图直方图1qplot(weight, data = wdata, geom = &quot;histogram&quot;, fill=sex) 密度图1qplot(weight, data = wdata, geom = &quot;density&quot;, color=sex, linetype=sex) ggplot()上文中的qplot()绘制散点图：1qplot(x=mpg, y=wt, data=df, geom = "point") 在ggplot()中完全可以如下实现：12ggplot(data=df, aes(x=mpg, y=wt))+ geom_point() 改变点形状、大小、颜色等属性1ggplot(data=df, aes(x=mpg, y=wt))+geom_point(color=&quot;blue&quot;, size=2, shape=23) 绘图过程中常常要用到转换(transformation),这时添加图层的另一个方法是用stat_*()函数。下例中的geom_density()与stat_density()是等价的1ggplot(wdata, aes(x=weight))+geom_density() 等价于1ggplot(wdata, aes(x=weight))+stat_density() 对于每一种几何图形。ggplot2 基本都提供了 geom()和 stat() 一个变量：连续型使用数据集wdata，先计算出不同性别的体重平均值12library(plyr)mu &lt;- ddply(wdata, &quot;sex&quot;, summarise, grp.mean=mean(weight)) 先绘制一个图层a,后面逐步添加图层1a &lt;- ggplot(wdata, aes(x=weight)) 可能添加的图层有： 对于一个连续变量： 面积图geom_area() 密度图geom_density() 点图geom_dotplot() 频率多边图geom_freqpoly() 直方图geom_histogram() 经验累积密度图stat_ecdf() QQ图stat_qq() 对于一个离散变量： 条形图geom_bar() 面积图1a+geom_area(stat = &quot;bin&quot;) 改变颜色12a+geom_area(aes(fill=sex), stat = &quot;bin&quot;, alpha=0.6)+ theme_classic() 注意：y轴默认为变量weight的数量即count，如果y轴要显示密度，可用以下代码： 1a+geom_area(aes(y=..density..), stat = &quot;bin&quot;) 可以通过修改不同属性如透明度、填充颜色、大小、线型等自定义图形： 密度图使用以下函数： geom_density():绘制密度图 geom_vline():添加竖直线 scale_color_manual():手动修改颜色 1a+geom_density() 根据sex修改颜色，将sex映射给line颜色1a+geom_density(aes(color=sex)) 修改填充颜色以及透明度1a+geom_density(aes(fill=sex), alpha=0.4) 添加均值线以及手动修改颜色123a+geom_density(aes(color=sex))+ geom_vline(data=mu, aes(xintercept=grp.mean, color=sex), linetype=&quot;dashed&quot;)+ scale_color_manual(values = c(&quot;red&quot;, &quot;blue&quot;)) 点图1a+geom_dotplot() 将sex映射给颜色1a+geom_dotplot(aes(fill=sex)) 手动修改颜色12a+geom_dotplot(aes(fill=sex))+ scale_fill_manual(values=c(&quot;#999999&quot;, &quot;#E69F00&quot;)) 频率多边图1a+geom_freqpoly() y轴显示为密度12a+geom_freqpoly(aes(y=..density..))+ theme_minimal() 修改颜色以及线型12a+geom_freqpoly(aes(color=sex, linetype=sex))+ theme_minimal() 直方图1a+geom_histogram() 将sex映射给线颜色1a+geom_histogram(aes(color=sex), fill=&quot;white&quot;, position = &quot;dodge&quot;)+theme_classic() 经验累积密度图1a+stat_ecdf() QQ图1ggplot(data = mtcars, aes(sample=mpg))+stat_qq() 一个离散变量1234#加载数据集data(mpg)b &lt;- ggplot(mpg, aes(x=fl))b+geom_bar() 修改填充颜色1b+geom_bar(fill=&quot;steelblue&quot;, color=&quot;black&quot;)+theme_classic() 两个变量：x,y皆连续使用数据集mtcars， 先创建一个ggplot图层1b &lt;- ggplot(data = mtcars, aes(x=wt, y=mpg)) 可能添加的图层有： geom_point():散点图 geom_smooth():平滑线 geom_quantile():分位线 geom_rug():边际地毯线 geom_jitter():避免重叠 geom_text():添加文本注释 散点图1b+geom_point() 将变量cyl映射给点的颜色和形状1b + geom_point(aes(color = factor(cyl), shape = factor(cyl))) 自定义颜色12b+geom_point(aes(color=factor(cyl), shape=factor(cyl)))+ scale_color_manual(values=c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;))+theme_classic() 平滑线可以添加回归曲线1b+geom_smooth() 散点图+回归线12b+geom_point()+ geom_smooth(method = &quot;lm&quot;, se=FALSE)#去掉置信区间 使用loess方法12b+geom_point()+ geom_smooth(method = &quot;loess&quot;) 将变量映射给颜色和形状12b+geom_point(aes(color=factor(cyl), shape=factor(cyl)))+ geom_smooth(aes(color=factor(cyl), shape=factor(cyl)), method = &quot;lm&quot;, se=FALSE, fullrange=TRUE) 分位线123ggplot(data = mpg, aes(cty, hwy))+ geom_point()+geom_quantile()+ theme_minimal() 边际地毯线使用数据集faithful12ggplot(data = faithful, aes(x=eruptions, y=waiting))+ geom_point()+geom_rug() 避免重叠实际上geom_jitter()是geom_point(position=&quot;jitter&quot;)的简称,下面使用数据集mpg12p &lt;- ggplot(data = mpg, aes(displ, hwy))p+geom_point() 增加抖动防止重叠1p+geom_jitter(width = 0.5, height = 0.5) 其中两个参数： width：x轴方向的抖动幅度 height：y轴方向的抖动幅度 文本注释参数label用来指定注释标签1b+geom_text(aes(label=rownames(mtcars))) 两个变量：连续二元分布使用数据集diamonds1head(diamonds[, c(&quot;carat&quot;, &quot;price&quot;)]) 123456789## # A tibble: 6 x 2## carat price## &lt;dbl&gt; &lt;int&gt;## 1 0.23 326## 2 0.21 326## 3 0.23 327## 4 0.29 334## 5 0.31 335## 6 0.24 336 创建ggplot图层,后面再逐步添加图层1c &lt;- ggplot(data=diamonds, aes(carat, price)) 可添加的图层有： geom_bin2d(): 二维封箱热图 geom_hex(): 六边形封箱图 geom_density_2d(): 二维等高线密度图 二维封箱热图geom_bin2d()将点的数量用矩形封装起来，通过颜色深浅来反映点密度1c+geom_bin2d() 设置bin的数量1c+geom_bin2d(bins=150) 六边形封箱图geom_hex()依赖于另一个R包hexbin，所以没安装的先安装：1install.packages("hexbin") 12library(hexbin)c+geom_hex() 修改bin的数目1c+geom_hex(bins=10) 二维等高线密度图12sp &lt;- ggplot(faithful, aes(x=eruptions, y=waiting))sp+geom_point()+ geom_density_2d() 两个变量：连续函数主要是如何通过线来连接两个变量，使用数据集economics。1head(economics) 123456789## # A tibble: 6 x 6## date pce pop psavert uempmed unemploy## &lt;date&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;## 1 1967-07-01 507.4 198712 12.5 4.5 2944## 2 1967-08-01 510.5 198911 12.5 4.7 2945## 3 1967-09-01 516.3 199113 11.7 4.6 2958## 4 1967-10-01 512.9 199311 12.5 4.9 3143## 5 1967-11-01 518.1 199498 12.5 4.7 3066## 6 1967-12-01 525.8 199657 12.1 4.8 3018 先创建一个ggplot图层，后面逐步添加图层1d &lt;- ggplot(data = economics, aes(x=date, y=unemploy)) 可添加的图层有： geom_area():面积图 geom_line()：折线图 geom_step(): 阶梯图 面积图1d+geom_area() 线图1d+geom_line() 阶梯图1234set.seed(1111)ss &lt;- economics[sample(1:nrow(economics), 20),]ggplot(ss, aes(x=date, y=unemploy))+ geom_step() 两个变量：x离散，y连续使用数据集ToothGrowth,其中的变量len(Tooth length)是连续变量，dose是离散变量。12ToothGrowth$dose &lt;- as.factor(ToothGrowth$dose)head(ToothGrowth) 1234567## len supp dose## 1 4.2 VC 0.5## 2 11.5 VC 0.5## 3 7.3 VC 0.5## 4 5.8 VC 0.5## 5 6.4 VC 0.5## 6 10.0 VC 0.5 创建图层1e &lt;- ggplot(data = ToothGrowth, aes(x=dose, y=len)) 可添加的图层有： geom_boxplot(): 箱线图 geom_violin()：小提琴图 geom_dotplot()：点图 geom_jitter(): 带状图 geom_line(): 线图 geom_bar(): 条形图 箱线图1e+geom_boxplot() 添加有缺口的箱线图1e+geom_boxplot(notch = TRUE) 按dose分组映射给颜色1e+geom_boxplot(aes(color=dose)) 将dose映射给填充颜色1e+geom_boxplot(aes(fill=dose)) 按supp进行分类并映射给填充颜色1ggplot(ToothGrowth, aes(x=dose, y=len))+ geom_boxplot(aes(fill=supp)) 小提琴图1e+geom_violin(trim = FALSE) 添加中值点123e+geom_violin(trim = FALSE)+ stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), geom=&quot;pointrange&quot;, color=&quot;red&quot;) 与箱线图结合12e+geom_violin(trim = FALSE)+ geom_boxplot(width=0.2) 将dose映射给颜色进行分组1e+geom_violin(aes(color=dose), trim = FALSE) 点图1e+geom_dotplot(binaxis = &quot;y&quot;, stackdir = &quot;center&quot;) 添加中值点12e + geom_dotplot(binaxis = &quot;y&quot;, stackdir = &quot;center&quot;) + stat_summary(fun.data=mean_sdl, color = &quot;red&quot;,geom = &quot;pointrange&quot;,fun.args=list(mult=1)) 与箱线图结合12e + geom_boxplot() + geom_dotplot(binaxis = &quot;y&quot;, stackdir = &quot;center&quot;) 添加小提琴图12e + geom_violin(trim = FALSE) + geom_dotplot(binaxis=&apos;y&apos;, stackdir=&apos;center&apos;) 将dose映射给颜色以及填充色12e + geom_dotplot(aes(color = dose, fill = dose), binaxis = &quot;y&quot;, stackdir = &quot;center&quot;) 带状图带状图是一种一维散点图，当样本量很小时，与箱线图相当1e + geom_jitter(position=position_jitter(0.2)) 添加中值点123e + geom_jitter(position=position_jitter(0.2)) + stat_summary(fun.data=&quot;mean_sdl&quot;, fun.args = list(mult=1), geom=&quot;pointrange&quot;, color = &quot;red&quot;) 与点图结合12e + geom_jitter(position=position_jitter(0.2)) + geom_dotplot(binaxis = &quot;y&quot;, stackdir = &quot;center&quot;) 与小提琴图结合12e + geom_violin(trim = FALSE) + geom_jitter(position=position_jitter(0.2)) 将dose映射给颜色和形状12e + geom_jitter(aes(color = dose, shape = dose), position=position_jitter(0.2)) 线图12345#构造数据集df &lt;- data.frame(supp=rep(c(&quot;VC&quot;, &quot;OJ&quot;), each=3), dose=rep(c(&quot;D0.5&quot;, &quot;D1&quot;, &quot;D2&quot;),2), len=c(6.8, 15, 33, 4.2, 10, 29.5))head(df) 1234567## supp dose len## 1 VC D0.5 6.8## 2 VC D1 15.0## 3 VC D2 33.0## 4 OJ D0.5 4.2## 5 OJ D1 10.0## 6 OJ D2 29.5 将supp映射线型123ggplot(df, aes(x=dose, y=len, group=supp)) + geom_line(aes(linetype=supp))+ geom_point() 修改线型、点的形状以及颜色123ggplot(df, aes(x=dose, y=len, group=supp)) + geom_line(aes(linetype=supp, color = supp))+ geom_point(aes(shape=supp, color = supp)) 条形图1234#构造数据集df &lt;- data.frame(dose=c(&quot;D0.5&quot;, &quot;D1&quot;, &quot;D2&quot;), len=c(4.2, 10, 29.5))head(df) 1234## dose len## 1 D0.5 4.2## 2 D1 10.0## 3 D2 29.5 1234df2 &lt;- data.frame(supp=rep(c(&quot;VC&quot;, &quot;OJ&quot;), each=3), dose=rep(c(&quot;D0.5&quot;, &quot;D1&quot;, &quot;D2&quot;),2), len=c(6.8, 15, 33, 4.2, 10, 29.5))head(df2) 1234567## supp dose len## 1 VC D0.5 6.8## 2 VC D1 15.0## 3 VC D2 33.0## 4 OJ D0.5 4.2## 5 OJ D1 10.0## 6 OJ D2 29.5 创建图层12f &lt;- ggplot(df, aes(x = dose, y = len))f + geom_bar(stat = &quot;identity&quot;) 修改填充色以及添加标签123f + geom_bar(stat=&quot;identity&quot;, fill=&quot;steelblue&quot;)+ geom_text(aes(label=len), vjust=-0.3, size=3.5)+ theme_minimal() 将dose映射给条形图颜色12f + geom_bar(aes(color = dose), stat=&quot;identity&quot;, fill=&quot;white&quot;) 修改填充色1f + geom_bar(aes(fill = dose), stat=&quot;identity&quot;) 将变量supp映射给填充色，从而达到分组效果12g &lt;- ggplot(data=df2, aes(x=dose, y=len, fill=supp)) g + geom_bar(stat = &quot;identity&quot;)#position默认为stack 修改position为dodge1g + geom_bar(stat=&quot;identity&quot;, position=position_dodge()) 两个变量：x、y皆离散使用数据集diamonds中的两个离散变量color以及cut12ggplot(diamonds, aes(cut, color)) + geom_jitter(aes(color = cut), size = 0.5) 两个变量：绘制误差图123df &lt;- ToothGrowthdf$dose &lt;- as.factor(df$dose)head(df) 1234567## len supp dose## 1 4.2 VC 0.5## 2 11.5 VC 0.5## 3 7.3 VC 0.5## 4 5.8 VC 0.5## 5 6.4 VC 0.5## 6 10.0 VC 0.5 绘制误差图需要知道均值以及标准误，下面这个函数用来计算每组的均值以及标准误。12345678910data_summary &lt;- function(data, varname, grps)&#123; require(plyr) summary_func &lt;- function(x, col)&#123; c(mean = mean(x[[col]], na.rm=TRUE), sd = sd(x[[col]], na.rm=TRUE)) &#125; data_sum&lt;-ddply(data, grps, .fun=summary_func, varname) data_sum &lt;- rename(data_sum, c(&quot;mean&quot; = varname)) return(data_sum)&#125; 计算均值以及标准误1234df2 &lt;- data_summary(df, varname=&quot;len&quot;, grps= &quot;dose&quot;)# Convert dose to a factor variabledf2$dose=as.factor(df2$dose)head(df2) 1234## dose len sd## 1 0.5 10.605 4.499763## 2 1 19.735 4.415436## 3 2 26.100 3.774150 创建图层12f &lt;- ggplot(df2, aes(x = dose, y = len, ymin = len-sd, ymax = len+sd)) 可添加的图层有： geom_crossbar(): 空心柱，上中下三线分别代表ymax、mean、ymin geom_errorbar(): 误差棒 geom_errorbarh(): 水平误差棒 geom_linerange()：竖直误差线 geom_pointrange()：中间为一点的误差线 具体如下： geom_crossbar()1f+geom_crossbar() 将dose映射给颜色1f+geom_crossbar(aes(color=dose)) 自定义颜色12f+geom_crossbar(aes(color=dose))+ scale_color_manual(values = c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;))+theme_classic() 修改填充色123f+geom_crossbar(aes(fill=dose))+ scale_fill_manual(values = c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;))+ theme_classic() 通过将supp映射给颜色实现分组，可以利用函数stat_summary()来计算mean和sd12f &lt;- ggplot(df, aes(x=dose, y=len, color=supp))f+stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), geom=&quot;crossbar&quot;, width=0.6, position = position_dodge(0.8)) 误差棒1f &lt;- ggplot(df2, aes(x=dose, y=len, ymin=len-sd, ymax=len+sd)) 将dose映射给颜色1f+geom_errorbar(aes(color=dose), width=0.2) 与线图结合12f+geom_line(aes(group=1))+ geom_errorbar(width=0.15) 与条形图结合，并将变量dose映射给颜色12f+geom_bar(aes(color=dose), stat = &quot;identity&quot;, fill=&quot;white&quot;)+ geom_errorbar(aes(color=dose), width=0.1) 水平误差棒1234#构造数据集df2 &lt;- data_summary(ToothGrowth, varname=&quot;len&quot;, grps = &quot;dose&quot;)df2$dose &lt;- as.factor(df2$dose)head(df2) 1234## dose len sd## 1 0.5 10.605 4.499763## 2 1 19.735 4.415436## 3 2 26.100 3.774150 创建图层1f &lt;- ggplot(data = df2, aes(x=len, y=dose,xmin=len-sd, xmax=len+sd)) 参数xmin与xmax用来设置水平误差棒 1f+geom_errorbarh() 通过映射实现分组1f+geom_errorbarh(aes(color=dose)) geom_linerange()与geom_pointrange()1f &lt;- ggplot(df2, aes(x=dose, y=len, ymin=len-sd, ymax=len+sd)) line range1f+geom_linerange() point range1f+geom_pointrange() 点图+误差棒12g &lt;- ggplot(df, aes(x=dose, y=len))+ geom_dotplot(binaxis = &quot;y&quot;, stackdir = &quot;center&quot;) 添加geom_crossbar()1g+stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), geom=&quot;crossbar&quot;, color=&quot;red&quot;, width=0.1) 添加geom_errorbar()123g + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1), geom=&quot;errorbar&quot;, color=&quot;red&quot;, width=0.2) + stat_summary(fun.y=mean, geom=&quot;point&quot;, color=&quot;red&quot;) 添加geom_pointrange()12g + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1), geom=&quot;pointrange&quot;, color=&quot;red&quot;) 两个变量：地图绘制ggplot2提供了绘制地图的函数geom_map()，依赖于包maps提供地理信息。安装map1install.paclages("maps") 下面将绘制美国地图，数据集采用USArrests12library(maps)head(USArrests) 1234567## Murder Assault UrbanPop Rape## Alabama 13.2 236 58 21.2## Alaska 10.0 263 48 44.5## Arizona 8.1 294 80 31.0## Arkansas 8.8 190 50 19.5## California 9.0 276 91 40.6## Colorado 7.9 204 78 38.7 对数据进行整理一下,添加一列state12crimes &lt;- data.frame(state=tolower(rownames(USArrests)), USArrests)head(crimes) 1234567## Murder Assault UrbanPop Rape## Alabama 13.2 236 58 21.2## Alaska 10.0 263 48 44.5## Arizona 8.1 294 80 31.0## Arkansas 8.8 190 50 19.5## California 9.0 276 91 40.6## Colorado 7.9 204 78 38.7 1234#数据重铸library(reshape2)crimesm &lt;- melt(crimes, id=1)head(crimesm) 1234567## state variable value## 1 alabama Murder 13.2## 2 alaska Murder 10.0## 3 arizona Murder 8.1## 4 arkansas Murder 8.8## 5 california Murder 9.0## 6 colorado Murder 7.9 12345map_data &lt;- map_data("state")#绘制地图，使用Murder进行着色ggplot(crimes, aes(map_id=state))+ geom_map(aes(fill=Murder), map=map_data)+ expand_limits(x=map_data$long, y=map_data$lat) 三个变量使用数据集mtcars，首先绘制一个相关性图123#构造数据df &lt;- mtcars[, c(1,3,4,5,6,7)]head(df) 1234567## mpg disp hp drat wt qsec## Mazda RX4 21.0 160 110 3.90 2.620 16.46## Mazda RX4 Wag 21.0 160 110 3.90 2.875 17.02## Datsun 710 22.8 108 93 3.85 2.320 18.61## Hornet 4 Drive 21.4 258 110 3.08 3.215 19.44## Hornet Sportabout 18.7 360 175 3.15 3.440 17.02## Valiant 18.1 225 105 2.76 3.460 20.22 123cormat &lt;- round(cor(df), 2)cormat_melt &lt;- melt(cormat)head(cormat) 1234567## mpg disp hp drat wt qsec## mpg 1.00 -0.85 -0.78 0.68 -0.87 0.42## disp -0.85 1.00 0.79 -0.71 0.89 -0.43## hp -0.78 0.79 1.00 -0.45 0.66 -0.71## drat 0.68 -0.71 -0.45 1.00 -0.71 0.09## wt -0.87 0.89 0.66 -0.71 1.00 -0.17## qsec 0.42 -0.43 -0.71 0.09 -0.17 1.00 创建图层：1g &lt;- ggplot(cormat_melt, aes(x=Var1, y=Var2)) 在此基础上可添加的图层有： geom_tile(): 瓦片图 geom_raster(): 光栅图，瓦片图的一种，只不过所有的tiles都是一样的大小 现在使用使用geom_tile()绘制相关性矩阵图，我们这里这绘制下三角矩阵图，首先要整理数据：123456789101112#获得相关矩阵的下三角get_lower_tri &lt;- function(cormat)&#123; cormat[upper.tri(cormat)] &lt;- NA return(cormat)&#125;#获得相关矩阵的上三角get_upper_tri &lt;- function(cormat)&#123; cormat[lower.tri(cormat)] &lt;- NA return(cormat)&#125;upper_tri &lt;- get_upper_tri(cormat = cormat)head(upper_tri) 1234567## mpg disp hp drat wt qsec## mpg 1 -0.85 -0.78 0.68 -0.87 0.42## disp NA 1.00 0.79 -0.71 0.89 -0.43## hp NA NA 1.00 -0.45 0.66 -0.71## drat NA NA NA 1.00 -0.71 0.09## wt NA NA NA NA 1.00 -0.17## qsec NA NA NA NA NA 1.00 绘制相关矩阵图12345678#数据重铸upper_tri_melt &lt;- melt(upper_tri, na.rm = TRUE)ggplot(data=upper_tri_melt, aes(Var1, y=Var2, fill=value))+ geom_tile(color=&quot;white&quot;)+ scale_fill_gradient2(low = &quot;blue&quot;, high = &quot;red&quot;, mid = &quot;white&quot;, midpoint = 0, limit=c(-1, 1), space = &quot;Lab&quot;, name=&quot;Person\nCorrelation&quot;)+ theme_minimal()+ theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1))+ coord_fixed() 上图中蓝色代表互相关，红色代表正相关，至于coord_fixed()保证x，y轴比例为1 可以看出上图顺序有点乱，我们可以对相关矩阵进行排序12345678910#构造函数reorder_cormat &lt;- function(cormat)&#123; dd &lt;- as.dist((1-cormat)/2) hc &lt;- hclust(dd) cormat &lt;- cormat[hc$order, hc$order]&#125;cormat &lt;- reorder_cormat(cormat)lower_tri &lt;- get_lower_tri(cormat)lower_tri_melt &lt;- melt(lower_tri, na.rm = TRUE)head(lower_tri_melt) 1234567## Var1 Var2 value## 1 hp hp 1.00## 2 disp hp 0.79## 3 wt hp 0.66## 4 qsec hp -0.71## 5 mpg hp -0.78## 6 drat hp -0.45 绘制图形12345678ggheatmap &lt;- ggplot(lower_tri_melt, aes(Var1, Var2, fill=value))+ geom_tile(color=&quot;white&quot;)+ scale_fill_gradient2(low = &quot;blue&quot;, high = &quot;red&quot;, mid = &quot;white&quot;, midpoint = 0, limit=c(-1, 1), space = &quot;Lab&quot;, name=&quot;Person\nCorrelation&quot;)+ theme_minimal()+ theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1))+ coord_fixed()print(ggheatmap) 图元：多边形、路径、带状、射线（线段）、矩形等本节主要讲述的是添加图形元件，将用到一下函数： geom_polygon()：添加多边形 geom_path(): 路径 geom_ribbon(): 带状 geom_segment(): 射线、线段 geom_curve(): 曲线 geom_rect(): 二维矩形 添加多边形12345library(dplyr)map_data(&quot;world&quot;)%&gt;% filter(region==c(&quot;China&quot;, &quot;Taiwan&quot;))%&gt;% ggplot(aes(x=long, y=lat, group=group))+ geom_polygon(fill=&quot;red&quot;, color=&quot;black&quot;) 添加路径、带状、矩形创建图层1h &lt;- ggplot(economics, aes(date, unemploy)) 添加路径1h+geom_path() 添加带状1h+geom_ribbon(aes(ymin=unemploy-800, ymax=unemploy+800), fill = &quot;grey70&quot;)+geom_line(aes(y=unemploy)) 添加矩形123h+ geom_path()+ geom_rect(aes(xmin=as.Date(&quot;1980-01-01&quot;), ymin=-Inf, xmax=as.Date(&quot;1985-01-01&quot;), ymax=Inf), fill=&quot;steelblue&quot;) 添加线段123i &lt;- ggplot(mtcars, aes(wt, mpg))+geom_point()#添加线段i+geom_segment(aes(x=2, y=15, xend=3, yend=15)) 添加箭头1i+geom_segment(aes(x=5, y=30, xend=3.5, yend=25), arrow = arrow(length = unit(0.5, &quot;cm&quot;))) 添加曲线1i+geom_curve(aes(x=2, y=15, xend=3, yend=15), color=&quot;red&quot;) 图形参数：主标题、坐标轴标签、图例标题创建图层12ToothGrowth$dose &lt;- as.factor(ToothGrowth$dose)p &lt;- ggplot(ToothGrowth, aes(x=dose, y=len))+geom_boxplot() 修改标题以及标签的函数有： ggtitle(“New main title”): 添加主标题 xlab(“New X axis label”): 修改x轴标签 ylab(“New Y axis label”): 修改y轴标签 labs(title = “New main title”, x = “New X axis label”, y = “New Y axis label”): 可同时添加主标题以及坐标轴标签，另外，图例标题也可以用此函数修改 修改主标题以及标签1(p &lt;- p+labs(title=&quot;Plot of length\nby dose&quot;, x=&quot;Dose (mg)&quot;, y=&quot;teeth length&quot;)) 修改标签属性：颜色、字体、大小等使用theme()修改,element_text()可以具体修改图形参数，element_blank()隐藏标签123456#修改标签p+theme(plot.title = element_text(color = &quot;red&quot;, size = 14, face = &quot;bold.italic&quot;),axis.title.x = element_text(color=&quot;blue&quot;, size = 14, face = &quot;bold&quot;),axis.title.y = element_text(color=&quot;#993333&quot;, size = 14, face = &quot;bold&quot;)) 123456#隐藏标签p+theme( plot.title = element_blank(), axis.title.x = element_blank(), axis.title.y = element_blank()) 修改图例标题123p &lt;- ggplot(ToothGrowth, aes(x=dose, y=len, fill=dose))+ geom_boxplot()p 12#修改图例标题p+labs(fill="Dose (mg)") 图例位置以及外观修改图例位置以及外观12#图例位置在最上面，有五个选项：&quot;left&quot;,&quot;top&quot;, &quot;right&quot;, &quot;bottom&quot;, &quot;none&quot;p+theme(legend.position = &quot;top&quot;) 移除图例1p+theme(legend.position = &quot;none&quot;) 修改图例标题以及标签外观1234p+theme( legend.title = element_text(color=&quot;blue&quot;), legend.text = element_text(color=&quot;red&quot;)) 修改图例背景1p+theme(legend.background = element_rect(fill=&quot;lightblue&quot;)) 利用scale()函数自定义图例主要两个函数： scale_x_discrete()：修改图例标签顺序 scale_fill_discrete(): 修改图例标题以及标签 12#修改顺序p+scale_x_discrete(limits=c(&quot;2&quot;, &quot;0.5&quot;, &quot;1&quot;)) 12#修改标题以及标签p+scale_fill_discrete(name="Dose", label=c("A","B","C")) 自动/手动修改颜色1mtcars$cyl &lt;- as.factor(mtcars$cyl) 创建图层1234# boxplotbp &lt;- ggplot(ToothGrowth, aes(x=dose, y=len))# scatter plotsp &lt;- ggplot(mtcars, aes(x=wt, y=mpg)) 修改填充色、轮廓线颜色1bp+geom_boxplot(fill=&quot;steelblue&quot;, color=&quot;red&quot;) 1sp+geom_point(color=&quot;darkblue&quot;) 通过映射分组修改颜色1(bp &lt;- bp+geom_boxplot(aes(fill=dose))) 1(sp &lt;- sp+geom_point(aes(color=cyl))) 手动修改颜色主要两个函数： scale_fill_manual(): 填充色 scale_color_manual()：轮廓色，如点线 12# Box plotbp + scale_fill_manual(values=c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;)) 12# Scatter plotsp + scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9")) 使用RColorBrewer调色板 scale_fill_brewer(): 填充色 scale_color_brewer()：轮廓色，如点线 12# Box plotbp + scale_fill_brewer(palette=&quot;Dark2&quot;) 12# Scatter plotsp + scale_color_brewer(palette="Dark2") RColorBrewer包提供以下调色板 还专门有一个灰度调色板：12# Box plotbp + scale_fill_grey() + theme_classic() 12# Scatter plotsp + scale_color_grey() + theme_classic() 梯度或连续颜色有时我们会将某个连续变量映射给颜色，这时修改这种梯度或连续型颜色就可以使用以下函数： scale_color_gradient(), scale_fill_gradient()：两种颜色的连续梯度 scale_color_gradient2(), scale_fill_gradient2()：不同梯度 scale_color_gradientn(), scale_fill_gradientn()：多种颜色梯度 1234# Color by qsec valuessp2&lt;-ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point(aes(color = qsec))sp2 123# Change the low and high colors# Sequential color schemesp2+scale_color_gradient(low="blue", high="red") 1234# Diverging color schememid&lt;-mean(mtcars$qsec)sp2+scale_color_gradient2(midpoint=mid, low="blue", mid="white", high="red", space = "Lab" ) 点颜色、大小、形状R提供的点形状是由数字表示的，具体如下： 123# Basic scatter plotggplot(mtcars, aes(x=wt, y=mpg)) + geom_point(shape = 18, color = &quot;steelblue&quot;, size = 4) 123# Change point shapes and colors by groupsggplot(mtcars, aes(x=wt, y=mpg)) + geom_point(aes(shape = cyl, color = cyl)) 可通过以下方法对点的颜色、大小、形状进行修改： scale_shape_manual() : to change point shapes scale_color_manual() : to change point colors scale_size_manual() : to change the size of points 123456# Change colors and shapes manuallyggplot(mtcars, aes(x=wt, y=mpg, group=cyl)) + geom_point(aes(shape=cyl, color=cyl), size=2)+ scale_shape_manual(values=c(3, 16, 17))+ scale_color_manual(values=c(&apos;#999999&apos;,&apos;#E69F00&apos;, &apos;#56B4E9&apos;))+ theme(legend.position=&quot;top&quot;) 文本注释对图形进行文本注释有以下方法： geom_text(): 文本注释 geom_label(): 文本注释,类似于geom_text(),只是多了个背景框 annotate(): 文本注释 annotation_custom(): 分面时可以在所有的面板进行文本注释 123set.seed(1234)df &lt;- mtcars[sample(1:nrow(mtcars), 10), ]df$cyl &lt;- as.factor(df$cyl) 散点图注释12345# Scatter plotsp &lt;- ggplot(df, aes(x=wt, y=mpg))+ geom_point() # Add text, change colors by groupssp + geom_text(aes(label = rownames(df), color = cyl), size = 3, vjust = -1) 123# Add text at a particular coordinatesp + geom_text(x = 3, y = 30, label = "Scatter plot", color="red") 12# geom_label()进行注释sp + geom_label(aes(label=rownames(df))) 1234567# annotation_custom(),需要用到textGrob()library(grid)# Create a textgrob &lt;- grobTree(textGrob("Scatter plot", x=0.1, y=0.95, hjust=0, gp=gpar(col="red", fontsize=13, fontface="italic")))# Plotsp + annotation_custom(grob) 12#分面注释sp + annotation_custom(grob)+facet_wrap(~cyl, scales="free") 线型R里的线型有七种：“blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash”, “twodash”，对应数字0，1，2，3，4，5，6. 具体如下： 12345# Create some datadf2 &lt;- data.frame(sex = rep(c(&quot;Female&quot;, &quot;Male&quot;), each=3), time=c(&quot;breakfeast&quot;, &quot;Lunch&quot;, &quot;Dinner&quot;), bill=c(10, 30, 15, 13, 40, 17) )head(df2) 1234567## sex time bill## 1 Female breakfeast 10## 2 Female Lunch 30## 3 Female Dinner 15## 4 Male breakfeast 13## 5 Male Lunch 40## 6 Male Dinner 17 123456# Line plot with multiple groups# Change line types and colors by groups (sex)ggplot(df2, aes(x=time, y=bill, group=sex)) + geom_line(aes(linetype = sex, color = sex))+ geom_point(aes(color=sex))+ theme(legend.position=&quot;top&quot;) 同点一样，线也可以类似修改： scale_linetype_manual() : to change line types scale_color_manual() : to change line colors scale_size_manual() : to change the size of lines 12345678# Change line types, colors and sizesggplot(df2, aes(x=time, y=bill, group=sex)) + geom_line(aes(linetype=sex, color=sex, size=sex))+ geom_point()+ scale_linetype_manual(values=c(&quot;twodash&quot;, &quot;dotted&quot;))+ scale_color_manual(values=c(&apos;#999999&apos;,&apos;#E69F00&apos;))+ scale_size_manual(values=c(1, 1.5))+ theme(legend.position=&quot;top&quot;) 主题与背景颜色12# Convert the column dose from numeric to factor variableToothGrowth$dose &lt;- as.factor(ToothGrowth$dose) 创建箱线图12p &lt;- ggplot(ToothGrowth, aes(x=dose, y=len))+ geom_boxplot() 修改主题ggplot2提供了好几种主题，另外有一个扩展包ggthemes专门提供了一主题，可以安装利用。1install.packages("ggthemes") theme_gray(): gray background color and white grid lines theme_bw() : white background and gray grid lines 1p+theme_gray(base_size = 14) 1p+theme_bw() theme_linedraw : black lines around the plot theme_light : light gray lines and axis (more attention towards the data) 1p + theme_linedraw() 1p + theme_light() theme_minimal: no background annotations theme_classic : theme with axis lines and no grid lines 1p + theme_minimal() 1p + theme_classic() ggthemes提供的主题1p+ggthemes::theme_economist() 坐标轴：最大最小值1p &lt;- ggplot(cars, aes(x=speed, y=dist))+geom_point() 修改坐标轴范围有以下几种方式：1、不删除数据 p+coord_cartesian(xlim=c(5, 20), ylim=c(0, 50)):笛卡尔坐标系，这是设定修改不会删除数据 2、会删除部分数据：不在此范围内的数据都会被删除,因此在此基础上添加图层时数据是不完整的 p+xlim(5, 20)+ylim(0, 50) p+scale_x_continuous(limits=c(5, 20))+scale_y_continuous(limits=c(0, 50)) 3、扩展图形范围：expand()函数，扩大范围 p+expand_limits(x=0, y=0):设置截距为0，即过原点 p+expand_limits(x=c(5, 50), y=c(0, 150))：扩大坐标轴范围，这样图形显示就小了 下面通过图形演示 1p 12#通过coord_cartesian()函数修改坐标轴范围p+coord_cartesian(xlim =c (5, 20), ylim = c(0, 50)) 12#通过xlim()和ylim()函数修改p+xlim(5, 20)+ylim(0, 50) 12#expand limitsp+expand_limits(x=c(5, 50), y=c(0, 150)) 坐标变换1p &lt;- ggplot(cars, aes(x=speed, y=dist))+geom_point() 坐标变换有以下几种： p+scale_x_log10(),p+scale_y_log10(): 绘图时对x，y取10的对数 p+scale_x_sqrt(),p+scale_x_sqrt(): 开根号 p+scale_x_reverse(),p+scale_x_reverse()：坐标轴反向 p+coord_trans(x =“log10”, y=“log10”): 同上，可以对坐标轴取对数、根号等 p+scale_x_continuous(trans=”log2”),p+scale_x_continuous(trans=”log2”): 同上，取对数的另外一种方法 下面实例演示：1p 12p+scale_x_continuous(trans = &quot;log2&quot;)+ scale_y_continuous(trans = &quot;log2&quot;) 12345#修改坐标刻度标签require(scales)p+scale_y_continuous(trans=log2_trans(), breaks = trans_breaks("log2", function(x) 2^x), labels=trans_format("log2", math_format(2^.x))) 12#坐标轴反向p+scale_y_reverse() 坐标刻度：刻度线、标签、顺序等更改坐标轴刻度线标签等函数： element_text(face, color, size, angle): 修改文本风格 element_blank(): 隐藏文本 1(p &lt;- ggplot(ToothGrowth, aes(x=dose, y=len))+geom_boxplot()) 修改刻度标签等12p+theme(axis.text.x = element_text(face = &quot;bold&quot;, color=&quot;#993333&quot;, size=14, angle = 45), axis.text.y = element_text(face = &quot;bold&quot;, size = 14, color = &quot;blue&quot;, angle = 45)) 移除刻度标签等1234p + theme( axis.text.x = element_blank(), # Remove x axis tick labels axis.text.y = element_blank(), # Remove y axis tick labels axis.ticks = element_blank()) # Remove ticks 当然可以自定义坐标轴了 离散非连续坐标轴 scale_x_discrete(name, breaks, labels, limits) scale_y_discrete(name, breaks, labels, limits) 连续型坐标轴 scale_x_conyinuous(name, breaks, labels, limits) scale_y_continuous(name, breaks, labels, limits) 详细情况如下： name: x,y轴的标题 breaks: 刻度，分成几段 labels：坐标轴刻度线标签 limits: 坐标轴范围 其中scale_xx()函数可以修改坐标轴的如下参数： 坐标轴标题 坐标轴范围 刻度标签位置 手动设置刻度标签 具体演示： 离散坐标轴 12#修改标签以及顺序p+scale_x_discrete(name=&quot;Dose (mg)&quot;, limits=c(&quot;2&quot;, &quot;1&quot;, &quot;0.5&quot;)) 12#修改刻度标签p+scale_x_discrete(breaks=c(&quot;0.5&quot;, &quot;1&quot;, &quot;2&quot;),labels=c(&quot;Dose 0.5&quot;, &quot;Dose 1&quot;, &quot;Dose 2&quot;)) 12#修改要显示的项p+scale_x_discrete(limits=c(&quot;0.5&quot;, &quot;2&quot;)) 连续型坐标轴12#散点图(sp &lt;- ggplot(cars, aes(x=speed, y=dist))+geom_point()) 修改坐标轴标签以及范围12(sp &lt;- sp+scale_x_continuous(name = &quot;Speed of cars&quot;, limits = c(0, 30))+ scale_y_continuous(name = &quot;Stopping distance&quot;, limits = c(0, 150))) 更改y轴刻度，间隔501sp+scale_y_continuous(breaks = seq(0, 150, 50)) 修改y轴标签为百分数12require(scales)sp+scale_y_continuous(labels = percent) 添加直线：水平线、竖直线、回归线ggplot2提供以下方法为图形添加直线： geom_hline(yintercept, linetype, color, size): 添加水平线 geom_vline(xintercept, linetype, color, size)：添加竖直线 geom_abline(intercept, slope, linetype, color, size)：添加回归线 geom_segment()：添加线段 实例演示：1sp &lt;- ggplot(data=mtcars, aes(x=wt, y=mpg))+ geom_point() 添加直线：12#在y=20处添加一水平线，并设置颜色等sp+geom_hline(yintercept = 20, linetype=&quot;dashed&quot;, color=&apos;red&apos;) 12#在x=3处添加一竖直线，并设置颜色等sp+geom_vline(xintercept = 3, color="blue", size=1.5) 12#添加回归线sp+geom_abline(intercept = 37, slope = -5, color="blue") 12#添加水平线段sp+geom_segment(aes(x=2, y=15, xend=3, yend=15), color="red") 图形旋转：旋转、反向主要是下面两个函数： coord_flip()：创建水平方向图 scale_x_reverse(),scale_y_reverse()：坐标轴反向 12set.seed(1234)(hp &lt;- qplot(x=rnorm(200), geom = &quot;histogram&quot;)) 12#水平柱形图hp+coord_flip() 12#y轴反向hp+scale_y_reverse() 分面分面就是根据一个或多个变量将图形分为几个图形以便于可视化，主要有两个方法实现： facet_grid() facet_wrap() 123ToothGrowth$dose &lt;- as.factor(ToothGrowth$dose)(p &lt;- ggplot(ToothGrowth, aes(x=dose, y=len, group=dose))+ geom_boxplot(aes(fill=dose))) 针对上面图形进行分面： p+facet_grid(supp~.): 按变量supp进行竖直方向分面 p+facet_grid(.~supp): 按变量supp进行水平方向分面 p+facet_wrap(dose~supp)：按双变量supp和dose进行水平竖直方向分面 p+facet_wrap(~fl): 将分成的面板边靠边置于一个矩形框内 1、按一个离散变量进行分面：12#竖直方向进行分面p+facet_grid(supp~.) 12#水平方向分面p+facet_grid(.~supp) 2、按两个离散变量进行分面12#行按dose分面，列按supp分面p+facet_grid(dose~supp) 12#行按supp，列按dose分面p+facet_grid(supp~dose) 从上面图形可以看出，每个面板的坐标轴比例都是一样的，我们可以通过设置参数scales来控制坐标轴比例1p + facet_grid(dose ~ supp, scales=&apos;free&apos;) 位置调整很多图形需要我们调整位置，比如直方图时，由堆叠式、百分式、分离式等，具体的要通过实例说明123p &lt;- ggplot(mpg, aes(fl, fill=drv))#直方图边靠边排列，参数position=&quot;dodge&quot;p+geom_bar(position = &quot;dodge&quot;) 堆叠式position=”stack”1p+geom_bar(position = &quot;stack&quot;) position=”fill”类似玉堆叠图，只不过按百分比排列，所有柱子都被标准化成同样高度1p+geom_bar(position = &quot;fill&quot;) position=”jitter”,（主要适用于散点图）增加扰动，避免重叠，前面讲的geom_jitter()就是来源于此12ggplot(mpg, aes(cty, hwy))+ geom_point(position = &quot;jitter&quot;) 上面几个函数有两个重要的参数：heigth、weight。 position_dodge(width, height) position_fill(width, height) position_stack(width, height) position_jitter(width, height) 1p+geom_bar(position = position_dodge(width = 1)) 坐标系1p &lt;- ggplot(mpg, aes(fl))+geom_bar() ggplot2中的坐标系主要有： p+coord_cartesian(xlim=NULL, ylim=NULL)：笛卡尔坐标系(默认) p+coord_fixed(ratio=1, clim=NULL, ylim=NULL)：固定了坐标轴比例的笛卡尔坐标系。默认比例为1 p+coord_flip(…)：旋转笛卡尔坐标系 p+coord_polar(theta=”x”, start=0, direction=1)：极坐标系 p+coord_trans(x,y,limx,limy)：变换笛卡尔坐标系 coord_map()：地图坐标系 各个坐标系参数如下：1、笛卡尔坐标系：coord_cartesian(), coord_fixed() and coord_flip() xlim：x轴范围 ylim：y轴范围 ratio：y/x …：其他参数 2、极坐标系：coord_polar() theta：外延坐标，x或y start：坐标开始的位置，默认为12点钟 direction：方向：顺时针(1),逆时针(-1) 3、变换坐标系：coord_trans() x,y：变换的坐标轴 limx,limy：坐标轴范围 实例演示：1p+coord_cartesian(ylim = c(0,200)) 1p+coord_fixed(ratio = 1/50) 1p+coord_flip() 1p+coord_polar(theta = &quot;x&quot;, direction = 1) 1p+coord_trans(y="sqrt") ggplot2包资料扩展：包、函数 ggplot2有一个官方网站，里面有十分详细的说明，点击这里直达 ggplot2还有十分多的扩展包，点击这里直达 SessionInfo12345678910111213141516171819202122232425262728293031323334353637383940414243sessionInfo()## R version 3.4.1 (2017-06-30)## Platform: x86_64-pc-linux-gnu (64-bit)## Running under: Ubuntu 16.04.3 LTS## ## Matrix products: default## BLAS: /usr/lib/atlas-base/atlas/libblas.so.3.0## LAPACK: /usr/lib/atlas-base/atlas/liblapack.so.3.0## ## locale:## [1] LC_CTYPE=zh_CN.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=zh_CN.UTF-8 LC_COLLATE=zh_CN.UTF-8 ## [5] LC_MONETARY=zh_CN.UTF-8 LC_MESSAGES=zh_CN.UTF-8 ## [7] LC_PAPER=zh_CN.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages:## [1] grid stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages:## [1] scales_0.5.0 bindrcpp_0.2 dplyr_0.7.3 reshape2_1.4.2## [5] maps_3.2.0 hexbin_1.27.1 plyr_1.8.4 ggplot2_2.2.1 ## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.12 bindr_0.1 compiler_3.4.1 ## [4] RColorBrewer_1.1-2 base64enc_0.1-3 tools_3.4.1 ## [7] rpart_4.1-11 digest_0.6.12 checkmate_1.8.3 ## [10] htmlTable_1.9 evaluate_0.10.1 tibble_1.3.4 ## [13] gtable_0.2.0 lattice_0.20-35 pkgconfig_2.0.1 ## [16] rlang_0.1.2 Matrix_1.2-11 yaml_2.1.14 ## [19] gridExtra_2.3 stringr_1.2.0 knitr_1.17 ## [22] cluster_2.0.6 htmlwidgets_0.9 rprojroot_1.2 ## [25] nnet_7.3-12 glue_1.1.1 data.table_1.10.4 ## [28] R6_2.2.2 survival_2.41-3 foreign_0.8-69 ## [31] rmarkdown_1.6 latticeExtra_0.6-28 Formula_1.2-2 ## [34] magrittr_1.5 ggthemes_3.4.0 backports_1.1.0 ## [37] Hmisc_4.0-3 htmltools_0.3.6 MASS_7.3-47 ## [40] splines_3.4.1 assertthat_0.2.0 colorspace_1.3-2 ## [43] labeling_0.3 stringi_1.1.5 acepack_1.4.1 ## [46] lazyeval_0.2.0 munsell_0.4.3 联系方式： wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介： 严涛浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tidyverse实践之绘制简单地图]]></title>
    <url>%2F2017%2F09%2F16%2Ftidyverse%E5%AE%9E%E8%B7%B5%E4%B9%8B%E7%BB%98%E5%88%B6%E7%AE%80%E5%8D%95%E5%9C%B0%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[简介tidyverse是一个数据科学的综合包，里面包含了数据分析一系列流程涉及的包，今天主要利用它绘制地图。这并不是它的强项，绘制地图leaflet才是利器，本文只是tidyverse的一个小练习。目前该包支持有限的几个国家，比如美国，新西兰、意大利等，当然世界地图是支持的。 绘图1234library(tidyverse)map_data(&quot;usa&quot;)%&gt;% ggplot(aes(x=long, y=lat, group=group))+ geom_polygon() 可以绘制美国的不同州，就行我国的省份一样123map_data(&quot;state&quot;)%&gt;% ggplot(aes(x=long, y=lat, group=group))+ geom_polygon(color=&quot;white&quot;) 另外我们可以只单独绘制几个state1234map_data(&quot;state&quot;)%&gt;% filter(region%in%c(&quot;california&quot;,&quot;nevada&quot;,&quot;oregon&quot;,&quot;washington&quot;))%&gt;% ggplot(aes(x=long, y=lat, group=group))+ geom_polygon(color=&quot;red&quot;) 再绘制细一点的地图，相当于市、县等fig.height=6, fig.width=4&#125;1234map_data(&quot;county&quot;)%&gt;% filter(region %in% c(&quot;california&quot;,&quot;nevada&quot;,&quot;oregon&quot;,&quot;washington&quot;))%&gt;% ggplot(aes(x=long, y=lat, group=group))+ geom_polygon(color=&quot;white&quot;) 世界地图很简单，只需将map_data()里的usa换成world就行 12map_data(&quot;world&quot;)%&gt;%ggplot(aes(x=long, y=lat, group=group))+ geom_polygon(color=&quot;white&quot;) 在世界地图中标出中国1234map_data(&quot;world&quot;)%&gt;% filter(region==&quot;China&quot;)%&gt;% ggplot(aes(x=long, y=lat, group=group))+ geom_polygon(fill=&quot;red&quot;) 美帝用心险恶，不承认台湾属于中国,自己添上去就是了1234map_data(&quot;world&quot;)%&gt;% filter(region==c(&quot;China&quot;,&quot;Taiwan&quot;))%&gt;% ggplot(aes(x=long, y=lat, group=group))+ geom_polygon(fill=&quot;red&quot;) SessionInfo123456789101112131415161718192021222324252627282930313233343536sessionInfo()## R version 3.4.1 (2017-06-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 15063)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] bindrcpp_0.2 maps_3.2.0 dplyr_0.7.2 ## [4] purrr_0.2.3 readr_1.1.1 tidyr_0.7.1 ## [7] tibble_1.3.4 ggplot2_2.2.1 tidyverse_1.1.1 ## [10] RevoUtilsMath_10.0.0## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.12 cellranger_1.1.0 compiler_3.4.1 plyr_1.8.4 ## [5] bindr_0.1 forcats_0.2.0 tools_3.4.1 digest_0.6.12 ## [9] lubridate_1.6.0 jsonlite_1.5 evaluate_0.10.1 nlme_3.1-131 ## [13] gtable_0.2.0 lattice_0.20-35 pkgconfig_2.0.1 rlang_0.1.2 ## [17] psych_1.7.8 yaml_2.1.14 parallel_3.4.1 haven_1.1.0 ## [21] xml2_1.1.1 httr_1.3.1 stringr_1.2.0 knitr_1.17 ## [25] hms_0.3 RevoUtils_10.0.5 rprojroot_1.2 grid_3.4.1 ## [29] glue_1.1.1 R6_2.2.2 readxl_1.0.0 foreign_0.8-69 ## [33] rmarkdown_1.6 modelr_0.1.1 reshape2_1.4.2 magrittr_1.5 ## [37] backports_1.1.0 scales_0.5.0 htmltools_0.3.6 rvest_0.3.2 ## [41] assertthat_0.2.0 mnormt_1.5-5 colorspace_1.3-2 labeling_0.3 ## [45] stringi_1.1.5 lazyeval_0.2.0 munsell_0.4.3 broom_0.4.2 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>tidyverse</tag>
        <tag>map</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建及自定义ggplot分面图形参数]]></title>
    <url>%2F2017%2F09%2F14%2F%E5%88%9B%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89ggplot%E5%88%86%E9%9D%A2%E5%9B%BE%E5%BD%A2%E5%8F%82%E6%95%B0%2F</url>
    <content type="text"><![CDATA[简介ggplot2有一个十分重要的功能就是分面，而今天要讲得R包ggpubr中也有一个函数facet()专门用来进行分面操作。 安装1234install.packages("ggpubr")#orif(!require(devtools)) install.packages("devtools")devtools::install_github("kassambara/ggpubr") 绘图1234library(ggpubr)df &lt;- ToothGrowthdf$dose &lt;- as.factor(df$dose)head(df) 1234567## len supp dose## 1 4.2 VC 0.5## 2 11.5 VC 0.5## 3 7.3 VC 0.5## 4 5.8 VC 0.5## 5 6.4 VC 0.5## 6 10.0 VC 0.5 12p &lt;- ggdensity(df, x="len", fill = "dose", palette = "jco", ggtheme = theme_light(), legend="top")p 分面水平方向分面按照变量supp进行水平方向的分面1facet(p, facet.by = &quot;supp&quot;) 竖直方向分面按照变量supp进行竖直方向的分面1facet(p, facet.by = &quot;supp&quot;, ncol = 1) 双变量分面12#divide with &quot;supp&quot; vertical, &quot;dose&quot; horizontalfacet(p, facet.by = c(&quot;supp&quot;, &quot;dose&quot;), short.panel.labs = FALSE) 修改面板外观主要有以下参数进行修改： short.panel.label:默认为TRUE，此时变量名不会显示 panel.label: 通过自定义label来设置面板label,是一个list panel.labs.background: 控制面板背景，里面参数设置很多 panel.labs.font: 设置字体 下面演示一下 1234567891011#divide with &quot;supp&quot; vertical, &quot;sode&quot; horizontalfacet(p, facet.by = c(&quot;supp&quot;, &quot;dose&quot;), panel.labs = list( supp=c(&quot;Orange Juice&quot;, &quot;Vitamin C&quot;), dose=c(&quot;D0.5&quot;, &quot;D1&quot;, &quot;D2&quot;)), panel.labs.background = list( color=&quot;steelblue&quot;, fill=&quot;steelblue&quot;, size=0.5), panel.labs.font = list(color=&quot;white&quot;), panel.labs.font.x = list(angle=45, color=&quot;white&quot;)) SessionInfo123456789101112131415161718192021222324252627282930313233sessionInfo()## R version 3.4.1 (2017-06-30)## Platform: x86_64-pc-linux-gnu (64-bit)## Running under: Ubuntu 16.04.3 LTS## ## Matrix products: default## BLAS: /usr/lib/atlas-base/atlas/libblas.so.3.0## LAPACK: /usr/lib/atlas-base/atlas/liblapack.so.3.0## ## locale:## [1] LC_CTYPE=zh_CN.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=zh_CN.UTF-8 LC_COLLATE=zh_CN.UTF-8 ## [5] LC_MONETARY=zh_CN.UTF-8 LC_MESSAGES=zh_CN.UTF-8 ## [7] LC_PAPER=zh_CN.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] ggpubr_0.1.5 magrittr_1.5 ggplot2_2.2.1## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.12 bindr_0.1 knitr_1.17 munsell_0.4.3 ## [5] colorspace_1.3-2 R6_2.2.2 rlang_0.1.2 stringr_1.2.0 ## [9] plyr_1.8.4 dplyr_0.7.3 tools_3.4.1 grid_3.4.1 ## [13] gtable_0.2.0 htmltools_0.3.6 yaml_2.1.14 lazyeval_0.2.0 ## [17] rprojroot_1.2 digest_0.6.12 assertthat_0.2.0 tibble_1.3.4 ## [21] bindrcpp_0.2 ggsci_2.7 reshape2_1.4.2 purrr_0.2.3 ## [25] glue_1.1.1 evaluate_0.10.1 rmarkdown_1.6 labeling_0.3 ## [29] stringi_1.1.5 compiler_3.4.1 scales_0.5.0 backports_1.1.0 ## [33] pkgconfig_2.0.1 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggpubr</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ggpubr包学习笔记之轻松修改图形参数]]></title>
    <url>%2F2017%2F09%2F13%2Fggpubr%E5%8C%85%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%BD%BB%E6%9D%BE%E4%BF%AE%E6%94%B9%E5%9B%BE%E5%BD%A2%E5%8F%82%E6%95%B0%2F</url>
    <content type="text"><![CDATA[简介越学习包ggpubr越感觉其功能强大，本文主要讲解一下如何修改图形参数，我们知道ggplot2有着十分强大的绘图功能，但是其参数之复杂足以让人望而却步。ggpubr提供的函数ggpar()可以十分轻松地让我们修改图形参数，并且可以无缝对接到ggplot图形中。ggpar()可以修改以下图形参数： 图形标题，包括坐标轴标题以及图例标题 图例的位置以及外观 颜色必需的能修改 坐标轴limits 坐标转换 坐标刻度 主题 翻转等 安装包1234#two ways to isntall the ggpubr packageinstall.packages("ggpubr")#install the packages from the Githubdevtools::install_github("kassambara/ggpubr") 绘图1234library(ggpubr)#load ggpubr#basic plotsp &lt;- ggboxplot(ToothGrowth, x=&quot;dose&quot;, y=&quot;len&quot;, color=&quot;dose&quot;)p 12#add grids by the function grids()p+grids(linetype="dashed") 12#add panel borders lines by the function border()p+border("black") 12#change background colorp+bgcolor("#BFD5E3")+border("#BFD5E3") 修改标题以及坐标轴标签12345678p2 &lt;- ggpar(p, title = &quot;Box plot created with ggpubr&quot;, subtitle = &quot;Length by dose&quot;, caption = &quot;Source: ggpubr&quot;, xlab = &quot;Dose (mg)&quot;, ylab = &quot;Teeth length&quot;, legend.title = &quot;Dose (mg)&quot;)p2 修改标题以及标签的字体123456ggpar(p2, font.title = c(14, &quot;bold.italic&quot;, &quot;red&quot;), font.subtitle = c(10, &quot;orange&quot;), font.caption = c(10, &quot;orange&quot;), font.x = c(14, &quot;blue&quot;), font.y = c(14, &quot;#993333&quot;)) 当然也可以直接用函数font()123456p2+ font(&quot;title&quot;, size = 14, color = &quot;red&quot;, face = &quot;bold.italic&quot;)+ font(&quot;subtitle&quot;, size = 10, color = &quot;orange&quot;)+ font(&quot;caption&quot;, size = 10, color = &quot;orange&quot;)+ font(&quot;xlab&quot;, size = 12, color = &quot;blue&quot;)+ font(&quot;ylab&quot;, size = 12, color = &quot;#993333&quot;) 从上面可以看出我们可以一次性完成添加标题以及修改字体1234567ggpar(p, title = &quot;Plot of length \n by dose&quot;, xlab = &quot;Dose (mg)&quot;, legend.title = &quot;Dose (mg)&quot;, font.title = c(14, &quot;bold.italic&quot;, &quot;red&quot;), font.x = c(14, &quot;bold&quot;, &quot;#2E9FDF&quot;), font.y = c(14, &quot;bold&quot;, &quot;#E7B800&quot;)) 修改图例位置与外观1234ggpar(p, legend = &quot;right&quot;, legend.title = &quot;Dose (mg)&quot;)+ font(&quot;legend.title&quot;, color=&quot;blue&quot;, face = &quot;bold&quot;)+ font(&quot;legend.text&quot;, color = &quot;red&quot;) 颜色修改ggpar()中有一个参数palette，即调色板，除了可以我们自定义颜色外，还可以调用RColorBrewer中的调色板以及包ggsci中的专门用于学术杂志的配色。12#use custom color paletteggpar(p, palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;)) 12#use the RColorBrewer paletteggpar(p, palette = "Dark2") 1ggpar(p, palette = "grey") 12#use the ggsci paletteggpar(p, palette = "npg")#nature 当然也可以直接用ggpubr中的函数color_palette()以及fill_palette()12#jco color palettep+color_palette(&quot;jco&quot;) 12#custom colorp+color_palette(c("#00AFBB", "#E7B800", "#FC4E07")) 颜色梯度ggpubr提供了两个函数用来处理颜色梯度：gradient_color()和gradient_fill()通过一个例子来看如何运作12345#first create a scatter plotp3 &lt;- ggscatter(mtcars, x=&quot;wt&quot;, y=&quot;mpg&quot;, color=&quot;mpg&quot;, size = 2)#change the gradient color#use one custom colorp3+gradient_color(&quot;red&quot;) 12#use two colorsp3+gradient_color(c("blue", "red")) 12#three colorsp3+gradient_color(c("blue", "white", "red")) 12#use the RColorBrewer palettep3+gradient_color("RdYlBu") gradient_fill()用法也一样，不过是填充，这里就不演示了。 修改坐标轴limits、scales12#change y axis limitsggpar(p, ylim = c(0, 50)) 12#change y axis cale to log2ggpar(p, yscale = "log2") 12#format axis scaleggpar(p, yscale = "log2", format.scale = TRUE)#format.scale=TRUE说明y轴刻度也会scale 12#也可以直接用yscale()p+yscale("log2", .format = TRUE) 自定义坐标轴标签及刻度123456#change the font of x and y axis texts#rotate x and y textsp+ font(&quot;xy.text&quot;, size = 12, color = &quot;blue&quot;, face = &quot;bold&quot;)+ rotate_x_text(45)+ rotate_y_text(45) 123#remove ticks and axis textsp+rremove("ticks")+ rremove("axis.text") 修改主题默认主题为theme_pubr(),可以调用包ggthemes里面的主题12library(ggthemes)p+ggthemes::theme_economist() 移除ggplot组件通过ggpubr::rremove()可以移除组件：12p &lt;- ggboxplot(ToothGrowth, x=&quot;dose&quot;, y=&quot;len&quot;, ggtheme = theme_igray())p 1p+rremove("grid") SessionInfo1sessionInfo() 12345678910111213141516171819202122232425262728293031323334## R version 3.4.1 (2017-06-30)## Platform: x86_64-pc-linux-gnu (64-bit)## Running under: Ubuntu 16.04.3 LTS## ## Matrix products: default## BLAS: /usr/lib/atlas-base/atlas/libblas.so.3.0## LAPACK: /usr/lib/atlas-base/atlas/liblapack.so.3.0## ## locale:## [1] LC_CTYPE=zh_CN.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=zh_CN.UTF-8 LC_COLLATE=zh_CN.UTF-8 ## [5] LC_MONETARY=zh_CN.UTF-8 LC_MESSAGES=zh_CN.UTF-8 ## [7] LC_PAPER=zh_CN.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] ggthemes_3.4.0 ggpubr_0.1.5 magrittr_1.5 ggplot2_2.2.1 ## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.12 bindr_0.1 knitr_1.17 ## [4] munsell_0.4.3 colorspace_1.3-2 R6_2.2.2 ## [7] rlang_0.1.2 stringr_1.2.0 plyr_1.8.4 ## [10] dplyr_0.7.3 tools_3.4.1 grid_3.4.1 ## [13] gtable_0.2.0 htmltools_0.3.6 yaml_2.1.14 ## [16] lazyeval_0.2.0 rprojroot_1.2 digest_0.6.12 ## [19] assertthat_0.2.0 tibble_1.3.4 bindrcpp_0.2 ## [22] ggsci_2.7 RColorBrewer_1.1-2 purrr_0.2.3 ## [25] glue_1.1.1 evaluate_0.10.1 rmarkdown_1.6 ## [28] labeling_0.3 stringi_1.1.5 compiler_3.4.1 ## [31] scales_0.5.0 backports_1.1.0 pkgconfig_2.0.1 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>visualization</tag>
        <tag>ggpubr</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一篇关于国旗与奥运会奖牌的可视化笔记]]></title>
    <url>%2F2017%2F09%2F12%2F%E4%B8%80%E7%AF%87%E5%85%B3%E4%BA%8E%E5%9B%BD%E6%97%97%E4%B8%8E%E5%A5%A5%E8%BF%90%E4%BC%9A%E5%A5%96%E7%89%8C%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[简介 本文主要介绍一个R包ggflags，可以用于绘制国旗。安装的话从Github上利用包devtools安装。 1devtools::install_github("baptiste/ggflags") 下面看个小例子来介绍一下 数据集 1234567891011121314library(ggflags)#load packageset.seed(1111)#create the datasetdata &lt;- data.frame(x=rnorm(50), y=rnorm(50), country=sample(c("ar", "us", "cn", "fr", "gb", "es"), 50 ,replace = TRUE), stringsAsFactors=FALSE)head(data) x y country-0.0865801 -0.7055274 gb1.3225244 -0.5910791 fr0.6397020 -0.2796410 us1.1747866 -1.3209782 cn0.1162903 0.5851085 gb-2.9308464 0.0198323 ar 绘图 12345library(ggplot2)ggplot(data, aes(x=x, y=y, country=country, size=x))+ geom_flag()+ scale_country()+ scale_size(range = c(0, 10)) 国旗的图片是来自于EmojiOne数据集,有兴趣的可以去看看了解一下。题目有奥运会奖牌，所以接下来就可视化一下索契冬奥运会各国奖牌，本次用国旗与国家联系起来。 爬取数据 12345678library(dplyr)library(rvest)url &lt;- "http://www.nbcolympics.com/medals"medals &lt;- read_html(url)%&gt;% html_nodes("table")%&gt;% .[[1]]%&gt;% html_table()knitr::kable(head(medals)) 1234567Country Gold Silver Bronze TotalRussia 13 11 9 33United States 9 7 12 28Norway 11 5 10 26Canada 10 10 5 25Netherlands 8 7 9 24Germany 8 6 5 19 爬取完数据之后进行清洗 数据清洗 本文重要的一环是将国家与国旗联系起来，因此首先要将国家名缩写弄出来，这就要用到countrycode这个包了。 12#install the packageinstall.packages("countrycode") 数据清洗123456789library(countrycode)library(tidyr)medals &lt;- medals%&gt;% mutate(code=countrycode(Country, &quot;country.name&quot;, &quot;iso2c&quot;))%&gt;% mutate(code=tolower(code))%&gt;% gather(medal_color, count, Gold, Silver, Bronze)%&gt;% mutate(medal_color=factor(medal_color, levels = c(&quot;Gold&quot;, &quot;Silver&quot;, &quot;Bronze&quot;)))%&gt;% drop_na(Country, code)knitr::kable(head(medals)) 1234567Country Total code medal_color countRussia 33 ru Gold 13United States 28 us Gold 9Norway 26 no Gold 11Canada 25 ca Gold 10Netherlands 24 nl Gold 8Germany 19 de Gold 8 绘图 由于国家数量太多，并且好多国家奖牌数基本为零，因此我们筛选一下：只绘制总奖牌数不小于5的国家。 123456789101112131415161718medals%&gt;%filter(Total&gt;=5)%&gt;% ggplot(aes(x=reorder(Country, Total), y=count))+ geom_bar(stat = &quot;identity&quot;, aes(fill=medal_color))+ geom_flag(aes(y=-2,country=code), size=10)+ theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 7, vjust = 0.5))+ scale_fill_manual(values = c( &quot;Gold&quot;=&quot;gold&quot;, &quot;Bronze&quot; = &quot;#cd7f32&quot;, &quot;Silver&quot; = &quot;#C0C0C0&quot; ))+ scale_y_continuous(expand = c(0.1, 1))+ xlab(&quot;Country&quot;)+ ylab(&quot;Number of medals&quot;)+ theme_bw()+ theme(panel.grid = element_blank())+ theme(legend.justification = c(1, 0), legend.position = c(1, 0))+ theme(legend.title = element_blank())+ coord_flip() SessionInfo 12345678910111213141516171819202122232425262728293031323334sessionInfo()## R version 3.4.1 (2017-06-30)## Platform: x86_64-pc-linux-gnu (64-bit)## Running under: Ubuntu 16.04.3 LTS## ## Matrix products: default## BLAS: /usr/lib/atlas-base/atlas/libblas.so.3.0## LAPACK: /usr/lib/atlas-base/atlas/liblapack.so.3.0## ## locale:## [1] LC_CTYPE=zh_CN.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=zh_CN.UTF-8 LC_COLLATE=zh_CN.UTF-8 ## [5] LC_MONETARY=zh_CN.UTF-8 LC_MESSAGES=zh_CN.UTF-8 ## [7] LC_PAPER=zh_CN.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] bindrcpp_0.2 tidyr_0.7.1 countrycode_0.19 rvest_0.3.2 ## [5] xml2_1.1.1 dplyr_0.7.3 ggflags_0.0.1 ggplot2_2.2.1 ## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.12 compiler_3.4.1 plyr_1.8.4 highr_0.6 ## [5] bindr_0.1 tools_3.4.1 digest_0.6.12 evaluate_0.10.1 ## [9] tibble_1.3.4 gtable_0.2.0 pkgconfig_2.0.1 rlang_0.1.2 ## [13] curl_2.8.1 yaml_2.1.14 stringr_1.2.0 httr_1.3.1 ## [17] knitr_1.17 tidyselect_0.2.0 rprojroot_1.2 grid_3.4.1 ## [21] glue_1.1.1 R6_2.2.2 XML_3.98-1.9 rmarkdown_1.6 ## [25] purrr_0.2.3 selectr_0.3-1 magrittr_1.5 backports_1.1.0 ## [29] scales_0.5.0 htmltools_0.3.6 assertthat_0.2.0 colorspace_1.3-2## [33] labeling_0.3 stringi_1.1.5 lazyeval_0.2.0 munsell_0.4.3 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>ggflags</tag>
        <tag>爬虫rvest</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用tximport进行RNA-seq分析]]></title>
    <url>%2F2017%2F09%2F08%2F%E5%88%A9%E7%94%A8tximport%E8%BF%9B%E8%A1%8CRNA-seq%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[简介 RNA-seq后续分析可以利用R包edgeR、DESeq2以及limma-voom等，而tximport包则可以将RNA-seq上游定量分析软件产生的结果导入到R语言中，进而方便后续的分析。具体的情况可以参考这篇文献： Charlotte Soneson, Michael I. Love, Mark D. Robinson (2015): Differential analyses for RNA-seq: transcript-level estimates improve gene-level inferences. F1000Research http://sci-hub.cc/10.12688/f1000research.7563.1 tximport具有以下优点： 对于样本之间因基因长度不同导致的差异具有纠正功能 一些上游分析软件(Salmon, Sailfish, kallisto)等的结果可以完美对接到R语言中，这些软件运行速度更快更稳定，且占用更少的内存 更高的灵敏度，因为它可以避免那些比对到多基因的片段的丢失 导入转录组数据 下面我们将使用包tximportData中的数据进行演示，tximport可以处理多种类型的上游定量结果，只需要在参数type中设定就行。 先安装包123source("https://bioconductor.org/biocLite.R")options(BioC_mirror="http://mirrors.ustc.edu.cn/bioc/")#设置中科大镜像biocLite("tximportData") 123library(tximportData)dir &lt;- system.file("extdata", package = "tximportData")#set directorylist.files(dir) 1234## [1] "cufflinks" "kallisto" "kallisto_boot" ## [4] "rsem" "sailfish" "salmon" ## [7] "salmon_gibbs" "samples.txt" "samples_extended.txt"## [10] "tx2gene.csv" 可以看到dir中存在这些文件，接下来我们其中的samples.txt读进来123456789samples &lt;- read.table(file.path(dir, "samples.txt"), header = TRUE)samples## pop center assay sample experiment run## 1 TSI UNIGE NA20503.1.M_111124_5 ERS185497 ERX163094 ERR188297## 2 TSI UNIGE NA20504.1.M_111124_7 ERS185242 ERX162972 ERR188088## 3 TSI UNIGE NA20505.1.M_111124_6 ERS185048 ERX163009 ERR188329## 4 TSI UNIGE NA20507.1.M_111124_7 ERS185412 ERX163158 ERR188288## 5 TSI UNIGE NA20508.1.M_111124_2 ERS185362 ERX163159 ERR188021## 6 TSI UNIGE NA20514.1.M_111124_4 ERS185217 ERX163062 ERR188356 再将salmon与samples以及quant.sf一起创建每个样本的文件地址1234files &lt;- file.path(dir, "salmon", samples$run, "quant.sf")names(files) &lt;- paste0("sample", 1:6)all(file.exists(files))## [1] TRUE 结果显示TRUE说明运行成功，可以进行下一步，要进行基因表达差异分析，首先要将转录本与基因名关联起来，这就需要我们创建一个两列的名为tx2gene的数据框，最简单的就是通过TxDb创建,再通过AnnotationDbi包里的函数select()进行选取123456789101112131415library(TxDb.Hsapiens.UCSC.hg19.knownGene)txdb &lt;- TxDb.Hsapiens.UCSC.hg19.knownGenek &lt;- keys(txdb, keytype = "GENEID")df &lt;- select(txdb, keys = k, keytype = "GENEID", columns = "TXNAME")tx2gene &lt;- df[, 2:1]#tx ID在前，gene ID在后#这里我们演示就使用现有的tx2genetx2gene &lt;- read.csv(file.path(dir, "tx2gene.csv"))head(tx2gene)## TXNAME GENEID## 1 NM_130786 A1BG## 2 NR_015380 A1BG-AS1## 3 NM_001198818 A1CF## 4 NM_001198819 A1CF## 5 NM_001198820 A1CF## 6 NM_014576 A1CF 最后就是将转录组水平的数据导入就行了1234567891011121314library(tximport)library(readr)txi &lt;- tximport(files, type = "salmon", tx2gene = tx2gene)names(txi)## [1] "abundance" "counts" "length" ## [4] "countsFromAbundance"head(txi$counts)## sample1 sample2 sample3 sample4 sample5 sample6## A1BG 109.232000 316.22400 110.638000 116.00000 86.38430 76.91630## A1BG-AS1 83.969700 138.44900 119.274000 151.08300 123.98500 103.25100## A1CF 9.030691 10.01847 5.019242 13.01820 25.21914 25.07356## A2M 24.000000 2.00000 21.000000 6.00000 38.00000 8.00000## A2M-AS1 1.000000 1.00000 1.000000 1.00000 0.00000 0.00000## A2ML1 3.047950 1.02987 4.076160 1.04945 3.07761 5.12409 差异分析 下游分析主要使用Bioconductor包进行1234567library(edgeR)cts &lt;- txi$countsnormMat &lt;- txi$lengthnormMat &lt;- normMat/exp(rowMeans(log(normMat)))o &lt;- log(calcNormFactors(cts/normMat))+log(colSums(cts/normMat))y &lt;- DGEList(cts)y$offset &lt;- t(t(log(normMat))+o) 接下来的y就可以用来后续的分析 SessionInfo 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758sessionInfo()## R version 3.4.1 (2017-06-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 15063)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats4 parallel stats graphics grDevices utils datasets ## [8] methods base ## ## other attached packages:## [1] edgeR_3.18.1 ## [2] limma_3.32.5 ## [3] readr_1.1.1 ## [4] tximport_1.4.0 ## [5] TxDb.Hsapiens.UCSC.hg19.knownGene_3.2.2## [6] GenomicFeatures_1.28.4 ## [7] AnnotationDbi_1.38.2 ## [8] Biobase_2.36.2 ## [9] GenomicRanges_1.28.4 ## [10] GenomeInfoDb_1.12.2 ## [11] IRanges_2.10.3 ## [12] S4Vectors_0.14.3 ## [13] BiocGenerics_0.22.0 ## [14] tximportData_1.4.0 ## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.12 compiler_3.4.1 ## [3] XVector_0.16.0 bitops_1.0-6 ## [5] tools_3.4.1 zlibbioc_1.22.0 ## [7] biomaRt_2.32.1 digest_0.6.12 ## [9] bit_1.1-12 lattice_0.20-35 ## [11] evaluate_0.10.1 RSQLite_2.0 ## [13] memoise_1.1.0 tibble_1.3.4 ## [15] pkgconfig_2.0.1 rlang_0.1.2 ## [17] Matrix_1.2-11 DelayedArray_0.3.12 ## [19] DBI_0.7 yaml_2.1.14 ## [21] GenomeInfoDbData_0.99.0 rtracklayer_1.36.4 ## [23] stringr_1.2.0 knitr_1.17 ## [25] hms_0.3 Biostrings_2.44.2 ## [27] locfit_1.5-9.1 grid_3.4.1 ## [29] rprojroot_1.2 bit64_0.9-7 ## [31] R6_2.2.2 XML_3.98-1.9 ## [33] BiocParallel_1.10.1 rmarkdown_1.6 ## [35] blob_1.1.0 magrittr_1.5 ## [37] matrixStats_0.52.2 GenomicAlignments_1.12.2 ## [39] backports_1.1.0 Rsamtools_1.28.0 ## [41] htmltools_0.3.6 SummarizedExperiment_1.6.3## [43] stringi_1.1.5 RCurl_1.95-4.8 ## [45] rjson_0.2.15 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>RNA-seq</category>
      </categories>
      <tags>
        <tag>RNA-seq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[A brief introduction of salmon]]></title>
    <url>%2F2017%2F09%2F06%2FA-brief-introduction-of-salmon%2F</url>
    <content type="text"><![CDATA[简介 Salmon是一款定量分析RNA-seq的软件，号称Fast、accurate、bias-aware and Don’t count…quantify定量分析转录本。本文主要简要的介绍一下Salmon。具体的情况可移步Salmon官网 安装 可以去Github里下载Salmon进行安装123$ mkdir Salmon &amp;&amp; cd Salmon$ wget https://github.com/COMBINE-lab/salmon/releases/download/v0.8.2/Salmon-0.8.2_linux_x86_64.tar.gz$ tar zxvf Salmon-0.8.2_linux_x86_64.tar.gz 至于路径则根据自己电脑进行配置，这里不讲，安装成功的话则可以用salmon -h查看帮助文件。应该可以看到如下输出： 12345678910111213$ salmon -hSalmon v0.8.1Usage: salmon -h|--help or salmon -v|--version or salmon -c|--cite or salmon [--no-version-check] &lt;COMMAND&gt; [-h | options]Commands: cite Show salmon citation information index Create a salmon index quant Quantify a sample swim Perform super-secret operation 也可以利用conda安装，这样就可以省去很多麻烦。1$ conda install salmon 获取转录组 Salmon是直接将原始序列map到转录组上而不是全基因组上(这是很重要的一点，千万不要搞混了，这也是作者一直在强调的)，这里我们就以拟南芥为例下载其转录组。 123#Creat a directory $ mkdir RNA-seq_test cd RNA-seq_test$ wget ftp://ftp.ensemblgenomes.org/pub/plants/release-28/fasta/arabidopsis_thaliana/cdna/Arabidopsis_thaliana.TAIR10.28.cdna.all.fa.gz -o athal.fa.gz 好了，现在转录组已下载好，接下来就是建立索引了 建立索引 利用Salmon建立索引十分简单，一行命令就搞定12$ salmon index -t athal.fa.gz -i athal_index``` 这里解释一下几个参数： -t: 表示需要用到的转录组，这里是拟南芥的，我们刚下载好的athal.fa.gz -i: 表示我们建立的索引的名称，它是一个文件夹 更多的参数设置可以参考说明 获取序列数据 一次试验数据往往很多，我们可以写一个脚本进行下载，这里简单示例一下：123456789101112#!/bin/bashmkdir datacd datafor i in 'seq 25 40';do madir DRR0161$&#123;i&#125;; cd DRR0161$&#123;i&#125;; wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/DRR016/DRR0161$&#123;i&#125;/DRR0161$&#123;i&#125;_1.fastq.gz; wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/DRR016/DRR0161$&#123;i&#125;/DRR0161$&#123;i&#125;_2.fastq.gz; cd ..; donecd .. 将其保存为obtain_reads.sh,将其运行只需以下命令就行：1$ bash obtain_reads.sh 定量样本 这次也写一个简单脚本进行定量12345678910#!/bin/bashfor fn in data/DRR0161&#123;25..40&#125;;dosamp=`basename $&#123;fn&#125;`echo "Processing sample $&#123;samp&#125;"salmon quant -i athal_index -l A \ -1 $&#123;fn&#125;/$&#123;samp&#125;_1.fastq.gz \ -2 $&#123;fn&#125;/$&#123;samp&#125;_2.fastq.gz \ -p 8 -o quants/$&#123;samp&#125;_quantdone 这里简单说明一下几个参数： -i: 用来告诉salmon哪里寻找索引index -l A: 告诉salmon自行决定是何种类型的序列数据 -1，-2：就是两端测序的两个序列了 -p 8: 8线程 -o: 输出文件，这里是所有输出文件都保存至quants，并且文件命名为sample_quant 更多参数选择及说明可以参考说明文件这里每个样品文件里都含有一个主文件quant.sf。在后续的差异分析中有重要作用，后续再讲。定量之后接下来就是进行具体分析了，一般来说都在R里面进行，R&amp;Bioconductor有大量的包进行下游的分析，比如DESeq2、edgeR、limma以及sleuth等，后续文章我会讲解如何通过 tximport将定量化的转录组数据导入到R语言中进行差异分析。 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>RNA-seq</category>
      </categories>
      <tags>
        <tag>RNA-seq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图像处理R包magick学习笔记]]></title>
    <url>%2F2017%2F09%2F03%2F%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86R%E5%8C%85magick%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[简介 本文主要简单介绍一下magick包，主要用于图像处理 12#安装的话就直接从CRAN安装进行install.packages("magick") 1234#Load the packagelibrary(magick)#查看支持哪些格式str(magick_config()) 1234567891011121314151617181920212223## List of 21## $ version :Class 'numeric_version' hidden list of 1## ..$ : int [1:4] 6 9 9 9## $ modules : logi FALSE## $ cairo : logi TRUE## $ fontconfig : logi FALSE## $ freetype : logi TRUE## $ fftw : logi TRUE## $ ghostscript : logi TRUE## $ jpeg : logi TRUE## $ lcms : logi TRUE## $ libopenjp2 : logi FALSE## $ lzma : logi TRUE## $ pangocairo : logi TRUE## $ pango : logi TRUE## $ png : logi TRUE## $ rsvg : logi TRUE## $ tiff : logi TRUE## $ webp : logi TRUE## $ wmf : logi FALSE## $ x11 : logi FALSE## $ xml : logi TRUE## $ zero-configuration: logi FALSE 可以看出大部分格式都是支持的 读取图像 读取的话可以直接从本地读取，也可以读取URL格式的图片，主要通过image_read()来读取，image_info()则可以显示图像的一些属性数据。123#读取网上随便选的图片night_king &lt;- image_read(&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/170903/ha6Cchfk38.jpg?imageslim&quot;)image_info(night_king) 12## format width height colorspace filesize## 1 JPEG 189 267 sRGB 6449 12#通过image_write()可以讲图片以任何格式输出，比如将刚读取的图片以png格式输出。image_write(night_king, path = "night_king.png", format = "png") 转换格式 通过image_convert()可以将图片转换为我们需要的格式，比如这里我们可以将night_king的格式转换为png格式12night_king.png &lt;- image_convert(night_king, &quot;png&quot;)image_info(night_king.png) 12## format width height colorspace filesize## 1 PNG 189 267 sRGB 0 可以看到这里的filesize为0，直到被渲染（这里涉及到ImageMagick方面，我不是很懂）。 预览 在RStudio中可以查看我们读取的图片 转换(transformations)magick提供一系列函数对图片进行裁剪以及编辑，主要有以下函数： image_crop(image, “100x150+50”):裁剪 image_scale(image, “200”):按宽比例进行放大缩小 image_scale(image, “x200”):按高比例进行放大缩小 image_fill(image, “blue”, “+100+200”):对特定部位着色 image_border(image, “red”, “20x10”):添加边框 下面我们来试试这些函数123#Example imagewolf &lt;- image_read(&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/170903/4h96Df21AI.png?imageslim&quot;)print(wolf) 12#Add 20px left/right and 10px top/bottomimage_border(image_background(wolf, &quot;hotpink&quot;), &quot;#000080&quot;, &quot;20x10&quot;) 12#trim marginsimage_trim(wolf) 12#裁剪image_crop(wolf, &quot;500x300+50&quot;) 12#Resizeimage_scale(wolf, &quot;300&quot;)#width:300px 12#Resizeimage_scale(wolf, &quot;x300&quot;)#heigth:300px 12#Rotate or mirrorimage_rotate(wolf, 45) 12#Flipimage_flip(wolf) 12#Flopimage_flop(wolf) 12#Paint image_fill(wolf, &quot;red&quot;, point = &quot;+190+100&quot;, fuzz = 4000) 这个函数最难掌握，我本来是想将wolf的眼睛渲染成红色，但是不断调整point以及fuzz都没弄成，感兴趣的可以自己捣鼓捣鼓。 12#Add randomnessimage_blur(wolf, 10, 5) 可以通过调整参数来设置模糊度 1image_noise(wolf) 12#Silly filtersimage_charcoal(wolf) 1image_oilpaint(wolf) 1image_negate(wolf) 文字注释 12#Add some text on the imageimage_annotate(wolf, &quot;I am the King of wolf&quot;, size=25, gravity = &quot;southeast&quot;, color=&quot;gold&quot;) 自定义text12#customize the textimage_annotate(wolf, &quot;I am the King&quot;, size=30, color=&quot;red&quot;, boxcolor = &quot;pink&quot;, degrees = 45, location = &quot;+30+30&quot;) 设置字体12#Set the font times-new-romanimage_annotate(wolf, &quot;I am the King&quot;, size=30, color=&quot;red&quot;, boxcolor = &quot;pink&quot;, degrees = 45, location = &quot;+30+30&quot;, font = &apos;times-new-roman&apos;) 管道操作 你没看错，magick支持管道操作，下面试试 123456library(magrittr)wolf%&gt;% image_rotate(270)%&gt;% image_background(&quot;white&quot;, flatten = TRUE)%&gt;% image_border(&quot;red&quot;, &quot;10x10&quot;)%&gt;% image_annotate(&quot;I am the King&quot;, color=&apos;red&apos;, size = 25, location = &quot;+100+300&quot;) 图片向量 magick除了支持管道操作外，还支持图层叠加、拼图以及动图处理，来个经典的动态地球123earth &lt;- image_read(&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/170903/a9CjAEGiC5.gif&quot;)length(earth)print(earth) 123rev(earth) %&gt;% image_flip() %&gt;% image_annotate(&quot;This is the Earth&quot;, size = 20, color = &quot;white&quot;) 不知什么鬼，图片竟然显示出来乱的，电脑渣的话还是别搞动画 图层 123456bigdata &lt;- image_read(&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/170903/JclK3efbB3.jpg?imageslim&quot;)logo &lt;- image_read(&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/170903/JdjdB88CLm.png?imageslim&quot;)frink &lt;- image_read(&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/170903/E5fbmb1FIb.png?imageslim&quot;)img &lt;- c(bigdata, logo, frink)img &lt;- image_scale(img, &quot;300x300&quot;)image_mosaic(img) 动画 1image_animate(image_scale(img, &quot;200x200&quot;), fps = 1, dispose = &quot;previous&quot;)#fps控制放映速度 静图+动图 静图就用我以前绘制过的，具体可看博客123456789101112image1 &lt;- image_read(&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/170903/kLeL888DbI.png?imageslim&quot;)dance_man &lt;- image_read(&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/170903/86iEDe36lf.gif&quot;)dance_man &lt;- image_scale(dance_man, &quot;200&quot;)#Background imagebackground &lt;- image_background(image_scale(image1, &quot;800&quot;), &quot;white&quot;, flatten = TRUE)#Combine and flatten framesframes &lt;- image_apply(dance_man, function(frame)&#123; image_composite(background, frame, offset = &quot;+500+270&quot;)&#125;)#Turn frames into animationanimation &lt;- image_animate(frames, fps = 10)print(animation) 还有一些有趣的功能这里我就不讲了，有兴趣的可以试试，还是很好玩的。 SessionInfo 1234567891011121314151617181920212223242526sessionInfo()## R version 3.4.1 (2017-06-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 15063)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] magrittr_1.5 magick_1.2 ## ## loaded via a namespace (and not attached):## [1] compiler_3.4.1 backports_1.1.0 rprojroot_1.2 tools_3.4.1 ## [5] htmltools_0.3.6 curl_2.8.1 yaml_2.1.14 Rcpp_0.12.12 ## [9] stringi_1.1.5 rmarkdown_1.6 knitr_1.17 stringr_1.2.0 ## [13] digest_0.6.12 evaluate_0.10.1 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>magick</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化学习笔记之基因组数据可视化]]></title>
    <url>%2F2017%2F08%2F25%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E5%9B%A0%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%2F</url>
    <content type="text"><![CDATA[本文主要利用ggpubr包来探索基因组数据,主要是可视化TCGA基因组数据的基因表达谱。1library(ggpubr)#加载包 TCGA是一个包含大量癌症数据的数据库，由Marcin Kosinski创建的RTCGA包可以让我们很方便的获取这些数据。主要有三个包：RTCGA、RTCGA.clininal、RTCGA.mRNA。安装方法如下：1234567#Load the bioconductor installersource("http://bioconductor.org/biocLite.R"")#设置镜像，这里我们选择中科大的镜像options(BioC_mirror="http://ustc.edu.cn/bioc")#下载包biocLite("RTCGA")biocLite("RTCGA.clininal")biocLite("RTCGA.mRNA") 123library(RTCGA)#查看每一种癌症的数据集infoTCGA() RTCGA包里的函数expressionTCGA()可以十分方便地从不同数据集中提取基因的表达值，下面我们将从三个数据集BRCA(乳腺癌)、OV(卵巢癌)、LUSC(肺癌)中提取五个基因的表达值。12345library(RTCGA)library(RTCGA.mRNA)expr &lt;- expressionsTCGA(BRCA.mRNA, OV.mRNA, LUSC.mRNA, extract.cols = c("GATA3", "PTEN", "XBP1", "ESR1", "MUC1"))expr 查看每个数据集中的样品数量12345nb_samples &lt;- table(expr$dataset)nb_samples## ## BRCA.mRNA LUSC.mRNA OV.mRNA ## 590 154 561 为了方便，我们将部分数据集名称简化123expr$dataset &lt;- gsub(pattern = ".mRNA", replacement = "", expr$dataset)expr$bcr_patient_barcode &lt;- paste0(expr$dataset, c(1:590, 1:561, 1:154))expr 接下来绘制图形：1、箱线图123library(ggpubr)ggboxplot(expr, x="dataset", y="GATA3", title="GATA3", ylab = "Expression", color = "dataset", palette = "jco") 我们可以一次性绘制多个基因，然后一一查看，而不用每次写代码：123456#Creat a list of plotsp &lt;- ggboxplot(expr, x="dataset", y=c("GATA3", "PTEN", "XBP1", "ESR1", "MUC1"),title = c("GATA3", "PTEN", "XBP1", "ESR1", "MUC1"), ylab = "EXpression", color = "dataset", palette = "jco")#接下来一一查看每个plotp$GATA3 1p$PTEN 1p$XBP1 1p$ESR1 1p$MUC1 当一次性绘制多个基因时，xlab,ylab,title也可以是一个跟y等长的向量。 接下来就是添加p-value以及显著性了123my_comparisons &lt;- list(c("BRCA", "OV"), c("OV", "LUSC"))ggboxplot(expr, x="dataset", y="GATA3", title = "GATA3", ylab = "Expression", color = "dataset", palette = "jco")+ stat_compare_means(comparisons = my_comparisons) 也可以查看每个类型中每一个基因的比较：1compare_means(c(GATA3, PTEN, XBP1)~dataset, data = expr) 可以通过select以及remove来决定比较那几个类型，比如这里我们只比较BRCA和OV12ggboxplot(expr, x="dataset", y="GATA3", title = "GATA3", ylab = "Expression", color = "dataset", palette = "jco", select = c("BRCA", "OV"))#通过select选择 12ggboxplot(expr, x="dataset", y="GATA3", title = "GATA3", ylab = "Expression", color = "dataset", palette = "jco", remove = "BRCA")#通过remove选择 通过order来改变各类型在x轴上的顺序12ggboxplot(expr, x="dataset", y="GATA3", title = "GATA3", ylab = "Expression", color = "dataset", palette = "jco", order = c("LUSC", "OV", "BRCA")) 通过rotate=TRUE来变换坐标轴12ggboxplot(expr, x="dataset", y="GATA3", title = "GATA3", ylab = "Expression", color = "dataset", palette = "jco", rotate=TRUE) 通过combine=TRUE来进行分面（类似于facet）12ggboxplot(expr, x="dataset", y=c("GATA3", "PTEN", "XBP1"), ylab = "Expression", color = "dataset", palette = "jco", combine = TRUE) 通过merge=TRUE或者merge=“axis”将三个类型的plot绘制在一个panel中12ggboxplot(expr, x="dataset", y=c("GATA3", "PTEN", "XBP1"), ylab = "Expression",color = "dataset", palette = "jco", merge = TRUE) 通过merge=flip利用不同癌症类型进行group12ggboxplot(expr, x="dataset", y=c("GATA3", "PTEN", "XBP1"), ylab = "Expression", palette = "jco", merge = "flip") 通过add=jitter增加抖动点123ggboxplot(expr, x="dataset", y=c("GATA3", "PTEN", "XBP1"), combine = TRUE,color = "dataset", palette = "jco", ylab = "Expression", add = "jitter", add.params = list(size=0.1, jitter=0.2)) 通过add=dotplot增加dotplot123ggboxplot(expr, x="dataset", y=c("GATA3", "PTEN", "XBP1"), combine = TRUE, color = "dataset", palette = "jco", ylab = "Expression", add = "dotplot", add.params = list(binwidth=0.1, dotsize=0.2)) 很多时候我们很像知道箱线图两端的数据，我们可以通过label来进行展示12345ggboxplot(expr, x="dataset", y=c("GATA3", "PTEN", "XBP1"), combine = TRUE,color = "dataset", palette = "jco", ylab = "Expression", add = "jitter", add.params = list(size=0.1, jitter=0.2), label = "bcr_patient_barcode", label.select = list(top.up=2, top.down=2), font.label = list(size=9, face="italic"), repel = TRUE) 2、小提琴图12ggviolin(expr,x="dataset", y=c("GATA3", "PTEN", "XBP1"), combine = TRUE, color = "dataset", palette = "jco", ylab = "Expression", add = "boxplot") 通过修改add来更改添加小提琴图里的图形12ggviolin(expr,x="dataset", y=c("GATA3", "PTEN", "XBP1"), combine = TRUE, color = "dataset", palette = "jco", ylab = "Expression", add = "median_iqr") add有好多选项可以选择：“mean”, “mean_se”, “mean_sd”, “mean_ci”, “mean_range”, “median”, “median_iqr”, “median_mad”, “median_range”.有兴趣的可以自己试试。 3、带状图123ggstripchart(expr, x="dataset", y=c("GATA3", "PTEN", "XBP1"), combine = TRUE,color = "dataset", palette = "jco", size = 0.1, jitter=0.2, ylab = "Expression", add = "median_iqr", add.params = list(color="red")) 4、dotplot123ggdotplot(expr, x="dataset", y=c("GATA3", "PTEN", "XBP1"), combine = TRUE, color = "dataset", palette = "jco", fill = "white", binwidth = 0.1, ylab = "Expression",add = "median_iqr", add.params = list(size=0.9)) 5、密度图12ggdensity(expr, x=c("GATA3", "PTEN", "XBP1"), y="..density..", combine = TRUE, xlab = "Expression", add = "median", rug = TRUE) 将dataset映射给颜色123ggdensity(expr, x=c("GATA3", "PTEN", "XBP1"), y="..density..", combine = TRUE,xlab = "Expression", add = "median", rug = TRUE, color = "dataset", fill = "dataset", palette = "jco") 将三幅图整合进一个panel中，并对y轴进行..count..，而不是..density..123ggdensity(expr, x=c("GATA3", "PTEN", "XBP1"), y="..count..", xlab = "Expression",add = "median", rug = TRUE, palette = "jco")## $GATA3 1## ## $PTEN 1## ## $XBP1 颜色映射，将x轴变量映射给颜色12ggdensity(expr, x=c("GATA3", "PTEN", "XBP1"), y="..count..", color = ".x.", fill = ".x.", merge = TRUE, xlab = "Expression", add = "median", rug = TRUE, palette = "jco") 按dataset进行分面123ggdensity(expr, x=c("GATA3", "PTEN", "XBP1"), y="..count..", color = ".x.", fill = ".x.", merge = TRUE, xlab = "Expression", add = "median", rug = TRUE, palette = "jco", facet.by = "dataset") 6、直方图123gghistogram(expr, x=c("GATA3", "PTEN", "XBP1"), y="..density..", xlab = "Expression", add = "median", rug = TRUE)## $GATA3 1## ## $PTEN 1## ## $XBP1 将dataset映射给颜色123gghistogram(expr, x=c("GATA3", "PTEN", "XBP1"), y="..density..", xlab = "Expression", add = "median", rug = TRUE, color = "dataset", fill = "dataset", palette = "jco")## $GATA3 1## ## $PTEN 1## ## $XBP1 后面还有一些将几幅图整合在一个panel以及分面等大同小异就不讲了。7、Q-Q图1ggqqplot(expr, x=c("GATA3", "PTEN", "XBP1"), combine = TRUE, size = 0.5) 颜色映射12ggqqplot(expr, x=c("GATA3", "PTEN", "XBP1"), combine = TRUE, size = 0.5, color = "dataset", palette = "jco") #sessionInfo123456789101112131415161718192021222324252627282930313233343536373839404142434445sessionInfo()## R version 3.4.0 (2017-04-21)## Platform: x86_64-pc-linux-gnu (64-bit)## Running under: Ubuntu 16.04.2 LTS## ## Matrix products: default## BLAS: /usr/lib/libblas/libblas.so.3.6.0## LAPACK: /usr/lib/lapack/liblapack.so.3.6.0## ## locale:## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=zh_CN.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=zh_CN.UTF-8 LC_MESSAGES=en_US.UTF-8## [7] LC_PAPER=zh_CN.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] bindrcpp_0.2 RTCGA.mRNA_1.4.0 RTCGA_1.6.0 ggpubr_0.1.3 ## [5] magrittr_1.5 ggplot2_2.2.1 ## ## loaded via a namespace (and not attached):## [1] zoo_1.8-0 reshape2_1.4.2 purrr_0.2.2.2 ## [4] splines_3.4.0 ggthemes_3.4.0 lattice_0.20-35 ## [7] colorspace_1.3-2 htmltools_0.3.6 viridisLite_0.2.0## [10] yaml_2.1.14 survival_2.41-3 XML_3.98-1.9 ## [13] survMisc_0.5.4 rlang_0.1.1 foreign_0.8-68 ## [16] glue_1.1.0 bindr_0.1 plyr_1.8.4 ## [19] stringr_1.2.0 ggsignif_0.2.0 munsell_0.4.3 ## [22] gtable_0.2.0 ggsci_2.7 rvest_0.3.2 ## [25] psych_1.7.5 evaluate_0.10 labeling_0.3 ## [28] knitr_1.16 parallel_3.4.0 broom_0.4.2 ## [31] Rcpp_0.12.11 xtable_1.8-2 scales_0.4.1## [34] backports_1.1.0 cmprsk_2.2-7 km.ci_0.5-2 ## [37] gridExtra_2.2.1 mnormt_1.5-5 digest_0.6.12 ## [40] stringi_1.1.5 ggrepel_0.6.5 dplyr_0.7.0 ## [43] KMsurv_0.1-5 grid_3.4.0 rprojroot_1.2 ## [46] tools_3.4.0 lazyeval_0.2.0 tibble_1.3.3 ## [49] tidyr_0.6.3 Matrix_1.2-10 data.table_1.10.4## [52] xml2_1.1.1 survminer_0.4.0 assertthat_0.2.0 ## [55] rmarkdown_1.6 httr_1.2.1 viridis_0.4.0 ## [58] R6_2.2.2 nlme_3.1-131 compiler_3.4.0 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggpubr</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ggplot2学习笔记之图形排列]]></title>
    <url>%2F2017%2F08%2F24%2Fggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9B%BE%E5%BD%A2%E6%8E%92%E5%88%97%2F</url>
    <content type="text"><![CDATA[R语言基本绘图函数中可以利用par()以及layout()来进行图形排列，但是这两个函数对于ggplot图则不太适用，本文主要讲解如何对多ggplot图形多页面进行排列。主要讲解如何利用包gridExtra、cowplot以及ggpubr中的函数进行图形排列。 绘制图形 12345678#load packageslibrary(gridExtra)library(cowplot)library(ggpubr)#dataset ToothGrowth and mtcarsmtcars$name &lt;- rownames(mtcars)mtcars$cyl &lt;- as.factor(mtcars$cyl)head(mtcars[, c("name", "wt","mpg", "cyl")]) 12345678910111213#First let's create some plots#Box plot(bxp)bxp &lt;- ggboxplot(ToothGrowth, x="dose", y="len", color = "dose", palette = "jco")#Dot plot(dp)dp &lt;- ggdotplot(ToothGrowth, x="dose", y="len", color = "dose", palette = "jco", binwidth = 1)#An ordered Bar plot(bp)bp &lt;- ggbarplot(mtcars, x="name", y="mpg", fill="cyl", #change fill color by cyl color="white", #Set bar border colors to white palette = "jco", #jco jourbal color palette sort.val = "asc", #Sort the value in ascending order sort.by.groups = TRUE, #Sort inside each group x.text.angle=90 #Rotate vertically x axis texts )bp+font("x.text", size = 8) 1234567#Scatter plots(sp)sp &lt;- ggscatter(mtcars, x="wt", y="mpg", add = "reg.line", #Add regression line conf.int = TRUE, #Add confidence interval color = "cyl", palette = "jco",#Color by group cyl shape = "cyl" #Change point shape by groups cyl )+ stat_cor(aes(color=cyl), label.x = 3) #Add correlation coefficientsp 图形排列 多幅图形排列于一面 ggpubr::ggarrange()1ggarrange(bxp, dp, bp+rremove("x.text"), labels = c("A", "B", "C"), ncol = 2, nrow = 2) cowplot::plot.grid()1plot_grid(bxp, dp, bp+rremove("x.text"), labels = c("A", "B", "C"), ncol = 2, nrow = 2) gridExtra::grid.arrange()1grid.arrange(bxp, dp, bp+rremove("x.text"), ncol=2, nrow=2) 排列图形注释 ggpubr::annotate_figure() 12345figure &lt;- ggarrange(sp, bp+font("x.text", size = 10), ncol = 1, nrow = 2)annotate_figure(figure, top=text_grob("Visualizing mpg", color = "red", face = "bold", size=14), bottom = text_grob("Data source:\n mtcars data set", color = "blue", hjust = 1, x=1, face = "italic", size=10), left = text_grob("Figure arranged using ggpubr", color = "green", rot = 90), right = "I'm done, thanks :-)!", fig.lab = "Figure 1", fig.lab.face = "bold") 绘图面板对齐 绘制生存曲线12345678910library(survival)head(colon[, c(1:4)])#Fit survival curvesfit &lt;- survfit(Surv(time, status)~adhere, data = colon)library(survminer)ggsurv &lt;- ggsurvplot(fit, data = colon, palette = "jco", #jco palette pval = TRUE, pval.coord=c(500, 0.4), #Add p-value risk.table = TRUE #Add risk table)names(ggsurv)` 1## [1] "plot" "table" "data.survplot" "data.survtable" ggsurv是一个包含两部分的list plot：生存曲线 table：风险表可以用ggarrange()进行排列这两者1ggarrange(ggsurv$plot, ggsurv$table, heights = c(2, 0.7), ncol = 1, nrow = 2) 上图中的坐标轴没有对齐，可以通过参数align来设置1ggarrange(ggsurv$plot, ggsurv$table, heights = c(2, 0.7), ncol = 1, nrow = 2, align = "v") 改变排列图的行列 设置面板为两行两列，其中sp占据第一行的两列，bxp以及dp置于第二行的两列123ggarrange(sp, #First row with scatter plot(sp) ggarrange(bxp, dp, ncol = 2, labels = c("B","C")),#Second row with box and dot plot nrow = 2, labels = "A" #Labels of the scatter plot) R包cowplot cowplot::ggdraw()可以将图形置于特定位置, ggdraw()首先会初始化一个绘图面板， 接下来draw_plot()则是将图形绘制于初始化的绘图面板中，通过参数设置可以将图形置于特定位置。1draw_plot(plot, x=0, y=0, width=1, height=1) 其中： plot:将要放置的图形 x,y:控制图形位置 width,height:图形的宽度和高度 draw_plot_label():为图形添加标签1draw_plot_label(label, x=0, y=1, size=16, ...) 其中： label:标签 x,y:控制标签位置 size:标签字体大小 下面通过一个例子来讲解如何将多个图形放置在特定的位置。1234ggdraw()+ draw_plot(bxp, x=0, y=0.5, width=0.5, height = 0.5)+draw_plot(dp, x=0.5, y=0.5, width = 0.5, height = 0.5)+ draw_plot(bp, x=0, y=0, width = 1.5, height = 0.5)+ draw_plot_label(label = c("A", "B", "C"), size = 15, x=c(0, 0.5, 0), y=c(1, 1, 0.5)) R包gridExtra gridExtra::arrangeGrop()改变行列分布 下面将sp置于第一行并横跨两列，而bxp和dp分别分布于第二行两列123grid.arrange(sp, #First row with one plot spaning over 2 columnsarrangeGrob(bxp, dp, ncol = 2), #Second row with 2plots in 2 different columns nrow=2) #number of rows 也可以通过函数grid.arrange中的layout_matrix来设置复杂的图形布局123grid.arrange(bp, #bar plot spaning two columns bxp, sp, #box plot amd scatter plot ncol=2, nrow=2, layout_matrix=rbind(c(1, 1), c(2, 3))) 要相对grid.arrange()以及arrangeGrob()的输出进行注释，首先要利用as_ggplot()将其转化为ggplot图形，进而利用函数draw_plot_label()对其进行注释。1234gt &lt;- arrangeGrob(bp, bxp, sp, layout_matrix = rbind(c(1,1),c(2, 3)))p &lt;- as_ggplot(gt)+ draw_plot_label(label = c("A", "B", "C"), size = 15, x=c(0, 0, 0.5), y=c(1, 0.5, 0.5))p R包grid R包grid中的grid.layout()可以设置复杂的图形布局，viewport()可以定义一个区域用来安置图形排列，print()则用来将图形置于特定区域。 总结起来步骤如下： 创建图形p1,p2,p3,… grid.newpage()创建一个画布 创建图形布局，几行几列 定义布局的矩形区域 print：将图形置于特定区域12345678910111213library(grid)#Move to a new pagegrid.newpage()#Create layout:nrow=3, ncol=2pushViewport(viewport(layout = grid.layout(nrow=3, ncol=2)))#A helper function to define a region on the layoutdefine_region &lt;- function(row, col)&#123; viewport(layout.pos.row = row, layout.pos.col = col)&#125;#Arrange the plotsprint(sp, vp=define_region(row=1, col=1:2)) #Span over two columnsprint(bxp, vp=define_region(row=2, col=1))print(dp, vp=define_region(row=2, col=2))print(bp+rremove("x.text"), vp=define_region(row=3, col=1:2)) 设置共同图例 ggpubr::ggarrange()可以为组合图形添加共同图例 common.legeng=TRUE:在图形旁边添加图例 legend：指定legend的位置，主要选项有：top、bottom、left、right。1ggarrange(bxp, dp, labels = c("A", "B"), common.legend = TRUE, legend = "bottom") 含有边际密度图的散点图 1234567891011sp &lt;- ggscatter(iris, x="Sepal.Length", y="Sepal.Width", color="Species", palette = "jco", size=3, alpha=0.6)+border()#Marginal density plot of x(top panel) and y(right panel)xplot &lt;- ggdensity(iris, "Sepal.Length", fill="Species",palette = "jco")yplot &lt;- ggdensity(iris, "Sepal.Width", fill="Species", palette = "jco")+rotate()#Clean the plotsxplot &lt;- xplot+clean_theme()yplot &lt;- yplot+clean_theme()#Arrange the plotsggarrange(xplot, NULL, sp, yplot, ncol = 2, nrow = 2, align = "hv", widths = c(2, 1), heights = c(1, 2), common.legend = TRUE) ggplot图、文本、表格组合 12345678910density.p &lt;- ggdensity(iris, x="Sepal.Length", fill="Species", palette = "jco")#Compute the summary table of Sepal.Lengthstable &lt;- desc_statby(iris, measure.var = "Sepal.Length", grps = "Species")stable &lt;- stable[, c("Species", "length", "mean", "sd")]#Summary table plot, medium and themestable.p &lt;- ggtexttable(stable, rows = NULL, theme = ttheme("mOrange"))text &lt;- paste("iris data set gives the measurements in cm", "of the variables sepal length and width", "and petal length and width, respectively,", "for 50 flowers from each of 3 species of iris.", "The species are Iris setosa, versicolor, and virginica.", sep = " ")text.p &lt;- ggparagraph(text = text, face = "italic", size = 11, color = "black")#Arrange the plots on the same pageggarrange(density.p, stable.p, text.p, ncol = 1, nrow = 3, heights = c(1, 0.5, 0.3)) ggplot图形中嵌入图形元素 ggplot2::annotation_custom()可以添加各种图形元素到ggplot图中1annotation_custom(grob, xmin, xmax, ymin, ymax) 其中： grob:要添加的图形元素 xmin, xmax: x轴方向位置（水平方向） ymin, ymax: y轴方向位置（竖直方向） ggplot图形中添加table 1density.p+annotation_custom(ggplotGrob(stable.p), xmin = 5.5, xmax = 8, ymin = 0.7) ggplot图形中添加box plot 1234567891011121314151617181920sp &lt;- ggscatter(iris, x="Sepal.Length", y="Sepal.Width", color = "Species", palette = "jco", size = 3, alpha=0.6)xbp &lt;- ggboxplot(iris$Sepal.Length, width = 0.3, fill = "lightgray")+ rotate()+theme_transparent()ybp &lt;- ggboxplot(iris$Sepal.Width, width = 0.3, fill="lightgray")+theme_transparent()# Create the external graphical objects# called a "grop" in Grid terminologyxbp_grob &lt;- ggplotGrob(xbp)ybp_grob &lt;- ggplotGrob(ybp)#place box plots inside the scatter plotxmin &lt;- min(iris$Sepal.Length)xmax &lt;- max(iris$Sepal.Length)ymin &lt;- min(iris$Sepal.Width)ymax &lt;- max(iris$Sepal.Width)yoffset &lt;- (1/15)*ymaxxoffset &lt;- (1/15)*xmax# Insert xbp_grob inside the scatter plotsp+annotation_custom(grob = xbp_grob, xmin = xmin, xmax = xmax, ymin = ymin-yoffset, ymax = ymin+yoffset)+# Insert ybp_grob inside the scatter plotannotation_custom(grob = ybp_grob, xmin = xmin-xoffset, xmax=xmin+xoffset, ymin=ymin, ymax=ymax) ggplot图形添加背景 12#import the imageimg.file &lt;- system.file(file.path("images", "background-image.png"), package = "ggpubr")img &lt;- png::readPNG(img.file) 利用ggpubr::background_image()为ggplot图形添加背景图 12345library(ggplot2)library(ggpubr)ggplot(iris, aes(Species,Sepal.Length))+background_image(img)+geom_boxplot(aes(fill=Species), color="white")+ fill_palette("jco") 修改透明度 123ggplot(iris, aes(Species,Sepal.Length))+background_image(img)+geom_boxplot(aes(fill=Species), color="white", alpha=0.5)+ fill_palette("jco") 多页排列 日常工作中我们有时要绘制许多图，假如我们有16幅图，每页排列4张的话就需要4页才能排完，而ggpubr::ggarrange()可以通过制定行列数自动在多页之间进行图形排列 1multi.page &lt;-ggarrange(bxp, dp, bp, sp, nrow = 1, ncol = 2) 上述代码返回两页每页两图1multi.page[[1]] 1multi.page[[2]] 利用ggarrange()嵌套布局 1234p1 &lt;- ggarrange(sp, bp+font("x.text", size = 9), ncol = 1, nrow = 2)p2 &lt;- ggarrange(density.p, stable.p, text.p, ncol = 1, nrow = 3, heights = c(1, 0.5, 0.3))ggarrange(p1, p2, ncol = 2, nrow = 1) SessionInfo 12345678910111213141516171819202122232425262728293031323334353637383940sessionInfo()## R version 3.4.1 (2017-06-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 10 x64 (build 15063)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] grid stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages:## [1] survminer_0.4.0 survival_2.41-3 ggpubr_0.1.5 magrittr_1.5 ## [5] cowplot_0.8.0 ggplot2_2.2.1 gridExtra_2.2.1## ## loaded via a namespace (and not attached):## [1] zoo_1.8-0 purrr_0.2.3 reshape2_1.4.2 ## [4] splines_3.4.1 lattice_0.20-35 colorspace_1.3-2 ## [7] htmltools_0.3.6 yaml_2.1.14 survMisc_0.5.4## [10] rlang_0.1.2 foreign_0.8-69 glue_1.1.1 ## [13] bindrcpp_0.2 bindr_0.1 plyr_1.8.4 ## [16] stringr_1.2.0 munsell_0.4.3 gtable_0.2.0 ## [19] ggsci_2.7 psych_1.7.5 evaluate_0.10.1 ## [22] labeling_0.3 knitr_1.17 parallel_3.4.1 ## [25] broom_0.4.2 Rcpp_0.12.12 xtable_1.8-2 ## [28] scales_0.4.1 backports_1.1.0 cmprsk_2.2-7 ## [31] km.ci_0.5-2 mnormt_1.5-5 png_0.1-7 ## [34] digest_0.6.12 stringi_1.1.5 dplyr_0.7.2 ## [37] KMsurv_0.1-5 rprojroot_1.2 tools_3.4.1 ## [40] lazyeval_0.2.0 tibble_1.3.3 tidyr_0.7.0 ## [43] pkgconfig_2.0.1 Matrix_1.2-11 data.table_1.10.4## [46] assertthat_0.2.0 rmarkdown_1.6 R6_2.2.2 ## [49] nlme_3.1-131 compiler_3.4.1 联系方式： wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggpubr</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言学习笔记之热图绘制]]></title>
    <url>%2F2017%2F08%2F21%2FR%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%83%AD%E5%9B%BE%E7%BB%98%E5%88%B6%2F</url>
    <content type="text"><![CDATA[简介本文将绘制静态与交互式热图，需要使用到以下R包和函数：heatmap():用于绘制简单热图的函数heatmap.2():绘制增强热图的函数d3heatmap:用于绘制交互式热图的R包ComplexHeatmap:用于绘制、注释和排列复杂热图的R&amp;bioconductor包（非常适用于基因组数据分析） 数据准备使用R内置数据集mtcars1df &lt;- as.matrix((scale(mtcars)))#归一化、矩阵化 使用基本函数绘制简单简单热图主要是函数heatmap(x, scale=&quot;row&quot;) x:数据矩阵 scale：表示不同方向，可选值有：row, columa, none Default plotheatmap(df, scale = “none”)123Use custom colorscol &lt;- colorRampPalette(c("red", "white", "blue"))(256)heatmap(df, scale = "none", col=col) 123#Use RColorBrewer color palette nameslibrary(RColorBrewer)col &lt;- colorRampPalette(brewer.pal(10, "RdYlBu"))(256)#自设置调色板dim(df)#查看行列数## [1] 32 11 123heatmap(df, scale = "none", col=col, RowSideColors = rep(c("blue", "pink"), each=16), ColSideColors = c(rep("purple", 5), rep("orange", 6)))#参数RowSideColors和ColSideColors用于分别注释行和列颜色等,可help(heatmap)详情 增强热图函数heatmap.2()在热图绘制方面提供许多扩展，此函数包装在gplots包里。12library(gplots)heatmap.2(df, scale = "none", col=bluered(100), trace = "none", density.info = "none")#还有其他参数可参考help(heatmap.2()) 交互式热图绘制d3heatmap包可用于生成交互式热图绘制,可通过以下代码生成：123if (!require("devtools")) install.packages("devtools") devtools::install_github("rstudio/d3heatmap") 函数d3heatmap()用于创建交互式热图，有以下功能： 将鼠标放在感兴趣热图单元格上以查看行列名称及相应值 可选择区域进行缩放1library(d3heatmap)d3heatmap(df, colors = "RdBu", k_row = 4, k_col = 2) k_row、k_col分别指定用于对行列中树形图分支进行着色所需组数。进一步信息可help(d3heatmap())获取。 使用dendextend包增强热图软件包dendextend可以用于增强其他软件包的功能123456789101112library(dendextend)# order for rowsRowv &lt;- mtcars %&gt;% scale %&gt;% dist %&gt;% hclust %&gt;% as.dendrogram %&gt;% set("branches_k_color", k = 3) %&gt;% set("branches_lwd", 1.2) %&gt;% ladderize# Order for columns# We must transpose the dataColv &lt;- mtcars %&gt;% scale %&gt;% t %&gt;% dist %&gt;% hclust %&gt;% as.dendrogram %&gt;% set("branches_k_color", k = 2, value = c("orange", "blue")) %&gt;% set("branches_lwd", 1.2) %&gt;% ladderize增强heatmap()函数---heatmap(df, Rowv = Rowv, Colv = Colv, scale = "none") 12#增强heatmap.2()函数heatmap.2(df, scale = "none", col = bluered(100), Rowv = Rowv, Colv = Colv, trace = "none", density.info = "none") 12#增强交互式绘图函数d2heatmap()d3heatmap(scale(mtcars), colors = "RdBu", Rowv = Rowv, Colv = Colv) 绘制复杂热图ComplexHeatmap包是bioconductor包，用于绘制复杂热图，它提供了一个灵活的解决方案来安排和注释多个热图。它还允许可视化来自不同来源的不同数据之间的关联热图。可通过以下代码安装：12if (!require("devtools")) install.packages("devtools") devtools::install_github("jokergoo/ComplexHeatmap") ComplexHeatmap包的主要功能函数是Heatmap(),格式为：Heatmap(matrix, col, name) matrix：矩阵 col：颜色向量（离散色彩映射）或颜色映射函数（如果矩阵是连续数） name：热图名称12library(ComplexHeatmap)Heatmap(df, name = "mtcars") 123#自设置颜色library(circlize)Heatmap(df, name = "mtcars", col = colorRamp2(c(-2, 0, 2), c("green", "white", "red"))) 使用调色板1Heatmap(df, name = "mtcars",col = colorRamp2(c(-2, 0, 2), brewer.pal(n=3, name="RdBu"))) 12#自定义颜色mycol &lt;- colorRamp2(c(-2, 0, 2), c("blue", "white", "red")) #热图及行列标题设置12Heatmap(df, name = "mtcars", col = mycol, column_title = "Column title", row_title = "Row title") 注意，行标题的默认位置是“left”，列标题的默认是“top”。可以使用以下选项更改： row_title_side：允许的值为“左”或“右”（例如：row_title_side =“right”） column_title_side：允许的值为“top”或“bottom”（例如：column_title_side =“bottom”） 也可以使用以下选项修改字体和大小： row_title_gp：用于绘制行文本的图形参数 column_title_gp：用于绘制列文本的图形参数123Heatmap(df, name = "mtcars", col = mycol, column_title = "Column title", column_title_gp = gpar(fontsize = 14, fontface = "bold"), row_title = "Row title", row_title_gp = gpar(fontsize = 14, fontface = "bold")) 在上面的R代码中，fontface的可能值可以是整数或字符串：1 = plain，2 = bold，3 =斜体，4 =粗体斜体。如果是字符串，则有效值为：“plain”，“bold”，“italic”，“oblique”和“bold.italic”。显示行/列名称： show_row_names：是否显示行名称。默认值为TRUE show_column_names：是否显示列名称。默认值为TRUE 1Heatmap(df, name = "mtcars", show_row_names = FALSE) 更改聚类外观默认情况下，行和列是包含在聚类里的。可以使用参数修改： cluster_rows = FALSE。如果为TRUE，则在行上创建集群 cluster_columns = FALSE。如果为TRUE，则将列置于簇上12# Inactivate cluster on rowsHeatmap(df, name = "mtcars", col = mycol, cluster_rows = FALSE) 如果要更改列集群的高度或宽度，可以使用选项column_dend_height和row_dend_width：12Heatmap(df, name = "mtcars", col = mycol, column_dend_height = unit(2, "cm"), row_dend_width = unit(2, "cm") ) 我们还可以利用color_branches()自定义树状图外观12345library(dendextend)row_dend = hclust(dist(df)) # row clusteringcol_dend = hclust(dist(t(df))) # column clusteringHeatmap(df, name = "mtcars", col = mycol, cluster_rows = color_branches(row_dend, k = 4), cluster_columns = color_branches(col_dend, k = 2)) 不同的聚类距离计算方式参数clustering_distance_rows和clustering_distance_columns用于分别指定行和列聚类的度量标准，允许的值有“euclidean”, “maximum”, “manhattan”, “canberra”, “binary”, “minkowski”, “pearson”, “spearman”, “kendall”。12Heatmap(df, name = "mtcars", clustering_distance_rows = "pearson", clustering_distance_columns = "pearson") 12#也可以自定义距离计算方式Heatmap(df, name = "mtcars", clustering_distance_rows = function(m) dist(m)) 1Heatmap(df, name = "mtcars", clustering_distance_rows = function(x, y) 1 - cor(x, y)) 请注意，在上面的R代码中，通常为指定行聚类的度量的参数 clustering_distance_rows显示示例。建议对参数clustering_distance_columns（列聚类的度量标准）使用相同的度量标准。 12345678# Clustering metric functionrobust_dist = function(x, y) &#123; qx = quantile(x, c(0.1, 0.9)) qy = quantile(y, c(0.1, 0.9)) l = x &gt; qx[1] &amp; x &lt; qx[2] &amp; y &gt; qy[1] &amp; y &lt; qy[2] x = x[l] y = y[l] sqrt(sum((x - y)^2))&#125;# HeatmapHeatmap(df, name = "mtcars", clustering_distance_rows = robust_dist, clustering_distance_columns = robust_dist, col = colorRamp2(c(-2, 0, 2), c("purple", "white", "orange"))) 聚类方法参数clustering_method_rows和clustering_method_columns可用于指定进行层次聚类的方法。允许的值是hclust()函数支持的值，包括“ward.D”，“ward.D2”，“single”，“complete”，“average”，…（见?hclust）。12Heatmap(df, name = "mtcars", clustering_method_rows = "ward.D", clustering_method_columns = "ward.D") 热图拆分有很多方法来拆分热图。一个解决方案是应用k-means使用参数km。在执行k-means时使用set.seed()函数很重要，这样可以在稍后精确地再现结果12set.seed(1122)# split into 2 groupsHeatmap(df, name = "mtcars", col = mycol, k = 2) 12# split by a vector specifying row classes， 有点类似于ggplot2里的分面Heatmap(df, name = "mtcars", col = mycol, split = mtcars$cyl ) 123#split也可以是一个数据框，其中不同级别的组合拆分热图的行。# Split by combining multiple variablesHeatmap(df, name ="mtcars", col = mycol, split = data.frame(cyl = mtcars$cyl, am = mtcars$am)) 12# Combine km and splitHeatmap(df, name ="mtcars", col = mycol, km = 2, split = mtcars$cyl) 12345#也可以自定义分割library("cluster")set.seed(1122)pa = pam(df, k = 3)Heatmap(df, name = "mtcars", col = mycol, split = paste0("pam", pa$clustering)) 还可以将用户定义的树形图和分割相结合。在这种情况下，split可以指定为单个数字： 123row_dend = hclust(dist(df)) # row clusteringrow_dend = color_branches(row_dend, k = 4)Heatmap(df, name = "mtcars", col = mycol, cluster_rows = row_dend, split = 2) 热图注释利用HeatmapAnnotation()对行或列注释。格式为： HeatmapAnnotation(df, name, col, show_legend) df：带有列名的data.frame name：热图标注的名称 col：映射到df中列的颜色列表123# Transposedf &lt;- t(df)# Heatmap of the transposed dataHeatmap(df, name ="mtcars", col = mycol) 12345678910# Annotation data frameannot_df &lt;- data.frame(cyl = mtcars$cyl, am = mtcars$am, mpg = mtcars$mpg)# Define colors for each levels of qualitative variables# Define gradient color for continuous variable (mpg)col = list(cyl = c("4" = "green", "6" = "gray", "8" = "darkred"), am = c("0" = "yellow", "1" = "orange"), mpg = colorRamp2(c(17, 25), c("lightblue", "purple")) )# Create the heatmap annotationha &lt;- HeatmapAnnotation(annot_df, col = col)# Combine the heatmap and the annotationHeatmap(df, name = "mtcars", col = mycol, top_annotation = ha) 123#可以使用参数show_legend = FALSE来隐藏注释图例ha &lt;- HeatmapAnnotation(annot_df, col = col, show_legend = FALSE)Heatmap(df, name = "mtcars", col = mycol, top_annotation = ha) 12345678910111213#注释名称可以使用下面的R代码添加library("GetoptLong")# Combine Heatmap and annotationha &lt;- HeatmapAnnotation(annot_df, col = col, show_legend = FALSE)Heatmap(df, name = "mtcars", col = mycol, top_annotation = ha)# Add annotation names on the rightfor(an in colnames(annot_df)) &#123; seekViewport(qq("annotation_@&#123;an&#125;")) grid.text(an, unit(1, "npc") + unit(2, "mm"), 0.5, default.units = "npc", just = "left")&#125;#要在左侧添加注释名称，请使用以下代码# Annotation names on the leftfor(an in colnames(annot_df)) &#123; seekViewport(qq("annotation_@&#123;an&#125;")) grid.text(an, unit(1, "npc") - unit(2, "mm"), 0.5, default.units = "npc", just = "left")&#125; 复杂注释将热图与一些基本图形结合起来进行注释，利用anno_point(),anno_barplot(),anno_boxplot(),anno_density()和anno_histogram()。123456789101112# Define some graphics to display the distribution of columns.hist = anno_histogram(df, gp = gpar(fill = "lightblue")).density = anno_density(df, type = "line", gp = gpar(col = "blue"))ha_mix_top = HeatmapAnnotation(hist = .hist, density = .density)# Define some graphics to display the distribution of rows.violin = anno_density(df, type = "violin", gp = gpar(fill = "lightblue"), which = "row").boxplot = anno_boxplot(df, which = "row")ha_mix_right = HeatmapAnnotation(violin = .violin, bxplt = .boxplot, which = "row", width = unit(4, "cm"))# Combine annotation with heatmapHeatmap(df, name = "mtcars", col = mycol, column_names_gp = gpar(fontsize = 8), top_annotation = ha_mix_top, top_annotation_height = unit(4, "cm")) + ha_mix_right 热图组合123456# Heatmap 1ht1 = Heatmap(df, name = "ht1", col = mycol, km = 2, column_names_gp = gpar(fontsize = 9))# Heatmap 2ht2 = Heatmap(df, name = "ht2", col = colorRamp2(c(-2, 0, 2), c("green", "white", "red")), column_names_gp = gpar(fontsize = 9))# Combine the two heatmapsht1 + ht2 可以使用选项width = unit（3，“cm”））来控制热图大小。注意，当组合多个热图时，第一个热图被视为主热图。剩余热图的一些设置根据主热图的设置自动调整。这些设置包括：删除行集群和标题，以及添加拆分等。 12345678draw(ht1 + ht2, # Titles row_title = "Two heatmaps, row title", row_title_gp = gpar(col = "red"), column_title = "Two heatmaps, column title", column_title_side = "bottom", # Gap between heatmaps gap = unit(0.5, "cm")) 可以使用参数show_heatmap_legend = FALSE，show_annotation_legend = FALSE删除图例。 基因表达矩阵在基因表达数据中，行代表基因，列是样品值。关于基因的更多信息可以在表达热图之后附加，例如基因长度和基因类型。123456789expr = readRDS(paste0(system.file(package = "ComplexHeatmap"), "/extdata/gene_expression.rds"))mat = as.matrix(expr[, grep("cell", colnames(expr))])type = gsub("s\\d+_", "", colnames(mat))ha = HeatmapAnnotation(df = data.frame(type = type))Heatmap(mat, name = "expression", km = 5, top_annotation = ha, top_annotation_height = unit(4, "mm"), show_row_names = FALSE, show_column_names = FALSE) +Heatmap(expr$length, name = "length", width = unit(5, "mm"), col = colorRamp2(c(0, 100000), c("white", "orange"))) +Heatmap(expr$type, name = "type", width = unit(5, "mm")) +Heatmap(expr$chr, name = "chr", width = unit(5, "mm"), col = rand_color(length(unique(expr$chr)))) 也可以可视化基因组变化和整合不同的分子水平（基因表达，DNA甲基化，…） 可视化矩阵中列的分布使用函数densityHeatmap().1densityHeatmap(df) Infos1234567891011121314151617181920212223242526272829303132333435363738sessionInfo()## R version 3.3.3 (2017-03-06)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 8.1 x64 (build 9600)## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] grid stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages:## [1] GetoptLong_0.1.6 cluster_2.0.5 circlize_0.3.10 ## [4] ComplexHeatmap_1.12.0 dendextend_1.4.0 d3heatmap_0.6.1.1##[7] gplots_3.0.1 RColorBrewer_1.1-2 ## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.9 DEoptimR_1.0-8 plyr_1.8.4 ## [4] viridis_0.3.4 class_7.3-14 prabclus_2.2-6 ## [7] bitops_1.0-6 base64enc_0.1-3 tools_3.3.3 ## [10] digest_0.6.12 mclust_5.2.2 jsonlite_1.3 ## [13] evaluate_0.10 tibble_1.2 gtable_0.2.0 ## [16] lattice_0.20-34 png_0.1-7 yaml_2.1.14 ## [19] mvtnorm_1.0-6 gridExtra_2.2.1 trimcluster_0.1-2 ## [22] stringr_1.2.0 knitr_1.15.1 GlobalOptions_0.0.11## [25] htmlwidgets_0.8 gtools_3.5.0 caTools_1.17.1 ## [28] fpc_2.1-10 diptest_0.75-7 nnet_7.3-12 ## [31] stats4_3.3.3 rprojroot_1.2 robustbase_0.92-7 ## [34] flexmix_2.3-13 rmarkdown_1.3.9002 gdata_2.17.0 ## [37] kernlab_0.9-25 ggplot2_2.2.1 magrittr_1.5 ## [40] whisker_0.3-2 backports_1.0.5 scales_0.4.1 ## [43] htmltools_0.3.5 modeltools_0.2-21 MASS_7.3-45## [46] assertthat_0.1 shape_1.4.2 colorspace_1.3-2 ## [49] KernSmooth_2.23-15 stringi_1.1.2 lazyeval_0.2.0 ## [52] munsell_0.4.3 rjson_0.2.15 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>Heatmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ggplot2学习笔记系列之利用ggplot2绘制散点图]]></title>
    <url>%2F2017%2F07%2F12%2Fggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%A9%E7%94%A8ggplot2%E7%BB%98%E5%88%B6%E6%95%A3%E7%82%B9%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[1 简介散点图通常用来刻画两个连续型变量之间的关系。绘制散点图时数据集中的每一个观测值都由散点图中的一个点来表示。利用包ggplot2可以绘制十分漂亮的散点图。 利用ggplot2绘图前先确保我们所使用的数据集是data.frame形式。ggplot2绘图利用映射将数据赋予给坐标轴上进而添加几何对象形成图形。绘图前先加载包ggplot2 即library(ggplot2)。12#Load packageslibrary(ggplot2)#visualization 加载完包之后，本文利用数据集mtcars来演示散点图绘制。 先查看数据集的前几行来了解mtcars数据集。12#check datahead(mtcars) 2 绘制简单的散点图1ggplot(data=mtcars, aes(x=wt, y=mpg)) + geom_point() 2.1 shape参数修改图形的形状 可选点图形形状:1ggplot(data=mtcars, aes(x=wt, y=mpg)) +geom_point(shape=17) 2.2 size参数修改点的大小1ggplot(data = mtcars, aes(x=wt, y=mpg))+geom_point(size=5) 2.3 color参数修改点的颜色1ggplot(data=mtcars, aes(x=wt, y=mpg))+geom_point(color="red") 3 绘制分组的散点图可将分组变量（因子或字符变量，可通过factor()强制性将非因子变量转为因子变量）赋值给颜色或性状属性，实现分组散点图的绘制。3.1 首先将数值型变量cyl转换为因子型变量1mtcars$cyl &lt;- factor(mtcars$cyl) 3.2 分组变量赋值给颜色属性(变量赋值必须在aes里面)1ggplot(data=mtcars, aes(x=wt, y=mpg, color=cyl))+geom_point(size=3) 3.3 分组变量赋值给性状属性1ggplot(data=mtcars, aes(x=wt, y=mpg, shape=cyl))+geom_point(size=3) 如果对R语言默认的颜色或者形状不满意，可以通过scale_color_brewer()或者scale_color_manual()函数自定义点的颜色以及scale_shape_manual()函数自定义点的形状。 下面我们将分组变量cyl同时赋值给颜色和形状属性。123ggplot(data=mtcars, aes(x=wt, y=mpg, color=cyl, shape= cyl))+geom_point(size=3)+ scale_color_brewer(palette = "Accent")+scale_shape_manual(values = c(2, 9, 16))#Accent是一调色板，可选点的形状见上 4 将连续变量映射给颜色、大小和形状等属性4.1 将连续性变量disp映射给颜色属性1ggplot(data=mtcars, aes(x=wt, y=mpg, color=disp))+geom_point(size=3) 从图中可以发现值越大对应的颜色越浅，以下是通过人为设置色阶使值大小与颜色深浅保持一致12ggplot(data=mtcars, aes(x=wt, y=mpg, color=disp))+geom_point(size=3)+ scale_color_gradient(low="lightblue", high="darkblue") 4.2 将连续性变量disp映射给大小属性1ggplot(data=mtcars, aes(x=wt, y=mpg, size=disp))+geom_point(color="red") 5 重叠点的处理当数据量非常大时，会导致数据重叠点非常严重，可通过使用半透明的点避免。alpha参数控制点的透明度。下面利用数据集diamonds来演示。12#check datahead(diamonds) 12#未使用透明点处理ggplot(data=diamonds, aes(x=carat, y=price))+geom_point() 12#使用alpha参数调整点透明度ggplot(data=diamonds, aes(x=carat, y=price))+geom_point(alpha=0.1) 6 为散点图添加拟合曲线12#使用数据集mtcarsggplot(data=mtcars, aes(x=wt, y=mpg))+geom_point()+stat_smooth(method="lm") 12#也可以去除掉拟合曲线的置信区间ggplot(data=mtcars, aes(x=wt, y=mpg))+geom_point()+stat_smooth(method="lm", se=FALSE) 123#也可以针对不同类型的cyl来进行拟合ggplot(data=mtcars, aes(x=wt, y=mpg, color=cyl))+geom_point()+stat_smooth(method="lm") 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>scatter plot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[r4ds学习笔记之ggplot2]]></title>
    <url>%2F2017%2F07%2F01%2Fr4ds%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bggplot2%2F</url>
    <content type="text"><![CDATA[为了进一步加强以及整合自己data science的能力，最近打算在我的博客开辟一个新类r4ds，专门用来记录学习Hadley Wickham大神的新作R for Data Science的读书笔记。该书推荐我们入门data science可以从可视化开始，这也是该书目录布局的第一章。因此开始学习R语言可视化。 前提 本章主要聚焦于可视化包ggplot2,为了写这本书，大神专门整合了一系列神包成为一个包tidyverse，因此第一步就是要先安装该包并加载。1234#install tidyverseinstall.packages("tidyverse")#load tidyverselibrary(tidyverse) ggplot2简介 利用数据集mpg来探究发动机大小跟好友耗油是否存在某种关系，先check一下该数据集。1head(mpg) 在各个变量中： disp:车发动机大小 hwy:衡量耗油率的一个指标，更多信息可？mpg查看 要探究displ与hwy的关系，最快就是画个图了1ggplot(data=mpg)+ geom_point(mapping = aes(x=displ, y=hwy)) 图中显示两者呈现负相关，disp越大，hwy越低。ggplot2绘图规则主要如下：12ggplot(data=&lt;DATA&gt;)+ &lt;GEOM_FUNCTION&gt;(mapping=aes(&gt;MAPPINGS&gt;)) ggplot()会创建一个底板，然后可以通过geom_function()不断地添加图形元素，进行丰富。12p &lt;- ggplot(mpg)#create an empty graphp+geom_point(aes(x=displ, y=hwy))#add a layer to the empty graph 美学映射Aesthetic Mappings 美学映射在ggplot2中是一个十分重要的概念，比如前文我们将displ、hwy分别映射给x、y轴，同时还可以用来控制图形元素大小、形状、颜色等属性。12ggplot(mpg)+ geom_point(aes(x=displ, y=hwy, color=class))#将class映射给颜色属性，这样不同class就表现不同颜色 可以看到，通过颜色映射ggplot2会自动创建一个legend，需要注意的是这里颜色颜色我们是利用class，这是一个离散性变量，如果我们将之映射给点的size，则会出现warning,至于原因，看warning。1ggplot(mpg)+ geom_point(aes(x=displ, y=hwy, size=class)) 或者将class映射给alpha参数，这是一个控制点透明度的参数;shape是一个控制形状的参数1ggplot(mpg)+ geom_point(aes(x=displ, y=hwy, alpha=class)) 1ggplot(mpg)+ geom_point(aes(x=displ, y=hwy, shape=class)) 发现当映射shape其中SUV是没有形状的，这是因为ggplot2只默认6种形状，这个问题后续解决。 需要注意的是映射参数必须在aes(),不然就无法映射。1ggplot(mpg)+ geom_point(aes(x=displ, y=hwy), color="blue")#all the points are blue 今天就讲到这，下次继续 SessionInfo 123456789101112131415161718192021222324252627282930313233343536373839sessionInfo()## R version 3.4.1 (2017-06-30)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 8.1 x64 (build 9600)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] forcats_0.2.0 stringr_1.2.0 dplyr_0.7.1 ## [4] purrr_0.2.2.2 readr_1.1.1 tidyr_0.6.3 ## [7] tibble_1.3.3 ggplot2_2.2.1 tidyverse_1.1.1.9000## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.11 cellranger_1.1.0 compiler_3.4.1 ## [4] plyr_1.8.4 bindr_0.1 tools_3.4.1 ## [7] digest_0.6.12 lubridate_1.6.0 jsonlite_1.5 ## [10] evaluate_0.10.1 nlme_3.1-131 gtable_0.2.0 ## [13] lattice_0.20-35 pkgconfig_2.0.1 rlang_0.1.1 ## [16] psych_1.7.5 rstudioapi_0.6 yaml_2.1.14 ## [19] parallel_3.4.1 haven_1.0.0 bindrcpp_0.2 ## [22] xml2_1.1.1 httr_1.2.1 knitr_1.16 ## [25] hms_0.3 rprojroot_1.2 grid_3.4.1 ## [28] glue_1.1.1 R6_2.2.2 readxl_1.0.0 ## [31] foreign_0.8-69 rmarkdown_1.6 modelr_0.1.0 ## [34] reshape2_1.4.2 magrittr_1.5 clisymbols_1.2.0 ## [37] boxes_0.0.0.9000 backports_1.1.0 scales_0.4.1 ## [40] htmltools_0.3.6 rvest_0.3.2 assertthat_0.2.0 ## [43] mnormt_1.5-5 colorspace_1.3-2 labeling_0.3 ## [46] stringi_1.1.5 lazyeval_0.2.0 munsell_0.4.3 ## [49] broom_0.4.2 crayon_1.3.2.9000 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>r4ds</category>
      </categories>
      <tags>
        <tag>visualization</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言data manipulation学习笔记之subset data]]></title>
    <url>%2F2017%2F06%2F29%2FR%E8%AF%AD%E8%A8%80data-manipulation%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bsubset-data%2F</url>
    <content type="text"><![CDATA[数据分析过程中我们常常需要从数据集中抽取部分数据，本文将介绍如何提取子数据集，主要利用R自带的函数，以后会专门介绍data manipulation包dplyr。 提取子数据集主要分为select以及exclude，这里主要介绍两种方法，一是利用操作符[]进行选取，二是利用subset()进行抽取。 利用[]进行提取123456789101112#use the iris datasethead(iris)## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa## 2 4.9 3.0 1.4 0.2 setosa## 3 4.7 3.2 1.3 0.2 setosa## 4 4.6 3.1 1.5 0.2 setosa## 5 5.0 3.6 1.4 0.2 setosa## 6 5.4 3.9 1.7 0.4 setosa# check the column namenames(iris)## [1] "Sepal.Length" "Sepal.Width" "Petal.Length" "Petal.Width" "Species" 加入我们想要提取Sepal.Length、Sepal.Width两列数据，可以使用如下代码：123456789dt1 &lt;- iris[, c("Sepal.Length","Sepal.Width")]head(dt1)## Sepal.Length Sepal.Width## 1 5.1 3.5## 2 4.9 3.0## 3 4.7 3.2## 4 4.6 3.1## 5 5.0 3.6## 6 5.4 3.9 123456789#也可以直接用列序号代替，比如这里我们想要提要前两列dt2 &lt;- iris[, c(1, 2)]head(dt2)## Sepal.Length Sepal.Width## 1 5.1 3.5## 2 4.9 3.0## 3 4.7 3.2## 4 4.6 3.1## 5 5.0 3.6## 6 5.4 3.9 如果我们需要删除前两列，只需在序号之前添加符号 - 就行123456789dt3 &lt;- iris[, c(-1, -2)]head(dt3)## Petal.Length Petal.Width Species ## 1 1.4 0.2 setosa## 2 1.4 0.2 setosa## 3 1.3 0.2 setosa## 4 1.5 0.2 setosa## 5 1.4 0.2 setosa## 6 1.7 0.4 setosa 可以看出十分简单就可以提取子数据集，下面介绍subset()，subset()相比于[]主要是可以方便的根据条件提取子数据集。 利用subset()进行提取1234567891011121314#create a datasetfy &lt;- c(2010,2011,2012,2010,2011,2012,2010,2011,2012)company &lt;- c("Apple","Apple","Apple","Google","Google","Google","Microsoft","Microsoft","Microsoft")revenue &lt;- c(65225,108249,156508,29321,37905,50175,62484,69943,73723)profit &lt;- c(14013,25922,41733,8505,9737,10737,18760,23150,16978) companiesData &lt;- data.frame(fy, company, revenue, profit)head(companiesData)## fy company revenue profit## 1 2010 Apple 65225 14013## 2 2011 Apple 108249 25922## 3 2012 Apple 156508 41733## 4 2010 Google 29321 8505## 5 2011 Google 37905 9737## 6 2012 Google 50175 10737 假如我们想要提取revenue超过十万的公司123456com1 &lt;- subset(companiesData, revenue&gt;100000)head(com1)## fy company revenue profit## 2 2011 Apple 108249 25922## 3 2012 Apple 156508 41733 或者我们想要提取在2012年revenue超过6万的公司123456com2 &lt;- subset(companiesData, fy=="2012"&amp;revenue&gt;60000)head(com2)## fy company revenue profit## 3 2012 Apple 156508 41733## 9 2012 Microsoft 73723 16978 或者提取在2012年revenue超过6万、profit超过4万的公司12345com3 &lt;- subset(companiesData, fy=="2012"&amp;revenue&gt;60000&amp;profit&gt;40000)com3## fy company revenue profit## 3 2012 Apple 156508 41733 条件选择也可以使用或，比如我们想要提取profit超过2万或者revenue低于5万的公司12345678com4 &lt;- subset(companiesData, revenue&lt;50000|profit&gt;20000)com4## fy company revenue profit ## 2 2011 Apple 108249 25922## 3 2012 Apple 156508 41733## 4 2010 Google 29321 8505## 5 2011 Google 37905 9737## 8 2011 Microsoft 69943 23150 本文只是粗略的讲解，其实subset()的用法很广，有兴趣的朋友可以自行探索。 SessionInfo1234567891011121314151617181920212223242526sessionInfo()## R version 3.4.0 (2017-04-21)## Platform: x86_64-pc-linux-gnu (64-bit)## Running under: Ubuntu 16.04.2 LTS## ## Matrix products: default## BLAS: /usr/lib/atlas-base/atlas/libblas.so.3.0## LAPACK: /usr/lib/atlas-base/atlas/liblapack.so.3.0## ## locale:## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## loaded via a namespace (and not attached):## [1] compiler_3.4.0 backports_1.1.0 magrittr_1.5 rprojroot_1.2 ## [5] tools_3.4.0 htmltools_0.3.6 yaml_2.1.14 Rcpp_0.12.11 ## [9] stringi_1.1.5 rmarkdown_1.6 knitr_1.16 stringr_1.2.0 ## [13] digest_0.6.12 evaluate_0.10.1 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>Data Manipulation</category>
      </categories>
      <tags>
        <tag>data management</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言data manipulation学习笔记之创建变量、重命名、数据融合]]></title>
    <url>%2F2017%2F06%2F28%2FR%E8%AF%AD%E8%A8%80data-manipulation%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%8F%98%E9%87%8F%E3%80%81%E9%87%8D%E5%91%BD%E5%90%8D%E3%80%81%E6%95%B0%E6%8D%AE%E8%9E%8D%E5%90%88%2F</url>
    <content type="text"><![CDATA[数据分析中数据处理也就是data manipulation是十分繁琐的，为此我将在博客里特意建一个分类：Data Manipulation。本文将讲讲如何在R语言中创建变量、重命名以及merge。 create a dataset12345678910111213fy &lt;- c(2010,2011,2012,2010,2011,2012,2010,2011,2012)company &lt;- c("Apple","Apple","Apple","Google","Google","Google","Microsoft","Microsoft","Microsoft")revenue &lt;- c(65225,108249,156508,29321,37905,50175,62484,69943,73723)profit &lt;- c(14013,25922,41733,8505,9737,10737,18760,23150,16978) companiesData &lt;- data.frame(fy, company, revenue, profit)head(companiesData)## fy company revenue profit## 1 2010 Apple 65225 14013## 2 2011 Apple 108249 25922## 3 2012 Apple 156508 41733## 4 2010 Google 29321 8505## 5 2011 Google 37905 9737## 6 2012 Google 50175 10737 接下来我们需要查看数据集的结构，用str()函数查看123456str(companiesData)## 'data.frame': 9 obs. of 4 variables:## $ fy : num 2010 2011 2012 2010 2011 ...## $ company: Factor w/ 3 levels "Apple","Google",..: 1 1 1 2 2 2 3 3 3## $ revenue: num 65225 108249 156508 29321 37905 ...## $ profit : num 14013 25922 41733 8505 9737 ... 可以看到年份fy这里是是数值型，我们需要更改为因子型，方便后期处理1companiesData$fy &lt;- factor(companiesData$fy, ordered = TRUE) 现在数据已经整理过好了，下面我们来添加变量，比如我们可以看看各个公司的利润率12345678910companiesData$margin &lt;- (companiesData$profit/companiesData$revenue)*100#查看数据head(companiesData)## fy company revenue profit margin## 1 2010 Apple 65225 14013 21.48409## 2 2011 Apple 108249 25922 23.94664## 3 2012 Apple 156508 41733 26.66509## 4 2010 Google 29321 8505 29.00651## 5 2011 Google 37905 9737 25.68790## 6 2012 Google 50175 10737 21.39910 小数点位数太多了，这里我们保留一位123456789companiesData$margin &lt;- round(companiesData$margin, 1)head(companiesData)## fy company revenue profit margin## 1 2010 Apple 65225 14013 21.5## 2 2011 Apple 108249 25922 23.9## 3 2012 Apple 156508 41733 26.7## 4 2010 Google 29321 8505 29.0## 5 2011 Google 37905 9737 25.7## 6 2012 Google 50175 10737 21.4 这样我们就创建了一个新的变量margin，当然也可以删除变量，只要复制需要删除的变量NULL就行了。12345678910#delete variable margincompaniesData$margin &lt;- NULLhead(companiesData)## fy company revenue profit## 1 2010 Apple 65225 14013## 2 2011 Apple 108249 25922## 3 2012 Apple 156508 41733## 4 2010 Google 29321 8505## 5 2011 Google 37905 9737## 6 2012 Google 50175 10737 再顺便介绍一下transform函数，用于创建变量，transform的格式如下12345678910dataFrame &lt;- transform(dataFrame, newColumn = oldColumn1 + oldColumn2)companiesData &lt;- transform(companiesData, margin=round((profit/revenue)*100), 1)head(companiesData)## fy company revenue profit margin X1## 1 2010 Apple 65225 14013 21 1## 2 2011 Apple 108249 25922 24 1## 3 2012 Apple 156508 41733 27 1## 4 2010 Google 29321 8505 29 1## 5 2011 Google 37905 9737 26 1## 6 2012 Google 50175 10737 21 1 接下来讲一下merge，主要是merge函数，它要求进行融合的两个数据集需要有共同的变量即id，使用格式如下：1finaldt &lt;- merge(dataset1, dataset2, by="id") 这里我们再创建一个数据集用于merge123456789#creat another datasetcompany &lt;- c("Apple","Google","Microsoft")ava1 &lt;- c(1,2,3)data2 &lt;- data.frame(company, ava1)head(data2)## company ava1## 1 Apple 1## 2 Google 2## 3 Microsoft 3 数据集data2与数据集companiesData具有共同的变量company(id)12#merge the two datasetnewdata &lt;- merge(companiesData, data2, by="company") 这样就得到一个完整的数据集了，当然添加行、列还有两个很有用的函数：rbind()以及cbind(),这里就不介绍了 最后讲一下重命名，其实很简单1234567891011companiesData$company &lt;- c("A", "A", "A", "G", "G", "G", "M", "M", "M")head(companiesData)## fy company revenue profit margin X1## 1 2010 A 65225 14013 21 1## 2 2011 A 108249 25922 24 1## 3 2012 A 156508 41733 27 1## 4 2010 G 29321 8505 29 1## 5 2011 G 37905 9737 26 1## 6 2012 G 50175 10737 21 1#rename the colnamecolnames(companiesData) &lt;- c("Year", "Com", "Rev", "Pro", "Mar") seessioninfo12345678910111213141516171819202122sessionInfo()## R version 3.4.0 (2017-04-21)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 8.1 x64 (build 9600)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## loaded via a namespace (and not attached):## [1] compiler_3.4.0 backports_1.1.0 magrittr_1.5 rprojroot_1.2 ## [5] tools_3.4.0 htmltools_0.3.6 yaml_2.1.14 Rcpp_0.12.11 ## [9] stringi_1.1.5 rmarkdown_1.5 knitr_1.16 stringr_1.2.0 ## [13] digest_0.6.12 evaluate_0.10 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>Data Manipulation</category>
      </categories>
      <tags>
        <tag>manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化学习笔记之ggpubr包]]></title>
    <url>%2F2017%2F06%2F26%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bggpubr%E5%8C%85%2F</url>
    <content type="text"><![CDATA[Hadley Wickham创建的可视化包ggplot2可以流畅地进行优美的可视化，但是如果要通过ggplot2定制一套图形，尤其是适用于杂志期刊等出版物的图形，对于那些没有深入了解ggplot2的人来说就有点困难了，ggplot2的部分语法是很晦涩的。为此Alboukadel Kassambara创建了基于ggplot2的可视化包ggpubr用于绘制符合出版物要求的图形。 安装及加载ggpubr包安装方式有两种： 直接从CRAN安装： 1install.packages("ggpubr") 从GitHub上安装最新版本： 12if(!require(devtools)) install.packages("devtools") devtools::install_github("kassambara/ggpubr") 安装完之后直接加载就行：1library(ggpubr) ggpubr可绘制图形：ggpubr可绘制大部分我们常用的图形，下面一一介绍。 分布图(Distribution)12345#构建数据集set.seed(1234)df &lt;- data.frame( sex=factor(rep(c("f", "M"), each=200)), weight=c(rnorm(200, 55), rnorm(200, 58)))head(df) 1234567## sex weight## 1 f 53.79293## 2 f 55.27743## 3 f 56.08444## 4 f 52.65430## 5 f 55.42912## 6 f 55.50606 密度分布图以及边际地毯线并添加平均值线12ggdensity(df, x="weight", add = "mean", rug = TRUE, color = "sex", fill = "sex",palette = c("#00AFBB", "#E7B800")) 带有均值线和边际地毯线的直方图12gghistogram(df, x="weight", add = "mean", rug = TRUE, color = "sex", fill = "sex",palette = c("#00AFBB", "#E7B800")) 箱线图与小提琴图1234#加载数据集ToothGrowthdata("ToothGrowth")df1 &lt;- ToothGrowthhead(df1) 1234567## len supp dose## 1 4.2 VC 0.5## 2 11.5 VC 0.5## 3 7.3 VC 0.5## 4 5.8 VC 0.5## 5 6.4 VC 0.5## 6 10.0 VC 0.5 123p &lt;- ggboxplot(df1, x="dose", y="len", color = "dose", palette = c("#00AFBB", "#E7B800", "#FC4E07"), add = "jitter", shape="dose")#增加了jitter点，点shape由dose映射p 增加不同组间的p-value值，可以自定义需要标注的组间比较123my_comparisons &lt;- list(c("0.5", "1"), c("1", "2"), c("0.5", "2"))p+stat_compare_means(comparisons = my_comparisons)+#不同组间的比较stat_compare_means(label.y = 50) 内有箱线图的小提琴图12345ggviolin(df1, x="dose", y="len", fill = "dose", palette = c("#00AFBB", "#E7B800", "#FC4E07"), add = "boxplot", add.params = list(fill="white"))+ stat_compare_means(comparisons = my_comparisons, label = "p.signif")+#label这里表示选择显著性标记（星号） stat_compare_means(label.y = 50) 条形图12345data("mtcars")df2 &lt;- mtcarsdf2$cyl &lt;- factor(df2$cyl)df2$name &lt;- rownames(df2)#添加一行namehead(df2[, c("name", "wt", "mpg", "cyl")]) 按从小到大顺序绘制条形图（不分组排序）12345ggbarplot(df2, x="name", y="mpg", fill = "cyl", color = "white", palette = "jco",#杂志jco的配色 sort.val = "desc",#下降排序 sort.by.groups=FALSE,#不按组排序 x.text.angle=60) 按组进行排序12345ggbarplot(df2, x="name", y="mpg", fill = "cyl", color = "white", palette = "jco",#杂志jco的配色 sort.val = "asc",#上升排序,区别于desc，具体看图演示 sort.by.groups=TRUE,#按组排序 x.text.angle=90) 偏差图偏差图展示了与参考值之间的偏差123df2$mpg_z &lt;- (df2$mpg-mean(df2$mpg))/sd(df2$mpg)df2$mpg_grp &lt;- factor(ifelse(df2$mpg_z&lt;0, "low", "high"), levels = c("low", "high"))head(df2[, c("name", "wt", "mpg", "mpg_grp", "cyl")]) 绘制排序过的条形图123ggbarplot(df2, x="name", y="mpg_z", fill = "mpg_grp", color = "white", palette = "jco", sort.val = "asc", sort.by.groups = FALSE, x.text.angle=60, ylab = "MPG z-score", xlab = FALSE, legend.title="MPG Group") 坐标轴变换1234ggbarplot(df2, x="name", y="mpg_z", fill = "mpg_grp", color = "white", palette = "jco", sort.val = "desc", sort.by.groups = FALSE, x.text.angle=90, ylab = "MPG z-score", xlab = FALSE, legend.title="MPG Group", rotate=TRUE, ggtheme = theme_minimal()) 点图(Dot charts)棒棒糖图(Lollipop chart)棒棒图可以代替条形图展示数据123ggdotchart(df2, x="name", y="mpg", color = "cyl", palette = c("#00AFBB", "#E7B800", "#FC4E07"), sorting = "ascending", add = "segments", ggtheme = theme_pubr()) 可以自设置各种参数12345ggdotchart(df2, x="name", y="mpg", color = "cyl", palette = c("#00AFBB", "#E7B800", "#FC4E07"), sorting = "descending", add = "segments", rotate = TRUE, group = "cyl", dot.size = 6, label = round(df2$mpg), font.label = list(color="white", size=9, vjust=0.5), ggtheme = theme_pubr()) 偏差图123456ggdotchart(df2, x="name", y="mpg_z", color = "cyl", palette = c("#00AFBB", "#E7B800", "#FC4E07"), sorting = "descending", add = "segment", add.params = list(color="lightgray", size=2), group = "cyl", dot.size = 6, label = round(df2$mpg_z, 1), font.label = list(color="white", size=9, vjust=0.5), ggtheme = theme_pubr())+ geom_line(yintercept=0, linetype=2, color="lightgray") Cleveland点图1234ggdotchart(df2, x="name", y="mpg", color = "cyl", palette = c("#00AFBB", "#E7B800", "#FC4E07"), sorting = "descending", rotate = TRUE, dot.size = 2, y.text.col=TRUE, ggtheme = theme_pubr())+ theme_cleveland() SessionInfo1sessionInfo() 12345678910111213141516171819202122232425262728## R version 3.4.0 (2017-04-21)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 8.1 x64 (build 9600)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] ggpubr_0.1.3 magrittr_1.5 ggplot2_2.2.1## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.11 knitr_1.16 munsell_0.4.3 colorspace_1.3-2## [5] R6_2.2.1 rlang_0.1.1 stringr_1.2.0 plyr_1.8.4 ## [9] dplyr_0.5.0 tools_3.4.0 grid_3.4.0 gtable_0.2.0 ## [13] DBI_0.6-1 htmltools_0.3.6 yaml_2.1.14 lazyeval_0.2.0 ## [17] rprojroot_1.2 digest_0.6.12 assertthat_0.2.0 tibble_1.3.3 ## [21] ggsignif_0.2.0 ggsci_2.4 purrr_0.2.2.2 evaluate_0.10 ## [25] rmarkdown_1.5 labeling_0.3 stringi_1.1.5 compiler_3.4.0 ## [29] scales_0.4.1 backports_1.1.0 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggpubr</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用circlize包绘制circos-plot]]></title>
    <url>%2F2017%2F06%2F25%2F%E7%94%A8circlize%E5%8C%85%E7%BB%98%E5%88%B6circos-plot%2F</url>
    <content type="text"><![CDATA[circlize包circlize包在德国癌症中心的华人博士Zuguang Gu开发的，有兴趣的可以去看看他的Github主页。这个包有两个文档，一个是介绍基本原理的绘制简单圈圈图的，也是本次要介绍的。另外一份文档专门介绍基因组数据绘制圈圈图Genomic Circos Plot,我自己还没看完，下次再介绍。根据我的学习发现这个包与ggplot2很相似，也是先创建一个图层，然后不断的添加图形元素（point、line、bar等），这些简单的图形元素都有circos.这个前缀进行绘制，比如要绘制点，则用circos.points()。具体的下面一一介绍。 用circlize绘制圈圈图 照例，没有安装这个包的先安装：install.packages(&quot;circlize&quot;)或者devtools::install_github(&quot;jokergoo/circlize&quot;)。绘图第一步是先初始化(circos.initialize),接下来绘制track，再添加基本元素。需要提一下的是，由于circlize绘制图是不断叠加的，因此如果我们一大段代码下来我们只能看到最终的图形，这里为了演示每端代码的结果，所以每次我都得初始化以及circlize.clear。 12345library(circlize)# 简单创建一个数据集set.seed(999)n &lt;- 1000a &lt;- data.frame(factors = sample(letters[1:8], n, replace = TRUE), x = rnorm(n), y = runif(n)) 绘制第一个track 1234567891011par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)circos.par(track.height = 0.1)circos.initialize(factors = a$factors, x = a$x) #初始化，factors来控制track数目，初始化里只有x， 没有y。这一步相当于ggplot()circos.trackPlotRegion(factors = a$factors, y = a$y, panel.fun = function(x, y) &#123; circos.axis()&#125;)col &lt;- rep(c("#FF0000", "#00FF00"), 4) #自定义一下颜色# 这里先解释一下，一个track有好几个cell，具体数目由factors决定的，向本数据集中factors有八个，因此绘制一个track，其包含八个cell。含有前缀circos.track的函数会在所有的cel里添加基本元素，而只有前缀circos.的函数可以在特定的track、cell里添加基本元素。具体看下演示。circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5) #所有的cell里都绘制点图circos.text(-1, 0.5, "left", sector.index = "a", track.index = 1) #在track 1中的标记为a的cell里添加textcircos.text(1, 0.5, "right", sector.index = "a")circos.clear() 接下来绘制第二个track circos.trackHist添加柱状图，由于柱状图相对高级一点，因此circos.trackHist会自动创建一个track，无需我们circos.trackPlotRegion进行创建。 12345678910111213par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)circos.par(track.height = 0.1)circos.initialize(factors = a$factors, x = a$x)circos.trackPlotRegion(factors = a$factors, y = a$y, panel.fun = function(x, y) &#123; circos.axis()&#125;)col &lt;- rep(c("#FF0000", "#00FF00"), 4)circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)circos.text(-1, 0.5, "left", sector.index = "a", track.index = 1)circos.text(1, 0.5, "right", sector.index = "a")bg.col &lt;- rep(c("#EFEFEF", "#CCCCCC"), 4)circos.trackHist(a$factors, a$x, bg.col = bg.col, col = NA)circos.clear() 创建第三个track 这里又得提一下，当我们绘制多个track时，我们添加基本元素时要指定添加到哪个track(track.index指定)、哪个cell(sector.index指定)里，如果不指定，那么将默认track是我们刚刚创建的那个。track.index、sector.index等参数可以通过get.cell.meta.data函数获取。 12345678910111213141516171819202122par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)circos.par(track.height = 0.1)circos.initialize(factors = a$factors, x = a$x)circos.trackPlotRegion(factors = a$factors, y = a$y, panel.fun = function(x, y) &#123; circos.axis()&#125;)col &lt;- rep(c("#FF0000", "#00FF00"), 4)circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)circos.text(-1, 0.5, "left", sector.index = "a", track.index = 1)circos.text(1, 0.5, "right", sector.index = "a")bg.col &lt;- rep(c("#EFEFEF", "#CCCCCC"), 4)circos.trackHist(a$factors, a$x, bg.col = bg.col, col = NA)circos.trackPlotRegion(factors = a$factors, x = a$x, y = a$y, panel.fun = function(x, y) &#123; grey = c("#FFFFFF", "#CCCCCC", "#999999") sector.index = get.cell.meta.data("sector.index") #这个是第三个track，因为我们刚刚创建，这里这一步不用也可。 xlim = get.cell.meta.data("xlim") ylim = get.cell.meta.data("ylim") circos.text(mean(xlim), mean(ylim), sector.index) circos.points(x[1:10], y[1:10], col = "red", pch = 16, cex = 0.6) circos.points(x[11:20], y[11:20], col = "blue", cex = 0.6)&#125;)circos.clear() 实际操作中我们常常会更新数据或者想更新图形，这是可以通过circos.updatePlotRegion函数在特定的track、cell里(先删除再添加)update，下面我们将通过circos.updatePlotRegion函数先删除track 2、sector d中的图形元素再添加点图。 123456789101112131415161718192021222324252627282930par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)circos.par(track.height = 0.1)circos.initialize(factors = a$factors, x = a$x)circos.trackPlotRegion(factors = a$factors, y = a$y, panel.fun = function(x, y) &#123; circos.axis()&#125;)col &lt;- rep(c("#FF0000", "#00FF00"), 4)circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)circos.text(-1, 0.5, "left", sector.index = "a", track.index = 1)circos.text(1, 0.5, "right", sector.index = "a")circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)circos.text(-1, 0.5, "left", sector.index = "a", track.index = 1)circos.text(1, 0.5, "right", sector.index = "a")bg.col &lt;- rep(c("#EFEFEF", "#CCCCCC"), 4)circos.trackHist(a$factors, a$x, bg.col = bg.col, col = NA)circos.trackPlotRegion(factors = a$factors, x = a$x, y = a$y, panel.fun = function(x, y) &#123; grey = c("#FFFFFF", "#CCCCCC", "#999999") sector.index = get.cell.meta.data("sector.index") xlim = get.cell.meta.data("xlim") ylim = get.cell.meta.data("ylim") circos.text(mean(xlim), mean(ylim), sector.index)circos.points(x[1:10], y[1:10], col = "red", pch = 16, cex = 0.6) circos.points(x[11:20], y[11:20], col = "blue", cex = 0.6)&#125;)# update第2个track中标记为d的sectorcircos.updatePlotRegion(sector.index = "d", track.index = 2)circos.points(x = -2:2, y = rep(0, 5))xlim &lt;- get.cell.meta.data("xlim")ylim &lt;- get.cell.meta.data("ylim")circos.text(mean(xlim), mean(ylim), "updated")circos.clear() 接下来绘制第四个track 1234567891011121314151617181920212223242526272829303132par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)circos.par(track.height = 0.1)circos.initialize(factors = a$factors, x = a$x)circos.trackPlotRegion(factors = a$factors, y = a$y, panel.fun = function(x, y) &#123; circos.axis()&#125;)col &lt;- rep(c("#FF0000", "#00FF00"), 4)circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)circos.text(-1, 0.5, "left", sector.index = "a", track.index = 1)circos.text(1, 0.5, "right", sector.index = "a")circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)circos.text(-1, 0.5, "left", sector.index = "a", track.index = 1)circos.text(1, 0.5, "right", sector.index = "a")bg.col &lt;- rep(c("#EFEFEF", "#CCCCCC"), 4)circos.trackHist(a$factors, a$x, bg.col = bg.col, col = NA)circos.trackPlotRegion(factors = a$factors, x = a$x, y = a$y, panel.fun = function(x, y) &#123; grey = c("#FFFFFF", "#CCCCCC", "#999999") sector.index = get.cell.meta.data("sector.index") xlim = get.cell.meta.data("xlim") ylim = get.cell.meta.data("ylim") circos.text(mean(xlim), mean(ylim), sector.index) circos.points(x[1:10], y[1:10], col = "red", pch = 16, cex = 0.6) circos.points(x[11:20], y[11:20], col = "blue", cex = 0.6)&#125;)# update第2个track中标记为d的sectorcircos.updatePlotRegion(sector.index = "d", track.index = 2)circos.points(x = -2:2, y = rep(0, 5))xlim &lt;- get.cell.meta.data("xlim")ylim &lt;- get.cell.meta.data("ylim")circos.text(mean(xlim), mean(ylim), "updated")circos.clear()circos.trackPlotRegion(factors = a$factors, y = a$y)circos.trackLines(a$factors[1:100], a$x[1:100], a$y[1:100], type = "h") 接下来添加links，links可以是point到point、point到interval、interval到interval 1234567891011121314151617181920212223242526272829303132333435par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.6)circos.par(track.height = 0.1)circos.initialize(factors = a$factors, x = a$x)circos.trackPlotRegion(factors = a$factors, y = a$y, panel.fun = function(x, y) &#123; circos.axis()&#125;)col &lt;- rep(c("#FF0000", "#00FF00"), 4)circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)circos.text(-1, 0.5, "left", sector.index = "a", track.index = 1)circos.text(1, 0.5, "right", sector.index = "a")circos.trackPoints(a$factors, a$x, a$y, col = col, pch = 16, cex = 0.5)circos.text(-1, 0.5, "left", sector.index = "a", track.index = 1)circos.text(1, 0.5, "right", sector.index = "a")bg.col &lt;- rep(c("#EFEFEF", "#CCCCCC"), 4)circos.trackHist(a$factors, a$x, bg.col = bg.col, col = NA)circos.trackPlotRegion(factors = a$factors, x = a$x, y = a$y, panel.fun = function(x, y) &#123; grey = c("#FFFFFF", "#CCCCCC", "#999999") sector.index = get.cell.meta.data("sector.index") xlim = get.cell.meta.data("xlim") ylim = get.cell.meta.data("ylim")circos.text(mean(xlim), mean(ylim), sector.index) circos.points(x[1:10], y[1:10], col = "red", pch = 16, cex = 0.6) circos.points(x[11:20], y[11:20], col = "blue", cex = 0.6)&#125;)# update第2个track中标记为d的sectorcircos.updatePlotRegion(sector.index = "d", track.index = 2)circos.points(x = -2:2, y = rep(0, 5))xlim &lt;- get.cell.meta.data("xlim")ylim &lt;- get.cell.meta.data("ylim")circos.text(mean(xlim), mean(ylim), "updated")circos.clear()circos.trackPlotRegion(factors = a$factors, y = a$y)circos.trackLines(a$factors[1:100], a$x[1:100], a$y[1:100], type = "h")circos.link("a", 0, "b", 0, h = 0.3) #point to pointcircos.link("c", c(-0.5, 0.5), "d", c(-0.5, 0.5), col = "red", border = NA, h = 0.2) #intreval to intervalcircos.link("e", 0, "g", c(-1, 1), col = "green", border = "black", lwd = 2, lty = 2) #point to interval circlize详述 circlize的绘图规则是初始化(initialize)-创建track-添加图形元素-创建track-添加图形元素-…-circos.clear。具体参数设置以及解释由于内容太多，有兴趣的可以自己参考文档。 我认为比较重要的是要理解track、sector。由于基本所有的图形元素我们都是添加在sector里面，因此就需要指定track.index以及sector.index。接下来就用个例子来讲解一下如何操纵track、sector。 12345678910par(mar = c(1, 1, 1, 1))factors &lt;- letters[1:8]circos.initialize(factors = factors, xlim = c(0, 1)) #初始化# 绘制三个track，并显示具体信息for (i in 1:3) &#123; circos.trackPlotRegion(ylim = c(0, 1))&#125;circos.info(plot = TRUE)# 通过draw.sector()来高亮某一sector，比如a：draw.sector(get.cell.meta.data("cell.start.degree", sector.index = "a"), get.cell.meta.data("cell.end.degree", sector.index = "a"), rou1 = 1, col = "blue")circos.clear() 12345678### 高亮某一track， 比如第一个track：circos.initialize(factors = factors, xlim = c(0, 1))for (i in 1:3) &#123; circos.trackPlotRegion(ylim = c(0, 1))&#125;circos.info(plot = TRUE)draw.sector(0, 360, rou1 = get.cell.meta.data("cell.top.radius", track.index = 1), rou2 = get.cell.meta.data("cell.bottom.radius", track.index = 1), col = "green")circos.clear() 123456789# 高亮某一track某一sector，比如地2、3track中的e、f(sector)：circos.initialize(factors = factors, xlim = c(0, 1))for (i in 1:3) &#123; circos.trackPlotRegion(ylim = c(0, 1))&#125;circos.info(plot = TRUE)draw.sector(get.cell.meta.data("cell.start.degree", sector.index = "e"), get.cell.meta.data("cell.end.degree", sector.index = "f"), get.cell.meta.data("cell.top.radius", track.index = 2), get.cell.meta.data("cell.bottom.radius", track.index = 3), col = "red")circos.clear() #千万别忘了circos.clear，不然下次无法绘图。 放大某一特定区域 123456789101112131415161718192021222324252627df &lt;- data.frame(factors = sample(letters[1:6], 100, replace = TRUE), x = rnorm(100), y = rnorm(100), stringsAsFactors = FALSE)# 放大a，b区域zoom_df &lt;- df %&gt;% dplyr::filter(factors %in% c("a", "b"))zoom_df$factors &lt;- paste0("zoom_", zoom_df$factors)df2 &lt;- rbind(df, zoom_df)xrange &lt;- tapply(df2$x, df2$factors, function(x) max(x) - min(x))normal_sector_index &lt;- unique(df$factors)zoomed_sector_index &lt;- unique(zoom_df$factors)sector.width &lt;- c(xrange[normal_sector_index]/sum(xrange[normal_sector_index]), xrange[zoomed_sector_index]/sum(xrange[zoomed_sector_index]))# 绘图par(mar = c(1, 1, 1, 1))circos.par(start.degree = 90)circos.initialize(df2$factors, x = df2$x, sector.width = sector.width)circos.trackPlotRegion(df2$factors, x = df2$x, y = df2$y, panel.fun = function(x, y) &#123; circos.points(x, y, col = "red", pch = 16, cex = 0.5) xlim = get.cell.meta.data("xlim") ylim = get.cell.meta.data("ylim") sector.index = get.cell.meta.data("sector.index") circos.text(mean(xlim), mean(ylim), sector.index, niceFacing = TRUE)&#125;)# 添加linkscircos.link("a", get.cell.meta.data("cell.xlim", sector.index = "a"), "zoom_a", get.cell.meta.data("cell.xlim", sector.index = "zoom_a"), border = NA, col = "red") circos.clear() 举个栗子 圈圈图+热图+进化树 1234567891011121314151617181920212223242526272829set.seed(1234)data &lt;- matrix(rnorm(100 * 10), nrow = 10, ncol = 100)col &lt;- colorRamp2(c(-2, 0, 2), c("green", "black", "red"))factors &lt;- rep(letters[1:2], times = c(30, 70))data_list &lt;- list(a = data[, factors == "a"], b = data[, factors == "b"])dend_list &lt;- list(a = as.dendrogram(hclust(dist(t(data_list[["a"]])))), b = as.dendrogram(hclust(dist(t(data_list[["b"]])))))circos.par(cell.padding = c(0, 0, 0, 0), gap.degree = 5)circos.initialize(factors = factors, xlim = cbind(c(0, 0), table(factors)))circos.track(ylim = c(0, 10), bg.border = NA, panel.fun = function(x, y) &#123; sector.index = get.cell.meta.data("sector.index") d = data_list[[sector.index]] dend = dend_list[[sector.index]] d2 = d[, order.dendrogram(dend)] col_data = col(d2)nr = nrow(d2)nc = ncol(d2) for (i in 1:nr) &#123; circos.rect(1:nc - 1, rep(nr - i, nc), 1:nc, rep(nr - i + 1, nc),border = col_data[i, ], col = col_data[i, ]) &#125;&#125;)max_height &lt;- max(sapply(dend_list, function(x) attr(x, "height")))circos.track(ylim = c(0, max_height), bg.border = NA, track.height = 0.3,panel.fun = function(x, y) &#123; sector.index = get.cell.meta.data("sector.index")dend = dend_list[[sector.index]]circos.dendrogram(dend, max_height = max_height)&#125;)circos.clear() 多图排列 直接用layout设置 123456789101112131415layout(matrix(1:9, 3, 3))for (i in 1:9) &#123; factors = letters[1:8] par(mar = c(0.5, 0.5, 0.5, 0.5)) circos.par(cell.padding = c(0, 0, 0, 0)) circos.initialize(factors = factors, xlim = c(0, 1)) circos.trackPlotRegion(ylim = c(0, 1), track.height = 0.05, bg.col = rand_color(8), bg.border = NA) # 绘制links for (i in 1:20) &#123;se = sample(letters[1:8], 2) circos.link(se[1], runif(2), se[2], runif(2),col = rand_color(1, transparency = 0.4), border = NA) &#125; circos.clear() sessionInfo 理解circlize包的原理，绘制基因组数据的图形也是一样的。有时间下次介绍(主要是我自己还没看完，看不太懂)。老规矩，给出sessionInfo。1sessionInfo() 1234567891011121314151617181920212223242526272829303132333435## R version 3.4.0 (2017-04-21)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 8.1 x64 (build 9600)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] circlize_0.4.0 BiocInstaller_1.26.0 forcats_0.2.0## [4] stringr_1.2.0 dplyr_0.5.0 purrr_0.2.2.2 ## [7] readr_1.1.1 tidyr_0.6.3 tibble_1.3.1## [10] ggplot2_2.2.1 tidyverse_1.1.1.9000#### loaded via a namespace (and not attached):## [1] shape_1.4.2 clisymbols_1.2.0 reshape2_1.4.2 ## [4] haven_1.0.0 lattice_0.20-35 colorspace_1.3-2## [7] htmltools_0.3.6 yaml_2.1.14 rlang_0.1.1 ## [10] foreign_0.8-68 DBI_0.6-1 modelr_0.1.0## [13] readxl_1.0.0 plyr_1.8.4 munsell_0.4.3 ## [16] gtable_0.2.0 cellranger_1.1.0 rvest_0.3.2 ## [19] GlobalOptions_0.0.12 psych_1.7.5 evaluate_0.10 ## [22] knitr_1.16 parallel_3.4.0 broom_0.4.2 ## [25] Rcpp_0.12.11 scales_0.4.1 backports_1.1.0 ## [28] formatR_1.5 jsonlite_1.4 boxes_0.0.0.9000## [31] mnormt_1.5-5 hms_0.3 digest_0.6.12 ## [34] stringi_1.1.5 grid_3.4.0 rprojroot_1.2## [37] tools_3.4.0 magrittr_1.5 lazyeval_0.2.0 ## [40] crayon_1.3.2.9000 xml2_1.1.1 lubridate_1.6.0 ## [43] assertthat_0.2.0 rmarkdown_1.5 httr_1.2.1 ## [46] rstudioapi_0.6 R6_2.2.1 nlme_3.1-131## [49] compiler_3.4.0 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>circlize</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ggplot2学习笔记系列之利用ggplot2绘制误差棒及显著性标记]]></title>
    <url>%2F2017%2F06%2F25%2Fggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%A9%E7%94%A8ggplot2%E7%BB%98%E5%88%B6%E8%AF%AF%E5%B7%AE%E6%A3%92%E5%8F%8A%E6%98%BE%E8%91%97%E6%80%A7%E6%A0%87%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[绘制带有误差棒的条形图 123456789101112131415library(ggplot2)#创建数据集df &lt;- data.frame(treatment = factor(c(1, 1, 1, 2, 2, 2, 3, 3, 3)), response = c(2, 5, 4, 6, 9, 7, 3, 5, 8), group = factor(c(1, 2, 3, 1, 2, 3, 1, 2, 3)), se = c(0.4, 0.2, 0.4, 0.5, 0.3, 0.2, 0.4, 0.6, 0.7))head(df) #查看数据集## treatment response group se## 1 1 2 1 0.4## 2 1 5 2 0.2## 3 1 4 3 0.4## 4 2 6 1 0.5## 5 2 9 2 0.3## 6 2 7 3 0.2 12345678# 使用geom_errorbar()绘制带有误差棒的条形图# 这里一定要注意position要与`geom_bar()`保持一致，由于系统默认dodge是0.9，# 因此geom_errorbar()里面position需要设置0.9，width设置误差棒的大小ggplot(data = df, aes(x = treatment, y = response, fill = group)) + geom_bar(stat = "identity", position = "dodge") + geom_errorbar(aes(ymax = response + se, ymin = response - se), position = position_dodge(0.9), width = 0.15) + scale_fill_brewer(palette = "Set1") 绘制带有显著性标记的条形图 123456789label &lt;- c("", "*", "**", "", "**", "*", "", "", "*") #这里随便设置的显著性，还有abcdef等显著性标记符号，原理一样，这里不再重复。# 添加显著性标记跟上次讲的添加数据标签是一样的，这里我们假设1是对照ggplot(data = df, aes(x = treatment, y = response, fill = group)) + geom_bar(stat = "identity", position = "dodge") + geom_errorbar(aes(ymax = response + se, ymin = response - se), position = position_dodge(0.9), width = 0.15) + geom_text(aes(y = response + 1.5 * se, label = label, group = group), position = position_dodge(0.9), size = 5, fontface = "bold") + scale_fill_brewer(palette = "Set1") #这里的label就是刚才设置的，group是数据集中的，fontface设置字体。 绘制两条形图中间带有星号的统计图 12345678910111213141516#创建一个简单的数据集Control &lt;- c(2.0,2.5,2.2,2.4,2.1)Treatment &lt;- c(3.0,3.3,3.1,3.2,3.2)mean &lt;- c(mean(Control), mean(Treatment))sd &lt;- c(sd(Control), sd(Treatment))df1 &lt;- data.frame(V=c("Control", "Treatment"), mean=mean, sd=sd)df1$V &lt;- factor(df1$V, levels=c("Control", "Treatment"))#利用geom_segment()绘制图形ggplot(data=df1, aes(x=V, y=mean, fill=V))+ geom_bar(stat = "identity",position = position_dodge(0.9),color="black")+ geom_errorbar(aes(ymax=mean+sd, ymin=mean-sd), width=0.05)+ geom_segment(aes(x=1, y=2.5, xend=1, yend=3.8))+#绘制control端的竖线 geom_segment(aes(x=2, y=3.3, xend=2, yend=3.8))+#绘制treatment端竖线 geom_segment(aes(x=1, y=3.8, xend=1.45, yend=3.8))+ geom_segment(aes(x=1.55, y=3.8, xend=2, yend=3.8))+#绘制两段横线 annotate("text", x=1.5, y=3.8, label="〇", size=5)#annotate函数也可以添加标签 为图形添加标题 图形标题有图标题、坐标轴标题、图例标题等123456p &lt;- ggplot(data = df, aes(x = treatment, y = response, fill = group)) + geom_bar(stat = "identity", position = "dodge") +geom_errorbar(aes(ymax = response + se, ymin = response - se),position = position_dodge(0.9), width = 0.15) + scale_fill_brewer(palette = "Set1")# 利用ggtitle()添加图标题,还有labs（）也可以添加标题，最后会提一下。（有一个问题就是ggtitle()添加的标题总是左对齐）p + ggtitle("利用ggtitle()添加图标题") 1234# 利用xlab()\ylab()添加/修改坐标轴标题p + ggtitle("利用ggtitle()添加图标题") + xlab("不同处理") + ylab("response") #标题的参数修改在theme里，theme是一个很大的函数，几乎可以定义一切，下次有时间会讲解 最后再讲解一下如何将多副图至于一个页面 利用包gridExtra中grid.arrange()函数实现 1234567891011121314151617# 将四幅图放置于一个页面中p &lt;- ggplot(data = df, aes(x = treatment, y = response, fill = group)) + geom_bar(stat = "identity", position = "dodge") + geom_errorbar(aes(ymax = response + se, ymin = response - se), position = position_dodge(0.9), width = 0.15) + scale_fill_brewer(palette = "Set1")p1 &lt;- p + ggtitle("利用ggtitle()添加图标题")p2 &lt;- p + ggtitle("利用ggtitle()添加图标题") + xlab("不同处理") + ylab("response")p3 &lt;- ggplot(data = df, aes(x = treatment, y = response, fill = group)) + geom_bar(stat = "identity", position = "dodge") + geom_errorbar(aes(ymax = response + se, ymin = response - se), position = position_dodge(0.9), width = 0.15) + geom_text(aes(y = response + 1.5 * se, label = label, group = group), position = position_dodge(0.9), size = 5, fontface = "bold") + scale_fill_brewer(palette = "Set1")library(gridExtra) #没有安装此包先用install.packages('gridExtra')安装grid.arrange(p, p1, p2, p3) 上次有人问坐标轴旋转的实现，坐标轴旋转有时是很有用的，下面是我看过的一个例子，用来介绍一下。 1234#先加载他的数据url.world_ports &lt;- url("http://sharpsightlabs.com/wp-content/datasets/world_ports.RData")load(url.world_ports)knitr::kable(df.world_ports[1:5,])#该数据是关于世界上各个港口的数据汇总 12345678library(dplyr) #用于数据操作，与ggplot2一样是R语言必学包#现在绘制条形图(%&gt;%上次说过是管道操作，用于连接各个代码，十分有用)df.world_ports%&gt;%filter(year==2014)%&gt;% #筛选2014年的数据 ggplot(aes(x=reorder(port_label, desc(volume)), y=volume))+ geom_bar(stat = "identity", fill="darkred")+ labs(title="Busiest container ports in the world")+ labs(subtitle = '2014, in order of shipping volume')+ #添加副标题 labs(x = "Port", y = "Shipping\nVolume")+ theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .4))#调整x轴标签，angle=90表示标签旋转90度，从图中可以看出 123456789#现在旋转坐标轴，并筛选排名小于25的港口，并且添加数据标签df.world_ports %&gt;% filter(year==2014, rank&lt;=25) %&gt;% #筛选2014年并且rank小于等于25的数据 ggplot(aes(x=reorder(port, volume), y=volume))+ geom_bar(stat = "identity", fill="darkred")+ labs(title="Busiest container ports in the world")+ labs(subtitle = '2014, in order of shipping volume')+ labs(x = "Port", y = "Shipping\nVolume")+ geom_text(aes(label=volume), hjust=1.2, color="white")+ coord_flip()#旋转坐标轴 两图相比，明显第二幅图好，一是可以添加数据标签，二是不用歪着脖子看。本来打算讲讲图例的但是发现内容太多了，就不讲了，下次吧！ 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ggplot2学习笔记系列之利用ggplot2绘制条形图]]></title>
    <url>%2F2017%2F06%2F25%2Fggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%A9%E7%94%A8ggplot2%E7%BB%98%E5%88%B6%E6%9D%A1%E5%BD%A2%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[简介 条形图可以说是我们最常用的数据可视化方法了，通常用于展示不同分类条件下（在x轴上）某个数值型变量的取值（y轴上）。绘制条形图时需要特别注意的一个细节是条形图的条形高度有时表示的是数据集中变量的频数，有时表示的则是变量本身。本文将会介绍这两类条形图的绘图技巧。 绘制条形图 使用ggplot()函数与geom_bar(stat=&quot;identity&quot;)，绘制条形图，我们将利用gcookbook包中的数据进行绘制。123456#没安装包要先安装包gcookbook、ggplot2以及dplyrlibrary(gcookbook)#加载gcookbook以使用其包含的数据library(ggplot2)#用于可视化library(dplyr)#用于数据处理这里我们调用**gcookbook**里的数据集绘制条形图head(pg_mean)#查看数据集 1234## group weigh 1 ctrl 5.032 2 trt1 4.661 3 trt2 5.526 123ggplot(data=pg_mean, aes(x=group, y=weight))+#将group、weight分别赋值给x、y轴 geom_bar(stat = "identity")#必须将geom_bar()中的stat(统计变换)参数设置为”identity“，即对原始数据集不作任何统计变换，而该参数的默认值为'count'，即观测数量。 当x是连续型（数值型）变量时，条形图略有不同，需要略作调整，具体如下：123456str(BOD)#查看BOD数据集可以发现Time变量是数值型## 'data.frame': 6 obs. of 2 variables: ## $ Time : num 1 2 3 4 5 7## $ demand: num 8.3 10.3 19 16 15.6 19.8## - attr(*, "reference")= chr "A1.4, p. 270" 1ggplot(data=BOD, aes(x=Time, y=demand))+ geom_bar(stat = "identity")#此时Time是数值型 12ggplot(data=BOD, aes(x=factor(Time), y=demand))+ geom_bar(stat = "identity")#将Time转换为因子型（分类/离散变量），仔细比较两图 条形图颜色有两部分：填充颜色（fill）以及边框颜色（color），因此调整条形图颜色要调两部分，具体如下：12ggplot(data=BOD, aes(x=factor(Time), y=demand))+ geom_bar(stat = "identity", fill="blue", color="black")#可以自己设定喜好的颜色 绘制簇状条形图 方法：将分类变量映射到fill参数，运用geom_bar(position=&quot;dodge&quot;)绘制，具体如下：123456789head(cabbage_exp)#查看数据，发现含有两个分类变量：`Cultivar`和`Date`以及一个连续型变量Weight## Cultivar Date Weight sd n se## 1 c39 d16 3.18 0.9566144 10 0.30250803## 2 c39 d20 2.80 0.2788867 10 0.08819171## 3 c39 d21 2.74 0.9834181 10 0.31098410## 4 c52 d16 2.26 0.4452215 10 0.14079141## 5 c52 d20 3.11 0.7908505 10 0.25008887## 6 c52 d21 1.47 0.2110819 10 0.06674995 12ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+#分别将Date与Cultivar映射给x和fill geom_bar(stat = "identity", position = "dodge")#position = "dodge"表示条形图分开不重叠(簇形图)，默认的为stack（堆叠式）,还有百分比堆叠式(fill) 12ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+geom_bar(stat = "identity", position = "stack")#堆叠式 12ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+ geom_bar(stat = "identity", position = "fill")#百分比堆叠式 设置颜色或者调用调色板 123ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+ geom_bar(stat = "identity", position = "dodge", color="black")+ scale_fill_brewer(palette = "Set1")#Set1为调色板，后期将会专门讲解Color设置 123ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+ geom_bar(stat = "identity", position = "dodge", color="black")+ scale_fill_manual(values = c("darkred", "purple"))#自设置颜色 绘制频数条形图 123456789101112131415head(diamonds,n=10)#查看前10行数据## # A tibble: 10 × 10## carat cut color clarity depth table price x y z## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;## 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43## 2 0.21 Premium E SI1 59.8 61 326 3.89 3.84 2.31## 3 0.23 Good E VS1 56.9 65 327 4.05 4.07 2.31## 4 0.29 Premium I VS2 62.4 58 334 4.20 4.23 2.63## 5 0.31 Good J SI2 63.3 58 335 4.34 4.35 2.75## 6 0.24 Very Good J VVS2 62.8 57 336 3.94 3.96 2.48## 7 0.24 Very Good I VVS1 62.3 57 336 3.95 3.98 2.47## 8 0.26 Very Good H SI1 61.9 55 337 4.07 4.11 2.53## 9 0.22 Fair E VS2 65.1 61 337 3.87 3.78 2.49## 10 0.23 Very Good H VS1 59.4 61 338 4.00 4.05 2.39 12ggplot(diamonds, aes(x=cut))+#此时不要映射任何变量到y geom_bar()#等价于geom_bar(stat="bin") 绘制y轴正负轴都有数据的条形图 12345678910111213#首先先创建一下数据集set.seed(1111)#此命令保证数据结果可以重现在任何电脑上x &lt;- 1980+1:36#赋值xy &lt;- round(100*rnorm(36))#赋值ymydata &lt;- data.frame(x=x, y=y)#创建数据集mydatahead(mydata)#查看数据集## x y## 1 1981 -9## 2 1982 132## 3 1983 64## 4 1984 117## 5 1985 12## 6 1986 -293 12345678910mydata &lt;- mydata%&gt;%#%&gt;%管道操作，结合dplyr为数据处理神器 mutate(judge=ifelse(y&gt;=0,"Yes", "No"))#创建judge变量，将y正负分类head(mydata)#查看数据## x y judge## 1 1981 -9 No## 2 1982 132 Yes## 3 1983 64 Yes## 4 1984 117 Yes## 5 1985 12 Yes## 6 1986 -293 No 1234接下来绘制条形图ggplot(data=mydata, aes(x=x, y=y, fill=judge))+ geom_bar(stat = "identity",position = "identity")+#这里position="identity"可以避免系统对负值绘制条形图发出警告信息 scale_fill_manual(values = c("purple", "blue"), guide=FALSE)+xlab("Year")#guide=FALSE表示不要图例,x轴标题为Year 通过width来调整条形宽度以及条形距离 1234567891011head(diamonds)## # A tibble: 6 × 10## carat cut color clarity depth table price x y z## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;## 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43## 2 0.21 Premium E SI1 59.8 61 326 3.89 3.84 2.31## 3 0.23 Good E VS1 56.9 65 327 4.05 4.07 2.31## 4 0.29 Premium I VS2 62.4 58 334 4.20 4.23 2.63## 5 0.31 Good J SI2 63.3 58 335 4.34 4.35 2.75## 6 0.24 Very Good J VVS2 62.8 57 336 3.94 3.96 2.48 123ggplot(data=diamonds, aes(x=color, y=price, fill=cut))+ geom_bar(stat = "identity", width = 0.6, position = position_dodge(0.8))+#调整条形宽度以及条形距离 scale_fill_brewer(palette = "Set1") geom_text()添加数据标签 使用geom_text()为条形图添加标签，需要分别指定一个变量映射给x、y以及标签（label），vjust和hjust分别调整标签的竖直和水平位置。1234### 标签在条形图顶端下方ggplot(data=cabbage_exp, aes(x=interaction(Date, Cultivar), y=Weight))+ geom_bar(stat = "identity")+ geom_text(aes(label=Weight), vjust=1.5, color="white") 1234### 标签在条形图顶端上方ggplot(data=cabbage_exp, aes(x=interaction(Date, Cultivar), y=Weight))+ geom_bar(stat = "identity")+ geom_text(aes(label=Weight), vjust=-0.3, color="red")#可以通过color、size等自行调整标签属性 12345堆叠图也一样ggplot(data=cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar))+ geom_bar(stat="identity", position = "stack")+ geom_text(aes(label=Weight), size=5, color="black", vjust=3.5, hjust=0.5, position = position_stack())#这里的position要与geom_bar()里面的保持一致，各种参数多调整才能效果最佳 下次将重点讲解如何添加误差棒、显著性标记、坐标轴标题、图标题以及部分小技巧等等 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ggplot2学习笔记系列之主题（theme）设置]]></title>
    <url>%2F2017%2F06%2F25%2Fggplot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%BB%E9%A2%98%EF%BC%88theme%EF%BC%89%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[上次提了下theme(),本文将专门讲解一下。凡是与数据无关的图形设置可以归为主题类，ggplot2中主题设置十分多，根本不可能讲解完，只能稍微讲点皮毛，灵活运用才是关键，本文只是总体上略作介绍。正如R语言大神Hadley Wickham所讲的，ggplot2只是提供了一个平台，可以根据自己的需要无限创造。理论上来讲，只要能想到的图形，ggplot2都能实现。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253library(ggplot2)#我们先来看看ggplot2默认的主题设置函数theme_gray()的源代码theme_gray#函数名不加括号可获得函数源代码## function (base_size = 11, base_family = "") ## &#123;## half_line &lt;- base_size/2## theme(line = element_line(colour = "black", size = 0.5, linetype = 1, ## lineend = "butt"), rect = element_rect(fill = "white", ## colour = "black", size = 0.5, linetype = 1), text = element_text(family = base_family, ## face = "plain", colour = "black", size = base_size, lineheight = 0.9, ## hjust = 0.5, vjust = 0.5, angle = 0, margin = margin(), ## debug = FALSE), axis.line = element_blank(), axis.line.x = NULL, ## axis.line.y = NULL, axis.text = element_text(size = rel(0.8),## colour = "grey30"), axis.text.x = element_text(margin = margin(t = 0.8 * ## half_line/2), vjust = 1), axis.text.x.top = element_text(margin = margin(b = 0.8 * ## half_line/2), vjust = 0), axis.text.y = element_text(margin = margin(r = 0.8 * ## half_line/2), hjust = 1), axis.text.y.right = element_text(margin = margin(l = 0.8 * ## half_line/2), hjust = 0), axis.ticks = element_line(colour = "grey20"), ## axis.ticks.length = unit(half_line/2, "pt"), axis.title.x = element_text(margin = margin(t = half_line), ## vjust = 1), axis.title.x.top = element_text(margin = margin(b = half_line), ## vjust = 0), axis.title.y = element_text(angle = 90, ## margin = margin(r = half_line), vjust = 1), axis.title.y.right = element_text(angle = -90, ## margin = margin(l = half_line), vjust = 0), legend.background = element_rect(colour = NA), ## legend.spacing = unit(0.4, "cm"), legend.spacing.x = NULL, ## legend.spacing.y = NULL, legend.margin = margin(0.2, ## 0.2, 0.2, 0.2, "cm"), legend.key = element_rect(fill = "grey95", ## colour = "white"), legend.key.size = unit(1.2, "lines"), ## legend.key.height = NULL, legend.key.width = NULL, legend.text = element_text(size = rel(0.8)), ## legend.text.align = NULL, legend.title = element_text(hjust = 0), ## legend.title.align = NULL, legend.position = "right", ## legend.direction = NULL, legend.justification = "center", ## legend.box = NULL, legend.box.margin = margin(0, 0, 0, ## 0, "cm"), legend.box.background = element_blank(),## legend.box.spacing = unit(0.4, "cm"), panel.background = element_rect(fill = "grey92", ## colour = NA), panel.border = element_blank(), panel.grid.major = element_line(colour = "white"), ## panel.grid.minor = element_line(colour = "white", size = 0.25), ## panel.spacing = unit(half_line, "pt"), panel.spacing.x = NULL, ## panel.spacing.y = NULL, panel.ontop = FALSE, strip.background = element_rect(fill = "grey85", ## colour = NA), strip.text = element_text(colour = "grey10", ## size = rel(0.8)), strip.text.x = element_text(margin = margin(t = half_line, ## b = half_line)), strip.text.y = element_text(angle = -90, ## margin = margin(l = half_line, r = half_line)), strip.placement = "inside", ## strip.placement.x = NULL, strip.placement.y = NULL, strip.switch.pad.grid = unit(0.1, ## "cm"), strip.switch.pad.wrap = unit(0.1, "cm"), plot.background = element_rect(colour = "white"), ## plot.title = element_text(size = rel(1.2), hjust = 0, ## vjust = 1, margin = margin(b = half_line * 1.2)), ## plot.subtitle = element_text(size = rel(0.9), hjust = 0, ## vjust = 1, margin = margin(b = half_line * 0.9)),## plot.caption = element_text(size = rel(0.9), hjust = 1, ## vjust = 1, margin = margin(t = half_line * 0.9)),## plot.margin = margin(half_line, half_line, half_line, ## half_line), complete = TRUE)## &#125;## &lt;environment: namespace:ggplot2&gt; 可以看出，源代码主要是theme()函数，设置也很简单：theme(..., complete = FALSE),但是其内含的参数则十分多。 几乎所有元素在theme()里都使用element_line，element_rect，element_text和element_blank函数设置. 下面就举例稍微讲解一下12345#利用数据集mtcars演示head(mtcars)#先创建p图层p&lt;- ggplot(data=mtcars, aes(x=wt, y=mpg))+geom_point(aes(color=factor(cyl)))#先试试图例修改p+theme(legend.position = "none")#无图例 1p+theme(legend.position = "bottom")#图例在底部 12#也可以自定义p+theme(legend.position = c(0.5, 0.7)) 12#为图例加边界p+theme(legend.background = element_rect(color="red")) 12#或者为图例中的每个元素进行设置，如加边界p+theme(legend.key =element_rect(color="red")) 12#进行填充p+theme(legend.key = element_rect(fill="yellow")) 12#图例内容字体大小、颜色、角度等设置p+theme(legend.text = element_text(size=25, color="darkred", angle=45)) 12#为图例标题设置字体、颜色、大小等p+theme(legend.title = element_text(face="italic", size=25, color="red")) 接下来是坐标以及网格等的自定义12#修改背景颜色p+theme(panel.background = element_rect(fill="black")) 12#修改边界线类型、颜色p+theme(panel.border = element_rect(linetype = "dashed", color="red")) 1#修改网格线p+theme(panel.grid.major = element_line(color="blue", size= 3)) 1p+theme(panel.grid.minor = element_line(linetype = "dotted", color="red")) 还可以修改x、y轴等，这里懒得讲了，有兴趣的可以自己捣鼓捣鼓 了解theme之后就可以自己定义自己的主题，以后作图就直接像格式刷一样就行123456789101112131415161718192021#下面是我比较常用的主题，画图时刷一下就行了windowsFonts(CA=windowsFont("Calibri"))mytheme &lt;- theme_bw()+theme(legend.position = 'top', panel.border = element_blank(), panel.grid.major = element_line(linetype = 'dashed'), panel.grid.minor = element_blank(), legend.text = element_text(size=9,color='#003087',family = "CA"), plot.title = element_text(size=15,color="#003087",family = "CA"), legend.key = element_blank(), axis.text = element_text(size=10,color='#003087',family = "CA"), strip.text = element_text(size=12,color="#EF0808",family = "CA"), strip.background = element_blank())pie_theme &lt;- mytheme+theme(axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), panel.grid.major = element_blank())myline_blue &lt;- geom_line(color="#085A9C", size=2)myline_red &lt;- geom_line(color="#EF0808",size=2)myarea &lt;- geom_area(color=NA,fill="#003087",alpha=0.2)mypoint &lt;- geom_point(size=3,shape=21,color="#003087",fill="white")mybar &lt;- geom_bar(fill="#0C8DC4",stat = "identity")mycolor_3 &lt;- scale_fill_manual(values = c("#085A9C","#EF0808","#526373"))mycolor_7 &lt;- scale_fill_manual(values=c ("#085A9C","#EF0808","#526373","#FFFFE7","#FF9418","#219431","#9C52AD"))mycolor_line_7 &lt;- scale_color_manual(values=c ("#085A9C","#EF0808","#526373","#FFFFE7","#FF9418","#219431","#9C52AD")) 1234567891011121314151617181920#可以来刷一刷#随便建个数据集x &lt;-rep(1:5, each = 3)y &lt;-rep(c('A','B','C'),times = 5)set.seed(1111)z &lt;-round(runif(min = 10, max = 30, n = 15))df &lt;-data.frame(x = x, y = y, z = z)head(df)## x y z## 1 1 A 19## 2 1 B 18## 3 1 C 28## 4 2 A 13## 5 2 B 25## 6 2 C 30#柱形图(p1 &lt;- ggplot(data=df, aes(x=factor(x), y=z, fill=y))+geom_bar(stat = "identity", position = "dodge")+ggtitle("自定义主题theme并应用实践"))+xlab("随便定义了个x")+ylab("随机数") 1p1+mytheme 1p1+mytheme+mycolor_7 还有线图、饼图等有兴趣的也可以自己刷一刷，你会发现ggplot2的魅力所在就是它拥有无穷的可能性。 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言学习笔记之聚类分析]]></title>
    <url>%2F2017%2F06%2F25%2FR%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[使用k-means聚类所需的包： factoextra cluster 加载包12library(factoextra)library(cluster) 数据准备使用内置的R数据集USArrests123456#load the datasetdata("USArrests")#remove any missing value (i.e, NA values for not available)#That might be present in the dataUSArrests &lt;- na.omit(USArrests)#view the first 6 rows of the datahead(USArrests, n=6) 在此数据集中，列是变量，行是观测值在聚类之前我们可以先进行一些必要的数据检查即数据描述性统计，如平均值、标准差等1234567desc_stats &lt;- data.frame( Min=apply(USArrests, 2, min),#minimumMed=apply(USArrests, 2, median),#median Mean=apply(USArrests, 2, mean),#mean SD=apply(USArrests, 2, sd),#Standard deviation Max=apply(USArrests, 2, max)#maximum)desc_stats &lt;- round(desc_stats, 1)#保留小数点后一位head(desc_stats) 变量有很大的方差及均值时需进行标准化1df &lt;- scale(USArrests) 数据集群性评估使用get_clust_tendency()计算Hopkins统计量123res &lt;- get_clust_tendency(df, 40, graph = TRUE)res$hopkins_stat## [1] 0.3440875 12#Visualize the dissimilarity matrixres$plot Hopkins统计量的值&lt;0.5，表明数据是高度可聚合的。另外，从图中也可以看出数据可聚合。 估计聚合簇数由于k均值聚类需要指定要生成的聚类数量，因此我们将使用函数clusGap()来计算用于估计最优聚类数。函数fviz_gap_stat()用于可视化。12345set.seed(123)## Compute the gap statisticgap_stat &lt;- clusGap(df, FUN = kmeans, nstart = 25, K.max = 10, B = 500) # Plot the resultfviz_gap_stat(gap_stat) 图中显示最佳为聚成四类（k=4） 进行聚类123set.seed(123)km.res &lt;- kmeans(df, 4, nstart = 25)head(km.res$cluster, 20) 12# Visualize clusters using factoextrafviz_cluster(km.res, USArrests) 检查cluster silhouette图 Recall that the silhouette measures (SiSi) how similar an object ii is to the the other objects in its own cluster versus those in the neighbor cluster. SiSi values range from 1 to - 1: A value of SiSi close to 1 indicates that the object is well clustered. In the other words, the object ii is similar to the other objects in its group. A value of SiSi close to -1 indicates that the object is poorly clustered, and that assignment to some other cluster would probably improve the overall results.123sil &lt;- silhouette(km.res$cluster, dist(df))rownames(sil) &lt;- rownames(USArrests)head(sil[, 1:3]) 12#Visualize fviz_silhouette(sil) 图中可以看出有负值，可以通过函数silhouette()确定是哪个观测值1234neg_sil_index &lt;- which(sil[, "sil_width"] &lt; 0)sil[neg_sil_index, , drop = FALSE]## cluster neighbor sil_width## Missouri 3 2 -0.07318144 eclust():增强的聚类分析 与其他聚类分析包相比，eclust()有以下优点： 简化了聚类分析的工作流程 可以用于计算层次聚类和分区聚类 eclust()自动计算最佳聚类簇数。 自动提供Silhouette plot 可以结合ggplot2绘制优美的图形 使用eclust()的K均值聚类12# Compute k-meansres.km &lt;- eclust(df, "kmeans") 12# Gap statistic plotfviz_gap_stat(res.km$gap_stat) 123456# Silhouette plotfviz_silhouette(res.km)## cluster size ave.sil.width## 1 1 13 0.31## 2 2 29 0.38## 3 3 8 0.39 使用eclust（）的层次聚类123# Enhanced hierarchical clusteringres.hc &lt;- eclust(df, "hclust") # compute hclustfviz_dend(res.hc, rect = TRUE) # dendrogam 123456#下面的R代码生成Silhouette plot和分层聚类散点图。fviz_silhouette(res.hc) # silhouette plot## cluster size ave.sil.width## 1 1 19 0.26## 2 2 19 0.28## 3 3 12 0.43 1fviz_cluster(res.hc) # scatter plot Infos This analysis has been performed using R software (R version 3.3.2) 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>Cluster analysis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言学习笔记之相关性矩阵分析及其可视化]]></title>
    <url>%2F2017%2F06%2F25%2FR%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%9B%B8%E5%85%B3%E6%80%A7%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E5%8F%8A%E5%85%B6%E5%8F%AF%E8%A7%86%E5%8C%96%2F</url>
    <content type="text"><![CDATA[计算相关矩阵 R内置函数cor()可以用来计算相关系数：cor(x, method = c(&quot;pearson&quot;, &quot;kendall&quot;, &quot;spearman&quot;))，如果数据有缺失值，用cor(x, method = &quot;pearson&quot;, use = &quot;complete.obs&quot;)。 导入数据 如果数据格式是txt，用my_data &lt;- read.delim(file.choose()) csv则用my_data &lt;- read.csv(file.choose())导入。这里我们利用R内置数据集mtcars。 123data(mtcars)#加载数据集mydata &lt;- mtcars[, c(1,3,4,5,6,7)]head(mydata, 6)#查看数据前6行 计算相关系数矩阵 12res &lt;- cor(mydata)round(res, 2)#保留两位小数 cor()只能计算出相关系数，无法给出显著性水平p-value,Hmisc包里的rcorr()函数能够同时给出相关系数以及显著性水平p-value。rcorr(x, type = c(“pearson”,“spearman”))。 The output of the function rcorr() is a list containing the following elements : - r : the correlation matrix - n : the matrix of the number of observations used in analyzing each pair of variables - P : the p-values corresponding to the significance levels of correlations. 123library(Hmisc)#加载包res2 &lt;- rcorr(as.matrix(mydata))res2 12#可以用res2$r、res2$P来提取相关系数以及显著性p-valueres2$r 1res2$P 如何将相关系数以及显著性水平p-value整合进一个矩阵内，可以自定义一个函数flattenCorrMatrix。 12345678910111213# ++++++++++++++++++++++++++++# flattenCorrMatrix# ++++++++++++++++++++++++++++# cormat : matrix of the correlation coefficients# pmat : matrix of the correlation p-valuesflattenCorrMatrix &lt;- function(cormat, pmat) &#123;ut &lt;- upper.tri(cormat) data.frame( row = rownames(cormat)[row(cormat)[ut]], column = rownames(cormat)[col(cormat)[ut]], cor =(cormat)[ut], p = pmat[ut] )&#125;举个栗子---res3 &lt;- rcorr(as.matrix(mtcars[,1:7]))flattenCorrMatrix(res3$r, res3$P) 可视化相关系数矩阵 有不同的方法来可视化，主要有下面四种： symnum() function corrplot() function to plot a correlogram scatter plots heatmap symnum() function主要用法：12symnum(x, cutpoints = c(0.3, 0.6, 0.8, 0.9, 0.95), symbols = c(" “,”.“,”,“,”+“,”*“,”B“), abbr.colnames = TRUE) #很好理解，0-0.3用空格表示， 0.3-0.6用.表示， 以此类推。 举个栗子1symnum(res, abbr.colnames = FALSE)#abbr.colnames用来控制列名 corrplot() function to plot a correlogram这个函数来自于包corrplot(),通过颜色深浅来显著相关程度。参数主要有： type: “upper”, “lower”, “full”,显示上三角还是下三角还是全部 order:用什么方法，这里是hclust tl.col (for text label color) and tl.srt (for text label string rotation) :控制文本颜色以及旋转角度12library(corrplot)#先加载包corrplot(res, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45) 也可以结合显著性绘制12# Insignificant correlations are leaved blankcorrplot(res2$r, type="upper", order="hclust", p.mat = res2$P, sig.level = 0.01, insig = "blank") Use chart.Correlation(): Draw scatter plotschart.Correlation()来自于包PerformanceAnalytics12library(PerformanceAnalytics)#加载包chart.Correlation(mydata, histogram=TRUE, pch=19) 解释一下上图： 对角线上显示的是分布图 左下部显示的是具有拟合线的双变量散点图 右上部显示的是相关系数以及显著性水平 heatmap()12col&lt;- colorRampPalette(c("blue", "white", "red"))(20)#调用颜色版自定义颜色heatmap(x = res, col = col, symm = TRUE)#symm表示是否对称 联系方式：wechat: yt056410Email: tyan@zju.edu.cnQQ: 1051927088GitHub: https://github.com/YTLogos简书: http://www.jianshu.com/u/bd001545cf0b博客: https://ytlogos.github.io/ 个人简介：严涛浙江大学作物遗传育种在读研究生（生物信息学方向）伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>corrplot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化学习笔记之相关矩阵可视化包ggcorrplot]]></title>
    <url>%2F2017%2F06%2F25%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%9B%B8%E5%85%B3%E7%9F%A9%E9%98%B5%E5%8F%AF%E8%A7%86%E5%8C%96%E5%8C%85ggcorrplot%2F</url>
    <content type="text"><![CDATA[基于ggplot2包以及corrplot包的相关矩阵可视化包ggcorrplot，ggcorrplot包提供对相关矩阵重排序以及在相关图中展示显著性水平的方法，同时也能计算相关性p-value 安装方法就不提了，不懂的可以浏览我以前的文章 12345library(ggcorrplot)#计算相关矩阵(cor()计算结果不提供p-value)data("mtcars")corr &lt;- round(cor(mtcars), 1)head(corr[, 1:6]) 123#用ggcorrplot包提供的函数cor_pmat()p.mat &lt;- cor_pmat(mtcars)head(p.mat[, 1:4]) 可视化相关性矩阵1ggcorrplot(corr)#method默认为square 12#方法为circleggcorrplot(corr, method = "circle") 12#重排矩阵，使用分等级聚类ggcorrplot(corr, hc.order = TRUE, outline.color = "white") 12#控制矩阵形状ggcorrplot(corr, hc.order = TRUE, type = "lower", outline.color = "white")#下三角形 12#上三角形ggcorrplot(corr, hc.order = TRUE, type = "upper", outline.color = "white") 123#更改颜色以及主题ggcorrplot(corr, hc.order = TRUE, type = "lower", outline.color = "white", ggtheme = ggplot2::theme_gray, colors = c("#6D9EC1", "white", "#E46726")) 12#添加相关系数ggcorrplot(corr, hc.order = TRUE, type = "lower", lab = TRUE) 12#增加显著性水平，不显著的话就不添加了ggcorrplot(corr, hc.order = TRUE, type = "lower", p.mat = p.mat) 12#将不显著的色块设置成空白ggcorrplot(corr, p.mat = p.mat, hc.order=TRUE, type = "lower", insig = "blank") 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>visualization</tag>
        <tag>ggcorrplot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化学习笔记之添加p-value和显著性标记]]></title>
    <url>%2F2017%2F06%2F25%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B7%BB%E5%8A%A0p-value%E5%92%8C%E6%98%BE%E8%91%97%E6%80%A7%E6%A0%87%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[上篇文章中提了一下如何通过ggpubr包为ggplot图添加p-value以及显著性标记,本文将详细介绍。利用数据集ToothGrowth进行演示 12345#先加载包library(ggpubr)#加载数据集ToothGrowthdata(&quot;ToothGrowth&quot;)head(ToothGrowth) 1234567## len supp dose## 1 4.2 VC 0.5## 2 11.5 VC 0.5## 3 7.3 VC 0.5## 4 5.8 VC 0.5## 5 6.4 VC 0.5## 6 10.0 VC 0.5 比较方法 R中常用的比较方法主要有下面几种： 方法 R函数 描述 T-test t.test() 比较两组(参数) Wilcoxon test wilcox.test() 比较两组(非参数) ANOVA aov()或anova() 比较多组(参数) Kruskal-Wallis kruskal.test() 比较多组(非参数) 各种比较方法后续有时间一一讲解。 添加p-value 主要利用ggpubr包中的两个函数： compare_means():可以进行一组或多组间的比较 stat_compare_mean():自动添加p-value、显著性标记到ggplot图中 compare_means()函数该函数主要用用法如下： 12compare_means(formula, data, method = "wilcox.test", paired = FALSE, group.by = NULL, ref.group = NULL, ...) 注释： formula:形如x~group，其中x是数值型变量，group是因子，可以是一个或者多个 data：数据集 method:比较的方法，默认为&quot;wilcox.test&quot;, 其他可选方法为：&quot;t.test&quot;、&quot;anova&quot;、&quot;kruskal.test&quot; paired:是否要进行paired test(TRUE or FALSE) group_by: 比较时是否要进行分组 ref.group: 是否需要指定参考组 stat_compare_means()函数主要用法：12stat_compare_means(mapping = NULL, comparisons = NULL hide.ns = FALSE, label = NULL, label.x = NULL, label.y = NULL, ...) 注释： mapping:由aes()创建的一套美学映射 comparisons:指定需要进行比较以及添加p-value、显著性标记的组 hide.ns:是否要显示显著性标记ns label:显著性标记的类型，可选项为：p.signif(显著性标记)、p.format(显示p-value) label.x、label.y:显著性标签调整 …:其他参数 比较独立的两组 1compare_means(len~supp, data=ToothGrowth) 结果解释： .y:测试中使用的y变量 p:p-value p.adj:调整后的p-value。默认为p.adjust.method=&quot;holm&quot; p.format:四舍五入后的p-value p.signif:显著性水平 method:用于统计检验的方法##绘制箱线图12p &lt;- ggboxplot(ToothGrowth, x="supp", y="len", color = "supp", palette = "jco", add = "jitter")#添加p-valuep+stat_compare_means() 12#使用其他统计检验方法p+stat_compare_means(method = "t.test") 上述显著性标记可以通过label.x、label.y、hjust及vjust来调整显著性标记可以通过aes()映射来更改： aes(label=..p.format..)或aes(lebel=paste0(&quot;p=&quot;,..p.format..)):只显示p-value，不显示统计检验方法 aes(label=..p.signif..):仅显示显著性水平 aes(label=paste0(..method..,&quot;\n&quot;, &quot;p=&quot;,..p.format..)):p-value与显著性水平分行显示 举个栗子：1p+stat_compare_means(aes(label=..p.signif..), label.x = 1.5, label.y = 40) 也可以将标签指定为字符向量，不要映射，只需将p.signif两端的..去掉即可1p+stat_compare_means(label = "p.signif", label.x = 1.5, label.y = 40) 比较两个paired sample 1compare_means(len~supp, data=ToothGrowth, paired = TRUE) 利用ggpaired()进行可视化 12ggpaired(ToothGrowth, x="supp", y="len", color = "supp", line.color = "gray", line.size = 0.4, palette = "jco")+ stat_compare_means(paired = TRUE) 多组比较 Global test1compare_means(len~dose, data=ToothGrowth, method = "anova") 可视化 12ggboxplot(ToothGrowth, x="dose", y="len", color = "dose", palette = "jco")+stat_compare_means() 123#使用其他的方法ggboxplot(ToothGrowth, x="dose", y="len", color = "dose", palette = "jco")+ stat_compare_means(method = "anova") Pairwise comparisons:如果分组变量中包含两个以上的水平，那么会自动进行pairwise test,默认方法为”wilcox.test” 1compare_means(len~dose, data=ToothGrowth) 12345#可以指定比较哪些组my_comparisons &lt;- list(c("0.5", "1"), c("1", "2"), c("0.5", "2"))ggboxplot(ToothGrowth, x="dose", y="len", color = "dose",palette = "jco")+stat_compare_means(comparisons=my_comparisons)+ # Add pairwise comparisons p-value stat_compare_means(label.y = 50) # Add global p-value 可以通过修改参数label.y来更改标签的位置123ggboxplot(ToothGrowth, x="dose", y="len", color = "dose",palette = "jco")+stat_compare_means(comparisons=my_comparisons, label.y = c(29, 35, 40))+ # Add pairwise comparisons p-value stat_compare_means(label.y = 45) # Add global p-value 至于通过添加线条来连接比较的两组，这一功能已由包ggsignif实现123##设定参考组compare_means(len~dose, data=ToothGrowth, ref.group = "0.5", #以dose=0.5组为参考组 method = "t.test" ) 1234#可视化ggboxplot(ToothGrowth, x="dose", y="len", color = "dose", palette = "jco")+ stat_compare_means(method = "anova", label.y = 40)+ # Add global p-valuestat_compare_means(label = "p.signif", method = "t.test", ref.group = "0.5") # Pairwise comparison against reference 参考组也可以设置为.all.即所有的平均值1compare_means(len~dose, data=ToothGrowth, ref.group = ".all.", method = "t.test") 12345#可视化ggboxplot(ToothGrowth, x="dose", y="len", color = "dose", palette = "jco")+stat_compare_means(method = "anova", label.y = 40)+# Add global p-valuestat_compare_means(label = "p.signif", method = "t.test", ref.group = ".all.")#Pairwise comparison against all 接下来利用survminer包中的数据集myeloma来讲解一下为什么有时候我们需要将ref.group设置为.all.123library(survminer)#没安装的先安装再加载data("myeloma")head(myeloma) 我们将根据患者的分组来绘制DEPDC1基因的表达谱，看不同组之间是否存在显著性的差异，我们可以在7组之间进行比较，但是这样的话组间比较的组合就太多了，因此我们可以将7组中每一组与全部平均值进行比较，看看DEPDC1基因在不同的组中是否过表达还是低表达。 1compare_means(DEPDC1~molecular_group, data = myeloma, ref.group = ".all.", method = "t.test") 1234567#可视化DEPDC1基因表达谱ggboxplot(myeloma, x="molecular_group", y="DEPDC1", color = "molecular_group", add = "jitter", legend="none")+ rotate_x_text(angle = 45)+ geom_hline(yintercept = mean(myeloma$DEPDC1), linetype=2)+# Add horizontal line at base mean stat_compare_means(method = "anova", label.y = 1600)+ # Add global annova p-value stat_compare_means(label = "p.signif", method = "t.test", ref.group = ".all.")# Pairwise comparison against all 从图中可以看出，DEPDC1基因在Proliferation组中显著性地过表达，而在Hyperdiploid和Low bone disease显著性地低表达 我们也可以将非显著性标记ns去掉，只需要将参数hide.ns=TRUE123456ggboxplot(myeloma, x="molecular_group", y="DEPDC1", color = "molecular_group", add = "jitter", legend="none")+rotate_x_text(angle = 45)+ geom_hline(yintercept = mean(myeloma$DEPDC1), linetype=2)+# Add horizontal line at base mean stat_compare_means(method = "anova", label.y = 1600)+ # Add global annova p-value stat_compare_means(label = "p.signif", method = "t.test", ref.group = ".all.", hide.ns = TRUE)# Pairwise comparison against all 多个分组变量 按另一个变量进行分组之后进行统计检验，比如按变量dose进行分组：1compare_means(len~supp, data=ToothGrowth, group.by = "dose") 12345#可视化p &lt;- ggboxplot(ToothGrowth, x="supp", y="len", color = "supp", palette = "jco", add = "jitter", facet.by = "dose", short.panel.labs = FALSE)#按dose进行分面#label只绘制p-valuep+stat_compare_means(label = "p.format") 12#label绘制显著性水平p+stat_compare_means(label = "p.signif", label.x = 1.5) 1234#将所有箱线图绘制在一个panel中p &lt;- ggboxplot(ToothGrowth, x="dose", y="len", color = "supp", palette = "jco", add = "jitter")p+stat_compare_means(aes(group=supp)) 12#只显示p-valuep+stat_compare_means(aes(group=supp), label = "p.format") 12#显示显著性水平p+stat_compare_means(aes(group=supp), label = "p.signif") 12进行paired sample检验compare_means(len~supp, data=ToothGrowth, group.by = "dose", paired = TRUE) 123456#可视化p &lt;- ggpaired(ToothGrowth, x="supp", y="len", color = "supp", palette = "jco", line.color="gray", line.size=0.4, facet.by = "dose", short.panel.labs = FALSE)#按dose分面#只显示p-valuep+stat_compare_means(label = "p.format", paired = TRUE) 其他图形条形图与线图（一个分组变量）1234#有误差棒的条形图，实际上我以前的文章里有纯粹用ggplot2实现ggbarplot(ToothGrowth, x="dose", y="len", add = "mean_se")+ stat_compare_means()+ stat_compare_means(ref.group = "0.5", label = "p.signif", label.y = c(22, 29)) 1234#有误差棒的线图ggline(ToothGrowth, x="dose", y="len", add = "mean_se")+stat_compare_means()+ stat_compare_means(ref.group = "0.5", label = "p.signif", label.y = c(22, 29)) 条形图与线图（两个分组变量）123ggbarplot(ToothGrowth, x="dose", y="len", add = "mean_se", color = "supp", palette = "jco", position = position_dodge(0.8))+ stat_compare_means(aes(group=supp), label = "p.signif", label.y = 29) 123ggline(ToothGrowth, x="dose", y="len", add = "mean_se", color = "supp", palette = "jco")+ stat_compare_means(aes(group=supp), label = "p.signif", label.y = c(16, 25, 29)) Sessioninfo 1234567891011121314151617181920212223242526272829303132333435363738sessionInfo()## R version 3.4.0 (2017-04-21)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 8.1 x64 (build 9600)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:## [1] survminer_0.4.0 ggpubr_0.1.3 magrittr_1.5 ggplot2_2.2.1 ## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.11 compiler_3.4.0 plyr_1.8.4## [4] tools_3.4.0 digest_0.6.12 evaluate_0.10 ## [7] tibble_1.3.3 gtable_0.2.0 nlme_3.1-131 ## [10] lattice_0.20-35 rlang_0.1.1 Matrix_1.2-10 ## [13] psych_1.7.5 ggsci_2.4 DBI_0.6-1 ## [16] cmprsk_2.2-7 yaml_2.1.14 parallel_3.4.0 ## [19] gridExtra_2.2.1 dplyr_0.5.0 stringr_1.2.0 ## [22] knitr_1.16 survMisc_0.5.4 rprojroot_1.2 ## [25] grid_3.4.0 data.table_1.10.4 KMsurv_0.1-5 ## [28] R6_2.2.1 km.ci_0.5-2 survival_2.41-3 ## [31] foreign_0.8-68 rmarkdown_1.5 reshape2_1.4.2 ## [34] tidyr_0.6.3 purrr_0.2.2.2 splines_3.4.0 ## [37] backports_1.1.0 scales_0.4.1 htmltools_0.3.6 ## [40] assertthat_0.2.0 mnormt_1.5-5 xtable_1.8-2 ## [43] colorspace_1.3-2 ggsignif_0.2.0 labeling_0.3 ## [46] stringi_1.1.5 lazyeval_0.2.0 munsell_0.4.3 ## [49] broom_0.4.2 zoo_1.8-0 联系方式：wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>ggrepel</tag>
        <tag>visualization</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化学习笔记之ggrepel包]]></title>
    <url>%2F2017%2F06%2F25%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bggrepel%E5%8C%85%2F</url>
    <content type="text"><![CDATA[当我们在图形中添加标签时，标签之间很容易相互重叠，包ggrepel就专门用来解决这个问题！ 首先我们来看看通过geom_text()添加标签时的情形：12345library(ggplot2)#使用数据集mtcars演示ggplot(mtcars)+ geom_point(aes(wt, mpg), color="red")+ geom_text(aes(wt, mpg, label=rownames(mtcars)))+ theme_classic(base_size = 16) 可以看到可视化效果不是很好。接下来看看包ggrepel的效果。geom_text_repel()是基于geom_text()12345library(ggrepel)set.seed(42)ggplot(mtcars)+ geom_point(aes(wt, mpg), color="red")+ geom_text_repel(aes(wt, mpg, label=rownames(mtcars)))+theme_classic(base_size = 16) geom_label_repel() geom_label_repel()是基于geom_label(),它将标签置于一个小方框中123456set.seed(42)ggplot(mtcars)+ geom_point(aes(wt, mpg), color="grey", size=5)+geom_label_repel(aes(wt, mpg, fill=factor(cyl), label=rownames(mtcars)), fontface="bold", color="white", box.padding=unit(0.35, "lines"), point.padding=unit(0.5, "lines"), segment.colour = "grey50")+ theme_classic(base_size = 16) 参数 大部分geom_text()的参数都适用于geom_text_repel(),除了以下几个： hjust vjust position check_overlap ggrepel包为geom_text_repel()与geom_label_repel()提供了特有的参数设置： segment.color:连接点与标签的线段的颜色 segment.size:线段的粗细 segment.alpha:线段的透明度 box.padding:文本框周边填充 point.padding:点周围填充 arrow:grid:arrow提供的箭头 force:强制性将重叠文本散开 max.oter:最大迭代次数 nudge_x/y:标签开始位置在坐标轴的移动距离 direction:允许标签的方向，x、y or both 下面举个栗子来详细了解这些参数的图形效果12345678910111213set.seed(42)ggplot(mtcars)+ geom_point(aes(wt, mpg, color=factor(cyl)), size=3)+geom_text_repel(aes(wt, mpg, color=factor(cyl), label=rownames(mtcars), angle=ifelse(mtcars$cyl==4, 90, 0)), size=4, family="Times", fontface="bold", box.padding=unit(0.5, "lines"), point.padding=unit(1.6, "lines"), segment.color = "#cccccc", segment.size = 0.5, arrow = arrow(length=unit(0.01, "npc")),force = 1, max.iter = 3e3, nudge_x = ifelse(mtcars$cyl==6, 2, 0), nudge_y = ifelse(mtcars$cyl==6, 9, 0))+ scale_color_discrete(name="cyl")+ scale_x_continuous(expand = c(0.5, 0))+ scale_y_continuous(expand = c(0.25, 0))+ theme_classic(base_size = 16) 也可以通过设置参数point.padding=NA不对点进行repel12345set.seed(42)mtcars$label &lt;- rownames(mtcars)ggplot(mtcars, aes(wt, mpg, label=label))+ geom_point(color="red")+ geom_text_repel(point.padding = NA)+theme_classic(base_size = 16) 通过赋值某些label空字符“”来隐藏。1234567set.seed(42)mtcars$label &lt;- rownames(mtcars)mtcars$label[1:15] &lt;- ""ggplot(mtcars, aes(wt, mpg))+ geom_point(aes(color=factor(cyl)), size=2)+geom_text_repel(aes(color=factor(cyl), size=hp, label=label), point.padding = unit(0.25, "lines"), box.padding = unit(0.25, "lines"), nudge_y = 0.1)+ theme_classic(base_size = 16) 将标签控制在特定区域 通过设置参数xlim和ylim来限制label的位置1234567891011set.seed(42)data &lt;- mtcarsmu &lt;- mean(data$wt)left &lt;- data[data$wt &lt;mu, ]right &lt;- data[data$wt&gt;=mu, ]ggplot()+ geom_vline(xintercept = mu)+ geom_point(aes(wt, mpg), data=data)+ geom_text_repel(data=left, aes(wt, mpg, label=rownames(left), color="Left half"), xlim=c(NA, mu))+ geom_text_repel(data=right, aes(wt, mpg, label=rownames(right), color="Rigth half"), xlim=c(mu, NA))+ theme_classic(base_size = 16) 通过控制参数direction来决定label是左右移动还是上下移动， 默认是both123456set.seed(42)#direction=&quot;x&quot; 左右移动ggplot(mtcars)+ geom_point(aes(wt, mpg), color=&quot;red&quot;)+ geom_text_repel(aes(wt, mpg, label=rownames(mtcars)), direction=&quot;x&quot;)+ theme_classic(base_size = 16)+xlim(1, 6) 12345#direction="x" 上下移动ggplot(mtcars)+ geom_point(aes(wt, mpg), color="red")+ geom_text_repel(aes(wt, mpg, label=rownames(mtcars)), direction="y")+ theme_classic(base_size = 16)+xlim(1, 6) 线图 123456789set.seed(42)ggplot(Orange, aes(age, circumference, color=Tree))+ geom_line()+ coord_cartesian(xlim=c(min(Orange$age), max(Orange$age)+90))+ geom_text_repel(data=subset(Orange, age==max(age)), aes(label=paste(&quot;Tree&quot;, Tree)),size=6, nudge_x = 45, segment.color = NA)+ theme_classic(base_size = 16)+ theme(legend.position = &quot;none&quot;)+ labs(title=&quot;Orange Trees&quot;, x=&quot;Age(days)&quot;, y=&quot;Circumference(mm)&quot;) SessionInfo 123456789101112131415161718192021222324252627sessionInfo()## R version 3.4.0 (2017-04-21)## Platform: x86_64-w64-mingw32/x64 (64-bit)## Running under: Windows 8.1 x64 (build 9600)## ## Matrix products: default## ## locale:## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages:## [1] stats graphics grDevices utils datasets methods base #### other attached packages:## [1] ggrepel_0.6.5 ggplot2_2.2.1## ## loaded via a namespace (and not attached):## [1] Rcpp_0.12.11 digest_0.6.12 rprojroot_1.2 plyr_1.8.4 ## [5] grid_3.4.0 gtable_0.2.0 backports_1.1.0 magrittr_1.5 ## [9] evaluate_0.10 scales_0.4.1 rlang_0.1.1 stringi_1.1.5 ## [13] lazyeval_0.2.0 rmarkdown_1.5 labeling_0.3 tools_3.4.0 ## [17] stringr_1.2.0 munsell_0.4.3 yaml_2.1.14 compiler_3.4.0 ## [21] colorspace_1.3-2 htmltools_0.3.6 knitr_1.16 tibble_1.3.3 联系方式： wechat: yt056410 Email: tyan@zju.edu.cn QQ: 1051927088 GitHub: https://github.com/YTLogos 简书: http://www.jianshu.com/u/bd001545cf0b 博客: https://ytlogos.github.io/ 个人简介：严涛 浙江大学作物遗传育种在读研究生（生物信息学方向） 伪码农，R语言爱好者，爱开源]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>ggrepel</tag>
        <tag>visualization</tag>
      </tags>
  </entry>
</search>