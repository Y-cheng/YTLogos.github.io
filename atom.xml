<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Logos</title>
  <subtitle>Stay hungry,Stay foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ytlogos.github.io/"/>
  <updated>2018-04-15T07:27:51.313Z</updated>
  <id>https://ytlogos.github.io/</id>
  
  <author>
    <name>TaoYan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用ComplexHeatmap绘制热图(一)</title>
    <link href="https://ytlogos.github.io/2018/04/08/%E5%88%A9%E7%94%A8ComplexHeatmap%E7%BB%98%E5%88%B6%E7%83%AD%E5%9B%BE(%E4%B8%80)/"/>
    <id>https://ytlogos.github.io/2018/04/08/利用ComplexHeatmap绘制热图(一)/</id>
    <published>2018-04-08T13:19:05.000Z</published>
    <updated>2018-04-15T07:27:51.313Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/6hE9lcGmjf.png?imageslim" alt="mark"></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>Complexheatmap</strong>是由<a href="https://github.com/jokergoo" target="_blank" rel="external">顾祖光</a>博士创建的绘制热图的R包，在他的<a href="https://github.com/jokergoo/ComplexHeatmap" target="_blank" rel="external"><strong>GitHub</strong></a>有十分详细的<code>小品文(Vignettes)</code>说明。<strong>Complexheatmap</strong>是基于绘图系统<strong>grid</strong>，因此如果有相应<strong>grid</strong>的知识，学习起来应该更顺手！</p>
<a id="more"></a>
<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p><strong>Complexheatmap</strong>提供了一套非常灵活的方法用于多热图也就是热图列表布局以及支持自定义注释绘图，一个热图列表包含若干热图以及注释信息</p>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/FBA7hkj7a4.png?imageslim" alt=""></p>
<h2 id="绘制单个热图"><a href="#绘制单个热图" class="headerlink" title="绘制单个热图"></a>绘制单个热图</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>包的安装就不细说了，有不懂的可以翻我以前的博客，里面有详细的教程，下面直接给出安装代码不解释</p>
<pre><code># installed from bioconductor
source(&quot;http://bioconductor.org/biocLite.R&quot;)
options(BioC_mirror=&quot;http://mirrors.ustc.edu.cn/bioc/&quot;)
biocLite(&quot;ComplexHeatmap&quot;)
# installed from GitHub
if(!require(devtools)){install.packages(&quot;devtools&quot;)}
devtools::install_github(&quot;jokergoo/ComplexHeatmap&quot;)
</code></pre><h3 id="创建数据集"><a href="#创建数据集" class="headerlink" title="创建数据集"></a>创建数据集</h3><pre><code class="{r}">pacman::p_load(ComplexHeatmap, circlize)
set.seed(7)
mat &lt;- cbind(rbind(matrix(rnorm(16, -1),4), matrix(rnorm(32, 1), 8)), rbind(matrix(rnorm(24, 1), 4), matrix(rnorm(48, -1), 8)))
mat &lt;- mat[sample(nrow(mat), nrow(mat)), sample(ncol(mat), ncol(mat))]
rownames(mat) &lt;- paste0(&quot;R&quot;, 1:12)
colnames(mat) &lt;- paste0(&quot;C&quot;, 1:10)
</code></pre>
<h3 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h3><p><strong>ComplexHeatmap</strong>绘制热图十分简单,使用默认参数</p>
<pre><code class="{r}">Heatmap(mat)
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/KlK9dIHkk0.png?imageslim" alt="mark"></p>
<h2 id="定制化"><a href="#定制化" class="headerlink" title="定制化"></a>定制化</h2><p><strong>ComplexHeatmap</strong>十分灵活，可以自定义多种参数绘制热图</p>
<h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>大多数情况下，绘制热图的矩阵都是连续性变量，通过提供颜色映射函数，我们可以自定义颜色，这主要是通过<strong>circlize</strong>包中的<code>colorRamp2()</code>函数来实现的,</p>
<pre><code class="{r}">mat2 &lt;- mat
mat2[1,1] &lt;- 100000
Heatmap(mat2, col = colorRamp2(c(-3,0,3), c(&quot;green&quot;,&quot;white&quot;,&quot;red&quot;)), cluster_rows = FALSE, cluster_columns = FALSE)
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/iGBchD1c3J.png?imageslim" alt="mark"></p>
<p>可以看出，<strong>ComplexHeatmap</strong>对于异常值也能显示出来，不会剔除掉</p>
<pre><code class="{r}">Heatmap(mat, col = rev(rainbow(10)))
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/eHkcmJld54.png?imageslim" alt="mark"></p>
<p>如果是离散型变量或者数值型、字符型变量的话，这时就需要特别指定颜色了</p>
<pre><code class="{r}">#离散型变量/数值型变量
discrete_mat &lt;- matrix(sample(1:4, 100, replace = TRUE), 10, 10)
colors &lt;- structure(circlize::rand_color(4), names=c(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;))
Heatmap(discrete_mat, col = colors)
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/C4IIB3Kebi.png?imageslim" alt="mark"></p>
<pre><code class="{r}">#字符型变量
character_mat &lt;- matrix(sample(letters[1:4], 100, replace = TRUE), 10, 10)
colors &lt;- structure(circlize::rand_color(4), names=letters[1:4])
Heatmap(character_mat, col = colors)
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/DALJBe1FKb.png?imageslim" alt="mark"></p>
<p>可以看出，对于离散型变量/数值型变量，默认对行/列进行聚类，而对于字符型变量，则不进行聚类</p>
<p><strong>ComplexHeatmap</strong>允许数据中含有<code>NA</code>,只需要通过参数<code>na_col</code>来控制<code>NA</code>的颜色</p>
<pre><code class="{r}">mat_with_NA &lt;- mat
mat_with_NA[sample(c(TRUE, FALSE), nrow(mat)*ncol(mat), replace = TRUE, prob = c(1,9))] &lt;- NA
Heatmap(mat_with_NA, na_col = &quot;orange&quot;, clustering_distance_rows = &quot;pearson&quot;)
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/3d9FbLfE8b.png?imageslim" alt="mark"></p>
<p><strong>ComplexHeatmap</strong>默认使用<a href="https://en.wikipedia.org/wiki/Lab_color_space" target="_blank" rel="external">LAB颜色空间(LAB color space)</a>，<code>colorRamp2()</code>提供了选择颜色空间的参数选项</p>
<pre><code class="{r}">f1 &lt;- colorRamp2(seq(min(mat), max(mat), length=3), c(&quot;blue&quot;,&quot;#EEEEEE&quot;, &quot;red&quot;))
f2 &lt;- colorRamp2(seq(min(mat), max(mat), length=3), c(&quot;blue&quot;,&quot;#EEEEEE&quot;, &quot;red&quot;), space = &quot;RGB&quot;)
H1 &lt;- Heatmap(mat, col = f1, column_title = &quot;LAB color space&quot;)
H2 &lt;- Heatmap(mat, col = f2, column_title = &quot;RGB color space&quot;)
H1+H2
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/6hE9lcGmjf.png?imageslim" alt="mark"></p>
<p><strong>ComplexHeatmap</strong>提供了多种颜色空间选项，可以根据自身数据不断调整，选取合适的颜色空间</p>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>一个热图的标题有：图标题、图例标题、行列标题等<br><code>Heatmap</code>里提供的<code>name</code>参数默认的是图例的标题</p>
<pre><code class="{r}">Heatmap(mat, name = &quot;legend&quot;)
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/43dh8Jc9h3.png?imageslim" alt="mark"></p>
<p>图里标题可以通过<code>heatmap_legend_param()</code>进行修改</p>
<pre><code class="{r}">Heatmap(mat, heatmap_legend_param = list(title=&quot;legend&quot;))
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/fa86cCBd61.png?imageslim" alt="mark"></p>
<p>行列标题</p>
<pre><code class="{r}">Heatmap(mat, name = &quot;legend&quot;, column_title = &quot;Column&quot;, row_title = &quot;Row&quot;)
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/i220513hIG.png?imageslim" alt="mark"></p>
<pre><code class="{r}">Heatmap(mat, name = &quot;legend&quot;, column_title = &quot;Column&quot;, column_title_side = &quot;bottom&quot;)
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/ECkjcEedbA.png?imageslim" alt="mark"></p>
<p>如果需要修改图例参数，可以通过<code>gpar()</code>参数</p>
<pre><code class="{r}">Heatmap(mat, name = &quot;legend&quot;,column_title = &quot;Column&quot;, row_title = &quot;Row&quot;, column_title_gp = gpar(fontsize=20, fontface=&quot;bold&quot;), row_title_gp = gpar(fontsize=20, fontface=&quot;bold&quot;))
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/bi079kAgg7.png?imageslim" alt="mark"></p>
<p>标题可以旋转(水平或竖直)</p>
<pre><code class="{r}">Heatmap(mat, name = &quot;legend&quot;, row_title = &quot;Row&quot;, row_title_rot = 0)
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/i9dA7DDbLJ.png?imageslim" alt="mark"></p>
<h2 id="SessionInfo"><a href="#SessionInfo" class="headerlink" title="SessionInfo"></a>SessionInfo</h2><pre><code class="{r}">sessionInfo()
</code></pre>
<pre><code>## R version 3.4.4 (2018-03-15)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 16299)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] grid      stats     graphics  grDevices utils     datasets  methods  
## [8] base     
## 
## other attached packages:
## [1] circlize_0.4.3        ComplexHeatmap_1.17.1
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.16         digest_0.6.15        rprojroot_1.3-2     
##  [4] backports_1.1.2      pacman_0.4.6         magrittr_1.5        
##  [7] evaluate_0.10.1      GlobalOptions_0.0.13 stringi_1.1.7       
## [10] GetoptLong_0.1.6     rmarkdown_1.9        RColorBrewer_1.1-2  
## [13] rjson_0.2.15         tools_3.4.4          stringr_1.3.0       
## [16] yaml_2.1.18          compiler_3.4.4       colorspace_1.3-2    
## [19] shape_1.4.4          htmltools_0.3.6      knitr_1.20
</code></pre><hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/6hE9lcGmjf.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Complexheatmap&lt;/strong&gt;是由&lt;a href=&quot;https://github.com/jokergoo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;顾祖光&lt;/a&gt;博士创建的绘制热图的R包，在他的&lt;a href=&quot;https://github.com/jokergoo/ComplexHeatmap&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;有十分详细的&lt;code&gt;小品文(Vignettes)&lt;/code&gt;说明。&lt;strong&gt;Complexheatmap&lt;/strong&gt;是基于绘图系统&lt;strong&gt;grid&lt;/strong&gt;，因此如果有相应&lt;strong&gt;grid&lt;/strong&gt;的知识，学习起来应该更顺手！&lt;/p&gt;
    
    </summary>
    
      <category term="可视化" scheme="https://ytlogos.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="Complexheatmap" scheme="https://ytlogos.github.io/tags/Complexheatmap/"/>
    
  </entry>
  
  <entry>
    <title>全基因组加倍及串联重复基因</title>
    <link href="https://ytlogos.github.io/2018/04/05/%E5%85%A8%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%8A%A0%E5%80%8D%E5%8F%8A%E4%B8%B2%E8%81%94%E9%87%8D%E5%A4%8D%E5%9F%BA%E5%9B%A0/"/>
    <id>https://ytlogos.github.io/2018/04/05/全基因组加倍及串联重复基因/</id>
    <published>2018-04-05T13:19:05.000Z</published>
    <updated>2018-04-14T08:39:32.809Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180414/ADC8bKhGm4.png?imageslim" alt="mark"></p>
<blockquote>
<p>串联重复基因是植物基因组中一类具有功能的串联重复序列，在植物基因组进化和环境适应的过程中起着十分重要的作用。串联重复基因主要是由串联重复事件产生的。在植物基因组中，串联重复事件的发生频率比较高，为植物基因组带来了基因拷贝数的增加以及等位基因变异。串联重复事件伴随着拟南芥和芸薹属物种的整个进化过程，而且芸薹属物种的多倍化事件并没有影响串联重复事件的发生。</p>
</blockquote>
<a id="more"></a>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180405/2h8a9544k1.png?imageslim" alt="mark"></p>
<ul>
<li>基因共线性分析</li>
</ul>
<p>拟南芥在进化过程中先后经历了三次基因组加倍事件(α、β和γ多倍化事件)。通过对拟南芥基因组的三次基因组加倍事件产生的共线性基因对分析，获得了α、β和γ多倍化事件后分别产生的3530，1421和505共线性基因对。在拟南芥细胞色素P450基因家族的进化分析发现，仅有CYP94基因家族中一对基因在γ基因组加倍化事件后产生的共线性基因对中被保留下来。这可能意味着CYP94基因家族的这两个成员在双子叶植物的祖先在经历γ基因组多倍化事件之前就存在。对于β基因组多倍化事件，CYP86、CYP72和CYP81基因家族中各有一对基因对被检测到保留下来，这意味着这些P450基因在β基因组多倍化事件之前就存在并在β基因组多倍化事件之后被保留下来。对于α基因组加倍事件产生的共线性基因对，共获得了11个P450基因对在α基因组加倍化事件后被保留下来，意味着这22个P450基因在α基因组多倍化事件之前就已存在并在α基因组加倍事件后保留下来。</p>
<blockquote>
<p>在拟南芥和芸薹属的祖先物种分化之后，芸薹属祖先物种经历了自身的三倍化事件，然后进一步产生了现在的白菜和甘蓝，通过与拟南芥基因组中24个十字花科保守区段的共线性关系构建了白菜和甘蓝基因组中的三倍化区段。根据三倍化区段上基因密度的差异，两个芸薹属物种中的三倍化区段划分为三个亚基因组：MF1(中度丢失)、NF2(高度丢失)和LF(低度丢失)。</p>
</blockquote>
<ul>
<li><p>通过古基因组学研究可追溯源到由7931条原基因模型和7条染色体构成的双子叶植物祖先基因组，以及由9138条原基因模型和5条染色体构成的单子叶植物祖先基因组。显花植物研究表明，被子植物基因组经历二倍化(α)、四倍化(β)和六倍化(γ)3次古全基因组复制(WGD)事件。</p>
</li>
<li><p>同源多倍体来源于种内WGD事件，异源多倍体来源于种间杂交。芸薹属(<em>Brassica</em>)植物经历了3次基因组WGD事件(α、β和γ)和种系全基因组三倍化事件，是基因组多倍化研究的重要模式物种。</p>
</li>
</ul>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180414/ADC8bKhGm4.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;串联重复基因是植物基因组中一类具有功能的串联重复序列，在植物基因组进化和环境适应的过程中起着十分重要的作用。串联重复基因主要是由串联重复事件产生的。在植物基因组中，串联重复事件的发生频率比较高，为植物基因组带来了基因拷贝数的增加以及等位基因变异。串联重复事件伴随着拟南芥和芸薹属物种的整个进化过程，而且芸薹属物种的多倍化事件并没有影响串联重复事件的发生。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="bioinformatics" scheme="https://ytlogos.github.io/categories/bioinformatics/"/>
    
    
      <category term="重复基因" scheme="https://ytlogos.github.io/tags/%E9%87%8D%E5%A4%8D%E5%9F%BA%E5%9B%A0/"/>
    
      <category term="古基因组学" scheme="https://ytlogos.github.io/tags/%E5%8F%A4%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>跨物种单拷贝直系同源基因</title>
    <link href="https://ytlogos.github.io/2018/04/02/%E8%B7%A8%E7%89%A9%E7%A7%8D%E5%8D%95%E6%8B%B7%E8%B4%9D%E7%9B%B4%E7%B3%BB%E5%90%8C%E6%BA%90%E5%9F%BA%E5%9B%A0/"/>
    <id>https://ytlogos.github.io/2018/04/02/跨物种单拷贝直系同源基因/</id>
    <published>2018-04-02T13:19:05.000Z</published>
    <updated>2018-04-14T07:53:34.867Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180414/KAl4De8m8L.png?imageslim" alt="mark"></p>
<h2 id="同源-Homology"><a href="#同源-Homology" class="headerlink" title="同源(Homology)"></a>同源(Homology)</h2><p><strong>同源(Homology)</strong> 的概念是这样定义的：</p>
<blockquote>
<p>Homology:the existence of shared abcestry between a pair of strctures,or genes, in different species</p>
</blockquote>
<p>如果两个或多个结构具有相同的祖先，也就是它们由一个共同祖先演化而来，则称它们<strong>同源(Homology)</strong></p>
<p>在生物信息学中，同源主要指的是序列上的同源，即用来说明两个或多个蛋白质氨基酸序列或者DNA序列具有共同的祖先。同源的序列一般具有相似的功能，序列中同源的部分也称为<strong>保守的(conserved)</strong></p>
<a id="more"></a>
<p>蛋白质和DNA的同源性常常根据它们序列的<strong>相似性(Sequence similarity)</strong>来判定，相似性一般用检测序列和目标序列之间的<strong>序列一致性(Percent identity)</strong>来表示</p>
<p><strong>相似性(Sequence similarity)</strong>是指序列比对过程中用来描述检测序列与目标序列之间相同DNA或氨基酸残基所占比例。一般来说，相似程度高于50%则认为序列之间是同源序列</p>
<h2 id="直系同源-orthology-与旁系同源-paralogy"><a href="#直系同源-orthology-与旁系同源-paralogy" class="headerlink" title="直系同源(orthology)与旁系同源(paralogy)"></a><strong>直系同源(orthology)</strong>与<strong>旁系同源(paralogy)</strong></h2><p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180321/LIbg3Cm50d.png?imageslim" alt="mark"></p>
<p>同源现象可分为<strong>直系同源(orthology)</strong>与<strong>旁系同源(paralogy)</strong></p>
<blockquote>
<p>Orthologys(orthology genes) are genes in dofferent pecies that originated by vertical descent from a single gene of the last common ancestor</p>
</blockquote>
<p><strong>直系同源(orthology)</strong>是指不同物种中的某一基因来自同一祖先，在演化过程中因物种形成(speciation)而被区分开来</p>
<blockquote>
<p>Paralogys(paralogous genes) are created by a duplication event within the genome. For gene duplicationevents, if a gene in an organism is duplicated to occupy two different positions in the same genome, then the two copies are paralogous</p>
</blockquote>
<p>旁系同源(paralogy)是指种系间的基因复制</p>
<h2 id="趋同演化-Convergent-evolution-和趋异进化-Divergent-evolution"><a href="#趋同演化-Convergent-evolution-和趋异进化-Divergent-evolution" class="headerlink" title="趋同演化(Convergent evolution)和趋异进化(Divergent evolution)"></a><strong>趋同演化(Convergent evolution)</strong>和<strong>趋异进化(Divergent evolution)</strong></h2><p>相似不一定同源，但是一般来说同源的必定是相似的</p>
<blockquote>
<p>趋同演化(Convergent evolution)：Convergent evolution creats analogous structure that have similar form or function, but that are not present in that last common ancestor of those groups</p>
<p>趋异演化(Divergent evolution): the accumulation of differences between groups which can lead to the formation of new species, usually a result of diffusion of the same species to different and isolated environments which blocks the gene flow among the distinct populations allowing differential fixation of characteristics through genetic drift and natural selection</p>
</blockquote>
<p>趋异演化(Divergent evolution):同一物种不同群体之间累积性差异导致新物种的形成，通常是同一物种扩散后，在不同隔离的环境下通过基因漂流和自然选择，基因分化固定后的结果，也就是说，两个或多个生物学特征具有共同演化起源，源自同一物种，但在演化过程中因环境等自然选择压力的原因，逐渐分化的现象</p>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180414/KAl4De8m8L.png?imageslim" alt="mark"></p>
<h2 id="蛋白家族-protein-family-和蛋白质超家族-protein-superfamilies"><a href="#蛋白家族-protein-family-和蛋白质超家族-protein-superfamilies" class="headerlink" title="蛋白家族(protein family)和蛋白质超家族(protein superfamilies)"></a><strong>蛋白家族(protein family)</strong>和<strong>蛋白质超家族(protein superfamilies)</strong></h2><p><strong>蛋白家族(protein family)</strong>家族有时我们也称为基因家族(gene family)，我们一般检索基因家族的时候都是根据数据库比如<code>Pfam</code>来搜索，大多是根据蛋白质氨基酸序列来搜索保守结构域。不同的<strong>蛋白质家族(protein family)</strong>又可被归于一个蛋白质超家族</p>
<blockquote>
<p>Protein family is a group of evolutionarily-related proteins. In many cases a protein family has a corresponding gene family, in which each gene encodes a corresponding protein with a 1:1 realtionship. Proteins in a family descend from a common ancestor and typicallly have similar three-dimensional, functions, and significant sequence similarity</p>
<p>Families are sometimes grouped together into a larger clades called superfamilies based on structured and mechanistic similarity, even if there is no identifiable sequence homology</p>
</blockquote>
<p><strong>蛋白质超家族(protein superfamilies)</strong>：一些蛋白质家族被归入更大的进化分支，基于结构机制的相似性，尽管其没有可确定的显著的序列同源性。简单而言就是蛋白质家族包含了更多进化分支的蛋白，虽然没有同源性，但是因为其结构域或功能基本相似，也被归为一个大类。蛋白质家族的同源关系是可以确定，同源关系上更加严格些</p>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180414/5d22B3e1bj.png?imageslim" alt="mark"></p>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180414/KAl4De8m8L.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;同源-Homology&quot;&gt;&lt;a href=&quot;#同源-Homology&quot; class=&quot;headerlink&quot; title=&quot;同源(Homology)&quot;&gt;&lt;/a&gt;同源(Homology)&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;同源(Homology)&lt;/strong&gt; 的概念是这样定义的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Homology:the existence of shared abcestry between a pair of strctures,or genes, in different species&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果两个或多个结构具有相同的祖先，也就是它们由一个共同祖先演化而来，则称它们&lt;strong&gt;同源(Homology)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在生物信息学中，同源主要指的是序列上的同源，即用来说明两个或多个蛋白质氨基酸序列或者DNA序列具有共同的祖先。同源的序列一般具有相似的功能，序列中同源的部分也称为&lt;strong&gt;保守的(conserved)&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="bioinformatics" scheme="https://ytlogos.github.io/categories/bioinformatics/"/>
    
    
      <category term="同源基因" scheme="https://ytlogos.github.io/tags/%E5%90%8C%E6%BA%90%E5%9F%BA%E5%9B%A0/"/>
    
  </entry>
  
  <entry>
    <title>植物转录因子WRKY</title>
    <link href="https://ytlogos.github.io/2018/03/30/%E6%A4%8D%E7%89%A9%E8%BD%AC%E5%BD%95%E5%9B%A0%E5%AD%90WRKY/"/>
    <id>https://ytlogos.github.io/2018/03/30/植物转录因子WRKY/</id>
    <published>2018-03-30T13:19:05.000Z</published>
    <updated>2018-04-09T02:01:43.329Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180408/ElmaeG5H85.png?imageslim" alt="WRKYs in plant biotic stress signaling network"></p>
<h2 id="WRKY结构特点"><a href="#WRKY结构特点" class="headerlink" title="WRKY结构特点"></a>WRKY结构特点</h2><ul>
<li><strong>WRKY</strong>转录因子家族具有相同的结构特征，N端都有包含<code>WRKYGQK</code>七肽序列的<code>WRKY</code>结构域，C端则含有C<sub>2</sub>H<sub>2</sub>-或C<sub>2</sub>HC-锌指结构，二者是WRKY特异性与启动子中W-box序列(C/T)TGAC(T/C)结合必不可少的组件。根据这些特点，WRKY可以分为三个亚家族：第Ⅰ亚家族含有两个<code>WRKY</code>结构域和两个C<sub>2</sub>H<sub>2</sub>锌指结构，第Ⅱ亚家族含有一个<code>WRKY</code>结构域和一个C<sub>2</sub>H<sub>2</sub>锌指结构，第Ⅲ亚家族含有一个<code>WRKY</code>结构域和一个C<sub>2</sub>HC锌指结构。第Ⅱ亚家族又被分为Ⅱa,Ⅱb,Ⅱc,Ⅱd和Ⅱe五个小亚族。</li>
</ul>
<a id="more"></a>
<ul>
<li>禾本科作物比如水稻、玉米以及高粱含有更多的第Ⅲ亚族<em>WRKY</em>，而Ⅱc亚家族和Ⅱa+Ⅱb亚家族则广泛地存在于十字花科和豆科中。</li>
</ul>
<h2 id="WRKY在植物逆境胁迫方面作用"><a href="#WRKY在植物逆境胁迫方面作用" class="headerlink" title="WRKY在植物逆境胁迫方面作用"></a><em>WRKY</em>在植物逆境胁迫方面作用</h2><ul>
<li>在非生物胁迫中的作用</li>
</ul>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180408/dc9AE5i2Bb.png?imageslim" alt="WRKYs in plant abiotic stress signaling network"></p>
<ul>
<li>在生物胁迫中的作用</li>
</ul>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180408/ElmaeG5H85.png?imageslim" alt="WRKYs in plant biotic stress signaling network"></p>
<p>第Ⅱ亚家族中的Ⅱc成员据推测可能是干旱胁迫以及盐胁迫的关键转录调控因子，几乎所有的<em>WRKY</em>基因都有参与到生物胁迫中，这说明：</p>
<ul>
<li><em>WRKY</em>的祖先在很早以前就已经进化有了植物免疫的功能</li>
<li><em>WRKY</em>的剂量是影响植物环境适应性的关键因子</li>
</ul>
<h2 id="WRKY在植物生长发育中的作用"><a href="#WRKY在植物生长发育中的作用" class="headerlink" title="WRKY在植物生长发育中的作用"></a><em>WRKY</em>在植物生长发育中的作用</h2><p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180408/Aff7IFllGd.png?imageslim" alt="mark"></p>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>伪码农，R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180408/ElmaeG5H85.png?imageslim&quot; alt=&quot;WRKYs in plant biotic stress signaling network&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;WRKY结构特点&quot;&gt;&lt;a href=&quot;#WRKY结构特点&quot; class=&quot;headerlink&quot; title=&quot;WRKY结构特点&quot;&gt;&lt;/a&gt;WRKY结构特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;WRKY&lt;/strong&gt;转录因子家族具有相同的结构特征，N端都有包含&lt;code&gt;WRKYGQK&lt;/code&gt;七肽序列的&lt;code&gt;WRKY&lt;/code&gt;结构域，C端则含有C&lt;sub&gt;2&lt;/sub&gt;H&lt;sub&gt;2&lt;/sub&gt;-或C&lt;sub&gt;2&lt;/sub&gt;HC-锌指结构，二者是WRKY特异性与启动子中W-box序列(C/T)TGAC(T/C)结合必不可少的组件。根据这些特点，WRKY可以分为三个亚家族：第Ⅰ亚家族含有两个&lt;code&gt;WRKY&lt;/code&gt;结构域和两个C&lt;sub&gt;2&lt;/sub&gt;H&lt;sub&gt;2&lt;/sub&gt;锌指结构，第Ⅱ亚家族含有一个&lt;code&gt;WRKY&lt;/code&gt;结构域和一个C&lt;sub&gt;2&lt;/sub&gt;H&lt;sub&gt;2&lt;/sub&gt;锌指结构，第Ⅲ亚家族含有一个&lt;code&gt;WRKY&lt;/code&gt;结构域和一个C&lt;sub&gt;2&lt;/sub&gt;HC锌指结构。第Ⅱ亚家族又被分为Ⅱa,Ⅱb,Ⅱc,Ⅱd和Ⅱe五个小亚族。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="bioinformatics" scheme="https://ytlogos.github.io/categories/bioinformatics/"/>
    
    
      <category term="转录因子" scheme="https://ytlogos.github.io/tags/%E8%BD%AC%E5%BD%95%E5%9B%A0%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>油菜形成、进化及基因家族概况(三)</title>
    <link href="https://ytlogos.github.io/2018/03/23/%E6%B2%B9%E8%8F%9C%E5%BD%A2%E6%88%90%E5%8F%8A%E8%BF%9B%E5%8C%96(%E4%B8%89)/"/>
    <id>https://ytlogos.github.io/2018/03/23/油菜形成及进化(三)/</id>
    <published>2018-03-23T13:19:05.000Z</published>
    <updated>2018-04-01T08:18:31.305Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180401/78JFehmBF4.png?imageslim" alt="mark"></p>
<h2 id="同源基因"><a href="#同源基因" class="headerlink" title="同源基因"></a>同源基因</h2><p>同源基因包括直系同源基因(Orthologs)和旁系同源基因(Paralogs)。</p>
<ul>
<li>直系同源基因</li>
</ul>
<p>直系同源基因是指分布于两种或两种以上物种的基因组中，在进化上起源于一个祖先基因并垂直传递的同源基因，直系同源基因之间的功能高度保守，有些近乎相同。</p>
<ul>
<li>旁系同源基因</li>
</ul>
<p>旁系同源基因是指同一基因组(或同系物种的基因组)中，由于祖先基因的基因复制产生的同源基因。旁系同源基因尽管在结构上具有一定程度的相似性，但是他们的功能可能相似，也可能并不相似，甚至失去功能变成了假基因。</p>
<a id="more"></a>
<h2 id="基因家族及其扩增"><a href="#基因家族及其扩增" class="headerlink" title="基因家族及其扩增"></a>基因家族及其扩增</h2><p>基因复制对基因组中的基因家族扩增起着非常重要的作用。复制模式主要有三种：染色体片段复制(Segmental duplication)、串联复制(Tandem duplication)以及反转录转座(Retrotransposition)</p>
<ul>
<li>染色体片段复制</li>
</ul>
<p>大部分植物都经历过古老的全基因组复制事件，它是一种大规模的染色体倍增事件，一次性增加一个物种所有基因的剂量，导致基因组中保留着大量染色体倍增的片段。全基因组复制造成的重复区通常是一大片区域中所有基因的重复，而不是单个基因或几个基因的重复。</p>
<ul>
<li>串联复制</li>
</ul>
<p>串联复制主要发生在染色体重组区域，串联复制形成的基因家族成员通常紧密排列在同一条染色体上，形成一个序列相似、功能相近的基因簇。</p>
<ul>
<li>反转录转座</li>
</ul>
<p>反转录转座是指件已经转录和剪切的mRNA，再经过逆转录过程形成cDNA，然后随机插入到染色体的某一位置形成新的重复基因的过程。经反转录转座形成的新基因往往由于缺少必要的调控序列，通常都是不能表达的假基因。</p>
<blockquote>
<p>许多重要的基因家族在基因组中成簇存在，即同一基因家族的不同成员在基因组中串联重复排列。这些成簇存在的基因是种系生殖细胞在减数分裂过程中，通过染色体不等交换以及基因转换形成的。一些基因超家族通常含有成簇和分散存在的基因，成簇存在的基因(通常组成多基因家族)具有相似的功能，而分散存在的基因一般具有不同的功能。</p>
</blockquote>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>伪码农，R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180401/78JFehmBF4.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;同源基因&quot;&gt;&lt;a href=&quot;#同源基因&quot; class=&quot;headerlink&quot; title=&quot;同源基因&quot;&gt;&lt;/a&gt;同源基因&lt;/h2&gt;&lt;p&gt;同源基因包括直系同源基因(Orthologs)和旁系同源基因(Paralogs)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直系同源基因&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直系同源基因是指分布于两种或两种以上物种的基因组中，在进化上起源于一个祖先基因并垂直传递的同源基因，直系同源基因之间的功能高度保守，有些近乎相同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;旁系同源基因&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;旁系同源基因是指同一基因组(或同系物种的基因组)中，由于祖先基因的基因复制产生的同源基因。旁系同源基因尽管在结构上具有一定程度的相似性，但是他们的功能可能相似，也可能并不相似，甚至失去功能变成了假基因。&lt;/p&gt;
    
    </summary>
    
      <category term="bioinformatics" scheme="https://ytlogos.github.io/categories/bioinformatics/"/>
    
    
      <category term="Brassica" scheme="https://ytlogos.github.io/tags/Brassica/"/>
    
  </entry>
  
  <entry>
    <title>油菜形成、进化及基因家族概况(二)</title>
    <link href="https://ytlogos.github.io/2018/03/21/%E6%B2%B9%E8%8F%9C%E5%BD%A2%E6%88%90%E5%8F%8A%E8%BF%9B%E5%8C%96(%E4%BA%8C)/"/>
    <id>https://ytlogos.github.io/2018/03/21/油菜形成及进化(二)/</id>
    <published>2018-03-21T13:19:05.000Z</published>
    <updated>2018-03-29T03:45:27.124Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180329/0L8a4haFDJ.png?imageslim" alt="mark"></p>
<h2 id="基因家族"><a href="#基因家族" class="headerlink" title="基因家族"></a>基因家族</h2><p>由一个共同的祖先基因经过重复(duplication)和突变(mutation)产生的、外显子中具有相似的序列的一组相关基因称为基因家族(gene family)。基因重复主要有三种形式：片段复制、串联重复和逆转录转座或其它转座事件等，基因重复后可以彼此形成基因簇(gene clusters)，同一家族中的成员有时紧密排列在一起成为一个基因簇；更多时候他们却分散在同一染色体的不同部位，甚至位于不同染色体上，具有不同的表达调控模式。</p>
<a id="more"></a>
<h2 id="假基因"><a href="#假基因" class="headerlink" title="假基因"></a>假基因</h2><p>在多基因家族中，某些成员并不产生有功能的基因产物，这些基因称为假基因(pseudogene)。假基因与有功能的基因同源，原来可能是有功能的基因，但由于缺失、倒位或点突变，使这一基因失去活性，成为无功能基因。与相应的正常基因相比，假基因往往缺少正常基因的内含子，两侧具有顺向重复序列。据推测假基因的来源之一可能是基因经过转录后生成的RNA的前体通过剪切失去内含子形成mRNA，如果mRNA经反复转录产生cDNA，再整合到染色体DNA中，便有可能成为假基因，因此该假基因是没有内含子的，在这个过程中，可能同时会发生缺失、倒位或点突变等变化，从而使假基因不能表达。假基因一般缺乏必要的启动子序列和缺乏一个或多个具有活性的成员中特有的内含子序列。</p>
<h2 id="DNA重复"><a href="#DNA重复" class="headerlink" title="DNA重复"></a>DNA重复</h2><p>DNA重复通常是指DNA片段数的增加，它可以是一个完整基因的重复(基因重复)、基因的一部分重复、一个完整染色体的重复(非整倍体)或整个基因组的重复(多倍体)。基因家族是由于连续的基因重复所造成的。非整倍体常导致生物体不育，而基因组重复只是增加基因拷贝数，并不产生新的基因，对基因组的复杂性并没有改变。从基因组计划的角度来看，更多的是考虑单个基因或一些基因的重复，而不是整个基因组的重复。</p>
<h2 id="超基因家族"><a href="#超基因家族" class="headerlink" title="超基因家族"></a>超基因家族</h2><p>多基因家族是一类具有序列同源性及功能相似性的基因；而超基因家族是一类具有序列同源性而不具有相似功能的基因。</p>
<h2 id="基因簇"><a href="#基因簇" class="headerlink" title="基因簇"></a>基因簇</h2><p>许多重要的基因家族在基因组中成簇存在，也即同一基因家族的不同成员在基因组中重复串联排列。这些成簇存在的基因是种系生殖细胞在减数分裂过程中通过染色体不等交换和基因转换形成的。成簇存在的基因(通常组成多基因家族)具有相似的功能，而分散存在的基因往往具有不同的功能，当然也有例外。分散存在的基因家族一般认为是通过RNA逆转录、随后整合到基因组中形成的。整合序列(integrated sequence)或逆转录序列(retrosequence)来源于基因的RNA转录本，因此无内含子。大多数逆转录序列变为不具功能的逆转录假基因(retropesudogene)，只有极少数逆转录序列保留了功能。</p>
<h2 id="基因家族形成的分子机制"><a href="#基因家族形成的分子机制" class="headerlink" title="基因家族形成的分子机制"></a>基因家族形成的分子机制</h2><ul>
<li>基因重复和点突变</li>
</ul>
<p>基因发生重复的主要分子机制包括多倍体化、串联重复及逆转录转座。多倍体化导致了许多基因家族的形成，串联重复参与了成簇存在的基因家族的进化，重复的DNA区域可以小于或大于一个基因的长度，但在基因家族的进化过程中，整个基因的重复尤为重要。在种系减数分裂过程中，染色体不等交换引起基因串联重复，一旦一个基因簇形成，不等交换率就会升高。在具有相似功能成员的多基因家族中，频繁的染色体不等交换导致了家族成员的协同进化。</p>
<ul>
<li>自然选择和随机漂变</li>
</ul>
<p>任何重复基因或多拷贝基因，如果被表达且具有功能，则正经历着纯化性自然选择(purifying selection)，多拷贝基因的进化率比单个基因的突变率低很多。自然选择限制程度随基因冗余而减弱，只要有一个基因保留其功能，有害的突变就有可能富集。对于大对数基因家族来说，有害突变的积累可被纯化性选择阻止，纯化性自然选择可以检测到具有功能的完整基因的数目。使突变基因拷贝数增加或减少的协同进化有利于自然选择。<br>正向自然选择(positive selection)是在重复基因获得新功能时发生的。许多重复基因产生后加快了氨基酸的替代，氨基酸替代可以通过同义及非同义突变的频率进行估计。<br>基因重复的另一后果是基因表达模式的变化，也即多拷贝基因的功能特化或亚功能化。这种变化对于参与发育过程的转录因子及其他蛋白尤为重要，这类基因功能的变化与生物的形态学进化直接相关。</p>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>伪码农，R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180329/0L8a4haFDJ.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;基因家族&quot;&gt;&lt;a href=&quot;#基因家族&quot; class=&quot;headerlink&quot; title=&quot;基因家族&quot;&gt;&lt;/a&gt;基因家族&lt;/h2&gt;&lt;p&gt;由一个共同的祖先基因经过重复(duplication)和突变(mutation)产生的、外显子中具有相似的序列的一组相关基因称为基因家族(gene family)。基因重复主要有三种形式：片段复制、串联重复和逆转录转座或其它转座事件等，基因重复后可以彼此形成基因簇(gene clusters)，同一家族中的成员有时紧密排列在一起成为一个基因簇；更多时候他们却分散在同一染色体的不同部位，甚至位于不同染色体上，具有不同的表达调控模式。&lt;/p&gt;
    
    </summary>
    
      <category term="bioinformatics" scheme="https://ytlogos.github.io/categories/bioinformatics/"/>
    
    
      <category term="Brassica" scheme="https://ytlogos.github.io/tags/Brassica/"/>
    
  </entry>
  
  <entry>
    <title>油菜形成、进化及基因家族概况</title>
    <link href="https://ytlogos.github.io/2018/03/20/%E6%B2%B9%E8%8F%9C%E5%BD%A2%E6%88%90%E5%8F%8A%E8%BF%9B%E5%8C%96/"/>
    <id>https://ytlogos.github.io/2018/03/20/油菜形成及进化/</id>
    <published>2018-03-20T13:19:05.000Z</published>
    <updated>2018-03-28T11:56:26.070Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180328/JK3HalKdab.png?imageslim" alt="mark"></p>
<h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>十字花科祖先于2400-4000万年前出现，然后拟南芥与芸薹属在1200-2000万年前分化，之后不久芸薹属经历了特有的基因组三倍化，而后又经历了大规模的基因丢失、基因获得和包括部分复制和部分丢失的染色体重排。芸薹属两个重要的二倍体基本种白菜油菜(AA,2n=20)与甘蓝(CC,2n=18)于460万年前分化。甘蓝型油菜是由白菜型油菜和甘蓝通过种间自然杂交后又经染色体加倍而形成的一个异源四倍体。因此甘蓝型油菜基因组中通常会含有2个或2个以上的重复基因序列。</p>
<a id="more"></a>
<h2 id="转录因子"><a href="#转录因子" class="headerlink" title="转录因子"></a>转录因子</h2><p>在植物生长发育过程中，植物体需要对各种功能相关基因表达进行精确调控，从而对不同环境、组织和发育信号等作出相应的调节反应，其中转录因子在基因的表达调控中起着关键性作用。大部分真核生物中基因的表达很大程度上为转录水平的调控，这一调控是由多个不同蛋白质族群间的相互协调来达到，这些蛋白统称为转录因子，一般来说可以识别它们所调控的基因的启动子区域内特定的DNA序列的蛋白。通过蛋白之间的相互作用，转录因子调节RNA聚合酶Ⅱ的激活以及mRNA的合成。</p>
<h3 id="转录因子结构"><a href="#转录因子结构" class="headerlink" title="转录因子结构"></a>转录因子结构</h3><p>转录因子一般由4个功能区域组成：DNA结合域、转录调控区、寡聚化位点以及核定位信号。转录因子通过这些功能区域进入细胞核，与启动子中的顺式作用元件或其它转录因子的功能区域相互作用来调控基因转录表达。DNA结合域是指转录因子中能够识别并结合DNA顺式作用元件的一段氨基酸序列。同类型转录因子中DNA结合域的氨基酸序列是比较保守的，这决定了转录因子与顺式作用元件间识别与结合的特异性。转录调控区包括转录激活区以及转录抑制区，这一区域决定了同类转录因子间的差异，使之具有不同的功能。核定位信号控制转录因子进入细胞核的过程，该区域富含精氨酸和赖氨酸残基。寡聚化位点具有很保守的氨基酸序列，它是不同转录因子借以发生相互作用的功能域，形成同源或异源二聚体。<br>转录因子基因结构可以通过<strong>Gene Structure Display Server 2.0(GSDS2.0)</strong>进行分析。</p>
<h3 id="串联复制"><a href="#串联复制" class="headerlink" title="串联复制"></a>串联复制</h3><p>如果两个基因中间间隔有不多于5个基因且属于同一个基因家族，那么这两个基因称为串联复制。用<strong>MCScanX</strong>中的<code>mcscanx</code>对拟南芥基因组和甘蓝型油菜基因组分别做共线性分析，若一个基因与另一个基因有共线性关系，其周围有两对以上基因都是共线性关系，则这两个基因为部分复制。另外利用<strong>MCScanX</strong>中的<code>add ka and ks to collinearity</code>模块计算共线性关系基因对的Ks(同义替换)值，再利用T=Ks/2λ来推测部分复制发生的时间，对于十字花科而言，λ为1.5*10<sup>-8</sup>。</p>
<h3 id="转录因子理化性质"><a href="#转录因子理化性质" class="headerlink" title="转录因子理化性质"></a>转录因子理化性质</h3><p>在<strong>ExPASy</strong>中对拟南芥和推测出来的甘蓝型油菜基因家族成员的氨基酸序列进行分析，获得它们的理论等电点(pIs)以及蛋白质的相对分子量(Mw)。</p>
<h2 id="多倍化"><a href="#多倍化" class="headerlink" title="多倍化"></a>多倍化</h2><p>多倍化是物种进化的重要动力，多数高等植物在进化过程中都经历了不同水平的多倍化。十字花科物种都经历了三倍化。拟南芥与白菜分化自同一祖先物种。大约20-40M，拟南芥与白菜的共同祖先发生了一次基因组水平上的复制事件，称为α事件。芸薹属物种在此后又经历了一次基因组水平三倍化事件。在5-9M，甘蓝与白菜的共同祖先经历了一次基因组水平三倍化，白菜与甘蓝分化时间大约在4M。相较于拟南芥，甘蓝和白菜各发生了一次基因组复制。甘蓝型油菜大约在7500~12500年前由白菜和甘蓝天然杂交形成。物种的进化实质是基因的进化，多倍体事件是基因家族扩张的主要动力，在多倍化之后，基因数目呈倍数增长。</p>
<h2 id="进化分析"><a href="#进化分析" class="headerlink" title="进化分析"></a>进化分析</h2><h3 id="基因家族聚类"><a href="#基因家族聚类" class="headerlink" title="基因家族聚类"></a>基因家族聚类</h3><p>同源的蛋白质可以分为直系同源与旁系同源，当同源是基因复制的结果，两份拷贝在一个物种的历史上是平行演化的，这样的基因被称为旁系同源基因。当同源是物种形成的结果，基因的历史反映了物种的历史，被称为直系同源；直系同源是不同物种内的同源序列，它们是来自于物种形成时的共同祖先基因，通常认为直系同源基因具有相似的生物学功能。</p>
<h3 id="假基因"><a href="#假基因" class="headerlink" title="假基因"></a>假基因</h3><p>对不能转录或转录后生成无功能蛋白质的基因。假基因在及基因组中形成稳定的和无活性的拷贝，由活化的原始基因突变而来(复制突变或者加工型假基因)。这是因为存在着在某个阶段伤及基因表达的一种或多种缺陷(如启动子错误、有缺陷的剪接信号、框架中有终止信号等)之故。</p>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>伪码农，R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180328/JK3HalKdab.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;起源&quot;&gt;&lt;a href=&quot;#起源&quot; class=&quot;headerlink&quot; title=&quot;起源&quot;&gt;&lt;/a&gt;起源&lt;/h2&gt;&lt;p&gt;十字花科祖先于2400-4000万年前出现，然后拟南芥与芸薹属在1200-2000万年前分化，之后不久芸薹属经历了特有的基因组三倍化，而后又经历了大规模的基因丢失、基因获得和包括部分复制和部分丢失的染色体重排。芸薹属两个重要的二倍体基本种白菜油菜(AA,2n=20)与甘蓝(CC,2n=18)于460万年前分化。甘蓝型油菜是由白菜型油菜和甘蓝通过种间自然杂交后又经染色体加倍而形成的一个异源四倍体。因此甘蓝型油菜基因组中通常会含有2个或2个以上的重复基因序列。&lt;/p&gt;
    
    </summary>
    
      <category term="bioinformatics" scheme="https://ytlogos.github.io/categories/bioinformatics/"/>
    
    
      <category term="Brassica" scheme="https://ytlogos.github.io/tags/Brassica/"/>
    
  </entry>
  
  <entry>
    <title>生物信息学学习笔记（八）</title>
    <link href="https://ytlogos.github.io/2018/03/07/%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89/"/>
    <id>https://ytlogos.github.io/2018/03/07/生物信息学学习笔记（八）/</id>
    <published>2018-03-07T13:19:05.000Z</published>
    <updated>2018-03-21T03:27:44.135Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180309/E3bGF58F5a.png?imageslim" alt="mark"></p>
<ul>
<li>WRKY转录因子是高等植物中10个最大的转录因子家族之一，其N-末端含有高度保守的WRKYGQK氨基酸序列。WRKY蛋白的N-端均含有1个或两个由近60个氨基酸组成的WRKY结构域，C-端均含有1个锌指结构，二者是WRKY特异性与启动子中W-box序列（C/T）TGAC（T/C）结合必不可少的组件，其中WRKY结构域中含有一段高度保守的WRKYGQK七肽序列（或者为WRKYGEK、WRKYGKK）。</li>
</ul>
<a id="more"></a>
<ul>
<li><p>作为转录因子，WRKY蛋白参与对细胞内特定基因的转录调控，从而产生相应的细胞反应来应对不同的外界刺激，这些刺激包括非生物胁迫和生物胁迫。WRKY转录因子也广泛参与调控植物的生长发育过程，如种子发育过程、胚胎形成、叶片衰老和新陈代谢等过程。</p>
</li>
<li><p>调控开花的四条信号途径</p>
<ul>
<li>光周期途径</li>
<li>春化途径</li>
<li>自主途径</li>
<li>赤霉素(GA)途径</li>
</ul>
</li>
</ul>
<p>光周期途径：光周期途径中相关基因的突变体，仅在光照条件下开花时间延迟<br>春化途径：通过抑制开花抑制子FLC的转录,从而促进开花<br>自主途径：独立于光周期途径，使得那些在长光照下迅速开花的植物如拟南芥在短光照条件下最终也能开花。自主途径中的相关复合物通过限制FLC mRNA的积累，从而促使开花<br>GA途径：GA合成及GA信号转导相关的突变体，在短光照条件下，开花会延迟很长时间，说明在没有长光照促使开花的条件下，GA是一种刺激植物开花的重要物质</p>
<blockquote>
<p>四条途径可以独立调控开花过程，但是它们有着共同的下游目标基因CO和FLC。位于CO和FLC下游的开花整合因子FT、LFY和SOC1，通过整合开花途径输出的信号，激活花分生组织特异性基因LFY和APl的表达，从而启动开花。其中FT是一个长距离信号，其蛋白通过韧皮部从叶片(伴胞细胞)转移到茎端，与FD蛋白相互作用，激活APl的表达。LFY既是开花时间基因，又是花分生组织特性基因，直接调控靶基因APl的表达。SOC1受四条开花途径的正调控，并认为可能是四条开花途径的一个整合子。SOC1可被CO的过量表达诱导和FT的过量表达快速激活。</p>
<p>WRKY蛋白质通过特异性结合靶基因启动子区域的(T)TGAC(C/T)(W-box)序列来调控相应基因的表达，从而在植物生长发育、形态建成、物质代谢和耐逆抗病等方面发挥生物学功能。</p>
</blockquote>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180309/E3bGF58F5a.png?imageslim" alt="mark"></p>
<p>关于cDNA和CDS以及ORF的区别<br>mRNA是由编码区(CDS)、上游的5’和下游的3’非编码区组成，真核生物的mRNA的5’端带有7-甲基鸟苷-三磷酸帽子结构，3’端有多腺苷酸尾巴，但是NCBI中的mRNA序列实际上是cDNA序列，即经过反转录得到的与RNA序列互补的DNA序列，一般不包括3’多腺苷酸尾巴。一个cDNA序列被称为一个转录子，第一个碱基所在的位置为转录起始位点(TSS)，cDNA都是由外显子组成，但是编码蛋白质的外显子只有一个，即CDS(Coding Sequence)，这段序列也就是一个ORF区，也就是这个cDNA的ORF序列，参与特定基因转录及其调控的TSS上游序列称为启动子。</p>
<blockquote>
<p>5’UTR-CDS-3’UTR=cDNA,cDNA包含CDS</p>
</blockquote>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180313/hlEH5EmfIJ.png?imageslim" alt="mark"></p>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180313/KCeLhe4gli.png?imageslim" alt="mark"></p>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>伪码农，R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180309/E3bGF58F5a.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WRKY转录因子是高等植物中10个最大的转录因子家族之一，其N-末端含有高度保守的WRKYGQK氨基酸序列。WRKY蛋白的N-端均含有1个或两个由近60个氨基酸组成的WRKY结构域，C-端均含有1个锌指结构，二者是WRKY特异性与启动子中W-box序列（C/T）TGAC（T/C）结合必不可少的组件，其中WRKY结构域中含有一段高度保守的WRKYGQK七肽序列（或者为WRKYGEK、WRKYGKK）。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="bioinformatics" scheme="https://ytlogos.github.io/categories/bioinformatics/"/>
    
    
      <category term="转录因子" scheme="https://ytlogos.github.io/tags/%E8%BD%AC%E5%BD%95%E5%9B%A0%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>利用ggseqlogo绘制seqlogo图</title>
    <link href="https://ytlogos.github.io/2018/02/19/%E5%88%A9%E7%94%A8ggseqlogo%E7%BB%98%E5%88%B6seqlogo%E5%9B%BE/"/>
    <id>https://ytlogos.github.io/2018/02/19/利用ggseqlogo绘制seqlogo图/</id>
    <published>2018-02-19T04:19:05.000Z</published>
    <updated>2018-03-07T14:37:11.352Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq9.png" alt=""></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>sequence logo</strong>图用来可视化一段序列某个位点的保守性，据根提供的序列组展示位点信息。这方面有很多在线小工具可以完成，这里使用R包<a href="https://github.com/omarwagih/ggseqlogo" target="_blank" rel="external"><strong>ggseqlogo</strong></a>进行可视化。</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装方式有两种</p>
<pre><code>#直接从CRAN中安装
install.packages(&quot;ggseqlogo&quot;)
#从GitHub中安装
devtools::install.github(&quot;omarwagih/ggseqlogo&quot;)
</code></pre><h2 id="数据加载"><a href="#数据加载" class="headerlink" title="数据加载"></a>数据加载</h2><p><strong>ggseqlogo</strong>提供了测试数据<code>ggseqlogo_sample</code>。</p>
<pre><code class="{r}">#加载包
library(ggplot2)
library(ggseqlogo)
#加载数据
data(ggseqlogo_sample)
</code></pre>
<p><code>ggseqlogo_sample</code>数据集是一个列表，里面包含了三个数据集：</p>
<ul>
<li>seqs_dna:12种转录因子的结合位点序列</li>
<li>pfms_dna:四种转录因子的位置频率矩阵</li>
<li>seqs_aa:一组激动酶底物磷酸化位点序列</li>
</ul>
<pre><code class="{r}">#seqs_dna
head(seqs_dna)[1]
</code></pre>
<pre><code>## $MA0001.1
##  [1] &quot;CCATATATAG&quot; &quot;CCATATATAG&quot; &quot;CCATAAATAG&quot; &quot;CCATAAATAG&quot; &quot;CCATAAATAG&quot;
##  [6] &quot;CCATAAATAG&quot; &quot;CCATAAATAG&quot; &quot;CCATATATGG&quot; &quot;CCATATATGG&quot; &quot;CCAAATATAG&quot;
</code></pre><pre><code>#pfms_dna
head(pfms_dna)[1]
</code></pre><pre><code>## $MA0018.2
##   [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
## A    0    0   11    0    1    0    2    8
## C    1    1    0    9    0    3    7    0
## G    1   10    0    2   10    0    1    1
## T    9    0    0    0    0    8    1    2
</code></pre><pre><code>#seqs_aa
head(seqs_aa)[1]
</code></pre><pre><code>## $AKT1
##   [1] &quot;VVGARRSSWRVVSSI&quot; &quot;GPRSRSRSRDRRRKE&quot; &quot;LLCLRRSSLKAYGNG&quot;
##   [4] &quot;TERPRPNTFIIRCLQ&quot; &quot;LSRERVFSEDRARFY&quot; &quot;PSTSRRFSPPSSSLQ&quot;
</code></pre><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><pre><code class="{r}">ggplot()+geom_logo(seqs_dna$MA0001.1)+theme_logo()
</code></pre>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq1.png" alt=""><br><strong>ggseqlogo</strong>提供了一个直接绘图的函数<code>ggseqlogo()</code>,这是一个包装函数。下面命令结果同上面的。</p>
<pre><code>ggseqlogo(seqs_dna$MA0001.1)
</code></pre><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p><strong>ggseqlogo</strong>支持以下几种类型数据输入：</p>
<ul>
<li>序列</li>
<li>矩阵</li>
</ul>
<p>下面是使用数据中的位置频率矩阵生成的seqlogo</p>
<pre><code class="{r}">ggseqlogo(pfms_dna$MA0018.2)
</code></pre>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq2.png" alt=""></p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><strong>ggseqlogo</strong>通过<code>method</code>选项支持两种序列标志生成方法：<code>bits</code>和<code>probability</code>。</p>
<pre><code class="{r}">p1 &lt;- ggseqlogo(seqs_dna$MA0001.1, method=&quot;bits&quot;)
p2 &lt;- ggseqlogo(seqs_dna$MA0001.1, method=&quot;prob&quot;)
gridExtra::grid.arrange(p1,p2)
</code></pre>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq3.png" alt=""></p>
<h2 id="序列类型"><a href="#序列类型" class="headerlink" title="序列类型"></a>序列类型</h2><p><strong>ggseqlogo</strong>支持氨基酸、DNA和RNA序列类型，默认情况下<strong>ggseqlogo</strong>会自动识别数据提供的序列类型，也可以通过<code>seq_type</code>选项直接指定序列类型。</p>
<pre><code class="{r}">ggseqlogo(seqs_aa$AKT1, seq_type=&quot;aa&quot;)
</code></pre>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq4.png" alt=""></p>
<h2 id="自定义字母"><a href="#自定义字母" class="headerlink" title="自定义字母"></a>自定义字母</h2><p>通过<code>namespace</code>选项来定义自己想要的字母类型</p>
<pre><code class="{r}">#用数字来代替碱基
seqs_numeric &lt;- chartr(&quot;ATGC&quot;, &quot;1234&quot;, seqs_dna$MA0001.1)
ggseqlogo(seqs_numeric, method=&quot;prob&quot;, namespace=1:4)
</code></pre>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq5.png" alt=""></p>
<h2 id="配色"><a href="#配色" class="headerlink" title="配色"></a>配色</h2><p><strong>ggseqlogo</strong>可以使用<code>col_scheme</code>参数来设置配色方案，具体可参考<code>?list_col_schemes</code></p>
<pre><code class="{r}">ggseqlogo(seqs_dna$MA0001.1, col_scheme=&quot;base_pairing&quot;)
</code></pre>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq6.png" alt=""></p>
<h2 id="自定义配色"><a href="#自定义配色" class="headerlink" title="自定义配色"></a>自定义配色</h2><p><strong>ggseqlogo</strong>提供函数<code>make_col_scheme</code>来自定义离散或者连续配色方案</p>
<h3 id="离散配色"><a href="#离散配色" class="headerlink" title="离散配色"></a>离散配色</h3><pre><code class="{r}">csl &lt;- make_col_scheme(chars = c(&quot;A&quot;,&quot;T&quot;, &quot;C&quot;, &quot;G&quot;), groups = c(&quot;gr1&quot;,&quot;gr1&quot;, &quot;gr2&quot;,&quot;gr2&quot;), cols = c(&quot;purple&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;blue&quot;))
ggseqlogo(seqs_dna$MA0001.1,col_scheme=csl)
</code></pre>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq7.png" alt=""></p>
<h3 id="连续配色"><a href="#连续配色" class="headerlink" title="连续配色"></a>连续配色</h3><pre><code class="{r}">cs2 &lt;- make_col_scheme(chars = c(&quot;A&quot;, &quot;T&quot;, &quot;C&quot;, &quot;G&quot;), values = 1:4)
ggseqlogo(seqs_dna$MA0001.1, col_scheme=cs2)
</code></pre>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq8.png" alt=""></p>
<h2 id="同时绘制多个序列标志"><a href="#同时绘制多个序列标志" class="headerlink" title="同时绘制多个序列标志"></a>同时绘制多个序列标志</h2><pre><code class="{r}">ggseqlogo(seqs_dna, ncol = 4)
</code></pre>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq9.png" alt=""><br>上述命令实际上等同于</p>
<pre><code>ggplot()+geom_logo(seqs_dna)+theme_logo()+
  facet_wrap(~seq_group,ncol = 4,scales = &quot;free_x&quot;)
</code></pre><h2 id="自定义高度"><a href="#自定义高度" class="headerlink" title="自定义高度"></a>自定义高度</h2><p>通过创建矩阵可以生成每个标志的高度，还可以有负值高度</p>
<pre><code class="{r}">set.seed(1234)
custom_mat &lt;- matrix(rnorm(20), nrow = 4, dimnames = list(c(&quot;A&quot;,&quot;T&quot;,&quot;C&quot;, &quot;G&quot;)))
ggseqlogo(custom_mat,method=&quot;custom&quot;,seq_type=&quot;dna&quot;)+
  ylab(&quot;my custom height&quot;)
</code></pre>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq10.png" alt=""></p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>可以通过<code>font</code>参数来设置字体，具体可参考<code>?list_fonts</code></p>
<pre><code class="{r}">fonts &lt;- list_fonts(F)
p_list &lt;- lapply(fonts, function(f){
  ggseqlogo(seqs_dna$MA0001.1,font=f)+ggtitle(f)
})
do.call(gridExtra::grid.arrange,c(p_list, ncol=4))
</code></pre>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq11.png" alt=""></p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释的话跟<strong>ggplot2</strong>是一样的</p>
<pre><code class="{r}">ggplot()+
  annotate(&quot;rect&quot;, xmin = 0.5, xmax = 3.5, ymin = -0.05, ymax = 1.9, alpha=0.1, col=&quot;black&quot;, fill=&quot;yellow&quot;)+
  geom_logo(seqs_dna$MA0001.1, stack_width = 0.9)+
  annotate(&quot;segment&quot;, x=4, xend = 8, y=1.2, yend = 1.2, size=2)+
  annotate(&quot;text&quot;, x=6, y=1.3, label=&quot;Text annotation&quot;)+
  theme_logo()
</code></pre>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq12.png" alt=""></p>
<h2 id="图形组合"><a href="#图形组合" class="headerlink" title="图形组合"></a>图形组合</h2><p>将<strong>ggseqlogo</strong>生成的图形与<strong>ggplot2</strong>生成的图形组合在一起。</p>
<pre><code class="{r}">p1 &lt;- ggseqlogo(seqs_dna$MA0008.1)+theme(axis.text.x = element_blank())
aln &lt;- data.frame(
  letter=strsplit(&quot;AGATAAGATGATAAAAAGATAAGA&quot;, &quot;&quot;)[[1]],
  species=rep(c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;), each=8),
  x=rep(1:8,3)
)
aln$mut &lt;- &quot;no&quot;
aln$mut[c(2,15,20,23)]=&quot;yes&quot;
p2 &lt;- ggplot(aln, aes(x, species)) +
  geom_text(aes(label=letter, color=mut, size=mut)) + 
  scale_x_continuous(breaks=1:10, expand = c(0.105, 0)) + xlab(&#39;&#39;) + 
  scale_color_manual(values=c(&#39;black&#39;, &#39;red&#39;)) + 
  scale_size_manual(values=c(5, 6)) + 
  theme_logo() + 
  theme(legend.position = &#39;none&#39;, axis.text.x = element_blank()) 
bp_data &lt;- data.frame(
  x=1:8, 
  conservation=sample(1:100, 8)
)
p3 &lt;- ggplot(bp_data, aes(x, conservation))+
  geom_bar(stat = &quot;identity&quot;, fill=&quot;grey&quot;)+
  theme_logo()+
  scale_x_continuous(breaks = 1:10, expand = c(0.105, 0))+
  xlab(&quot;&quot;)
suppressMessages(require(cowplot))
plot_grid(p1,p2,p3,ncol = 1, align = &quot;v&quot;)
</code></pre>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq13.png" alt=""></p>
<h2 id="SessionInfo"><a href="#SessionInfo" class="headerlink" title="SessionInfo"></a>SessionInfo</h2><pre><code class="{r}">sessionInfo()
</code></pre>
<pre><code>## R version 3.4.3 (2017-11-30)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 17.10
## 
## Matrix products: default
## BLAS: /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3
## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3
## 
## locale:
##  [1] LC_CTYPE=zh_CN.UTF-8       LC_NUMERIC=C              
##  [3] LC_TIME=zh_CN.UTF-8        LC_COLLATE=zh_CN.UTF-8    
##  [5] LC_MONETARY=zh_CN.UTF-8    LC_MESSAGES=zh_CN.UTF-8   
##  [7] LC_PAPER=zh_CN.UTF-8       LC_NAME=C                 
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C       
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] cowplot_0.9.2 ggseqlogo_0.1 ggplot2_2.2.1
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.15     knitr_1.20       magrittr_1.5     munsell_0.4.3   
##  [5] colorspace_1.3-2 rlang_0.2.0      stringr_1.3.0    plyr_1.8.4      
##  [9] tools_3.4.3      grid_3.4.3       gtable_0.2.0     htmltools_0.3.6 
## [13] yaml_2.1.16      lazyeval_0.2.1   rprojroot_1.3-2  digest_0.6.15   
## [17] tibble_1.4.2     gridExtra_2.3    evaluate_0.10.1  rmarkdown_1.8   
## [21] labeling_0.3     stringi_1.1.6    compiler_3.4.3   pillar_1.1.0    
## [25] scales_0.5.0     backports_1.1.2
</code></pre><hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410</p>
<p>Email: tyan@zju.edu.cn</p>
<p>QQ: 1051927088</p>
<p>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a></p>
<p>简书: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a></p>
<p>博客: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://os3hnmzbp.bkt.clouddn.com/ggseq9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;sequence logo&lt;/strong&gt;图用来可视化一段序列某个位点的保守性，据根提供的序列组展示位点信息。这方面有很多在线小工具可以完成，这里使用R包&lt;a href=&quot;https://github.com/omarwagih/ggseqlogo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;ggseqlogo&lt;/strong&gt;&lt;/a&gt;进行可视化。&lt;/p&gt;
    
    </summary>
    
      <category term="可视化" scheme="https://ytlogos.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="seq_logo" scheme="https://ytlogos.github.io/tags/seq-logo/"/>
    
      <category term="ggseqlogo" scheme="https://ytlogos.github.io/tags/ggseqlogo/"/>
    
  </entry>
  
  <entry>
    <title>创建属于自己的调色板</title>
    <link href="https://ytlogos.github.io/2018/02/10/%E5%88%9B%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E8%B0%83%E8%89%B2%E6%9D%BF/"/>
    <id>https://ytlogos.github.io/2018/02/10/创建属于自己的调色板/</id>
    <published>2018-02-10T04:19:05.000Z</published>
    <updated>2018-02-28T04:01:09.751Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://os3hnmzbp.bkt.clouddn.com/palette.jpeg" alt=""></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们知道发表文章的时候不同杂志的配色方案是不同的，如果参加工作的话，不同公司的配色方案也是不一样的，每个人的色觉也是不一样的，所以如果可以创建属于自己的配色方案的话以后可视化就可以随心所欲了。</p>
<a id="more"></a>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>接下来我将基于下面的几种颜色创建属于我自己的调色板</p>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/color.png" alt=""></p>
<p>主要有以下几个方面：</p>
<ul>
<li>将颜色与其对应的十六进制矢量联系起来</li>
<li>创建访问十六进制矢量的函数</li>
<li>调色板命名</li>
<li>访问调用调色板</li>
<li>创建兼容<strong>ggplot2</strong>的尺度函数</li>
</ul>
<p>首先我们创建一个颜色变量</p>
<pre><code class="{r}">library(ggplot2)
theme_set(theme_minimal())
my_colors &lt;- c(
  `purple` = &quot;#7b0099&quot;,
  `yellow` = &quot;#ff9900&quot;,
  `black`  = &quot;#221f1f&quot;,
  `white`  = &quot;#f5f5f1&quot;,
  `red`    = &quot;#e50914&quot;
)
</code></pre>
<p>后续如果需要对颜色进行修改或添加都可以在这个颜色变量中进行。<br>下面创建一个可以从该变量中提取颜色对应的十六进制的函数</p>
<pre><code class="{r}">#&#39; Function to extract my_colors as hex codes
#&#39;
#&#39; @param ... Character names of my_colors
#&#39;
my_cols &lt;- function(...){
  cols &lt;- c(...)

  if (is.null(cols))
    return(my_colors)
  my_colors[cols]
}
</code></pre>
<p>此时我们可以十分方便获取颜色的十六进制，下面演示一下：</p>
<pre><code class="{r}">my_cols()
</code></pre>
<pre><code>##    purple    yellow     black     white       red 
## &quot;#7b0099&quot; &quot;#ff9900&quot; &quot;#221f1f&quot; &quot;#f5f5f1&quot; &quot;#e50914&quot;
</code></pre><pre><code>my_cols(&quot;purple&quot;)
</code></pre><pre><code>##    purple 
## &quot;#7b0099&quot;
</code></pre><pre><code>my_cols(&quot;purple&quot;,&quot;yellow&quot;)
</code></pre><pre><code>##    purple    yellow 
## &quot;#7b0099&quot; &quot;#ff9900&quot;
</code></pre><pre><code>my_cols(&quot;yellow&quot;,&quot;purple&quot;)
</code></pre><pre><code>##    yellow    purple 
## &quot;#ff9900&quot; &quot;#7b0099&quot;
</code></pre><p>此时我们可以在<strong>ggplot2</strong>中调用这些颜色</p>
<pre><code class="{r}">#使用gapminder包中的数据集gapminder来演示
library(gapminder)
head(gapminder)
</code></pre>
<pre><code>## # A tibble: 6 x 6
##   country     continent  year lifeExp      pop gdpPercap
##   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;
## 1 Afghanistan Asia       1952    28.8  8425333       779
## 2 Afghanistan Asia       1957    30.3  9240934       821
## 3 Afghanistan Asia       1962    32.0 10267083       853
## 4 Afghanistan Asia       1967    34.0 11537966       836
## 5 Afghanistan Asia       1972    36.1 13079460       740
## 6 Afghanistan Asia       1977    38.4 14880372       786
</code></pre><pre><code>ggplot(gapminder, aes(gdpPercap, lifeExp))+
  geom_point(color=my_cols(&quot;purple&quot;), size=2, alpha=0.8)+
  scale_x_log10()
</code></pre><p><img src="http://os3hnmzbp.bkt.clouddn.com/1-1.png" alt=""></p>
<h2 id="创建调色板"><a href="#创建调色板" class="headerlink" title="创建调色板"></a>创建调色板</h2><p>调色板就是一个颜色列表方便我们后面使用，将各种颜色组合搭配</p>
<pre><code class="{r}">my_palettes &lt;- list(
  `main`  = my_cols(&quot;purple&quot;,&quot;yellow&quot;,&quot;red&quot;),
  `cool`  = my_cols(&quot;purple&quot;,&quot;yellow&quot;),
  `hot`   = my_cols(&quot;yellow&quot;,&quot;black&quot;,&quot;red&quot;),
  `mixed` = my_cols(&quot;purple&quot;,&quot;yellow&quot;,&quot;white&quot;,&quot;red&quot;),
  `bw`    = my_cols(&quot;black&quot;,&quot;white&quot;)
)
</code></pre>
<p>在这个颜色列表中实际上我们创建了好几种颜色组合，下面创建一个函数来访问并调用它们</p>
<pre><code class="{r}">#&#39; Return function to interpolate a my_palettes
#&#39;
#&#39; @param palette Character name of palette in my_palettes
#&#39; @param reverse Boolean indicating whether the palette should be reversed
#&#39; @param ... Additional arguments to pass to colorRampPalette()
#&#39;
my_pal &lt;- function(palette=&quot;main&quot;, reverse=FALSE, ...){
  pal &lt;- my_palettes[[palette]]
  if (reverse) pal &lt;- rev(pal)
  colorRampPalette(pal, ...)
}
</code></pre>
<p>该函数通过不同颜色组合名称从列表中获取一个颜色组合（默认条件下是<code>main</code>），同时可以设置是否颠倒颜色顺序，之后传递给函数colorRampPaette()创建调色板。因此其返回的是一个函数。</p>
<pre><code class="{r}">my_pal(&quot;cool&quot;)
</code></pre>
<pre><code>## function (n) 
## {
##     x &lt;- ramp(seq.int(0, 1, length.out = n))
##     if (ncol(x) == 4L) 
##         rgb(x[, 1L], x[, 2L], x[, 3L], x[, 4L], maxColorValue = 255)
##     else rgb(x[, 1L], x[, 2L], x[, 3L], maxColorValue = 255)
## }
## &lt;bytecode: 0x55ade91b4b70&gt;
## &lt;environment: 0x55ade91b3e20&gt;
</code></pre><p>通过这个函数可以基于调色板返回不同数目的颜色，进而可以在原始颜色之间创建多级颜色梯度</p>
<pre><code class="{r}">my_pal(&quot;cool&quot;)(10)
</code></pre>
<pre><code>##  [1] &quot;#7B0099&quot; &quot;#891188&quot; &quot;#982277&quot; &quot;#A73266&quot; &quot;#B54455&quot; &quot;#C45544&quot; &quot;#D36533&quot;
##  [8] &quot;#E17622&quot; &quot;#F08810&quot; &quot;#FF9900&quot;
</code></pre><pre><code>pie(rep(1,10), col = my_pal(&quot;cool&quot;)(10))
</code></pre><p><img src="http://os3hnmzbp.bkt.clouddn.com/2-1.png" alt=""></p>
<p>上图展示的10种颜色就是<code>my_pal(&quot;cool&quot;)(10)</code>返回的十六进制对应的颜色，这就为<strong>ggplot2</strong>中的尺度颜色函数创造了可能</p>
<h2 id="Scales-for-ggplot2"><a href="#Scales-for-ggplot2" class="headerlink" title="Scales for ggplot2"></a>Scales for ggplot2</h2><p><strong>ggplot2</strong>中颜色映射有<code>color</code>和<code>fill</code>即颜色和填充。</p>
<pre><code class="{r}">#&#39; Color scale constructor for my_colors
#&#39; 
#&#39; @param palette Character name of palette in my_palettes
#&#39; @param discrete Boolean indicating whether color aesthetic is discrete or not
#&#39; @param reverse Boolean indicating whether the palette should be reversed
#&#39; @param ... Additional arguments passed to discrete_scale() or scale_color_gradientn(), used #&#39; #&#39; respectively when discrete is TRUE or FALSE
#&#39; 
scale_color_my &lt;- function(palette=&quot;main&quot;, discrete=TRUE, reverse=FALSE, ...){
  pal &lt;- my_pal(palette = palette, reverse = reverse)

  if (discrete){
    discrete_scale(&quot;colour&quot;, paste0(&quot;my_&quot;, palette), palette = pal, ...)
  }else{
    scale_color_gradientn(colours = pal(256), ...)
  }
}

#&#39; Fill scale constructor for my_colors
#&#39;
#&#39; @param palette Character name of palette in my_palettes
#&#39; @param discrete Boolean indicating whether color aesthetic is discrete or not
#&#39; @param reverse Boolean indicating whether the palette should be reversed
#&#39; @param ... Additional arguments passed to discrete_scale() or scale_color_gradientn(), used #&#39; #&#39; respectively when discrete is TRUE or FALSE
#&#39; 
scale_fill_my &lt;- function(palette=&quot;main&quot;, discrete=TRUE, reverse=FALSE, ...){
  pal &lt;- my_pal(palette = palette, reverse = reverse)
  if (discrete){
    discrete_scale(&quot;fill&quot;,paste0(&quot;my_&quot;, palette), palette = pal, ...)
  }else{
    scale_fill_gradientn(colours = pal(256), ...)
  }
}
</code></pre>
<p>上面每个函数都制定一个调色板（默认是<code>main</code>），调色板是基于离散变量或连续变量，以及是否颠倒颜色顺序，同时还传递给了相关的<strong>ggplot2</strong>函数。下面可以试试它们在绘图过程中的表现</p>
<pre><code class="{r}">ggplot(gapminder,aes(gdpPercap, lifeExp, color=continent))+
  geom_point(size=2, alpha=0.8)+
  scale_x_log10()+
  scale_color_my()
</code></pre>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/3-1.png" alt=""></p>
<p>我们可以更换调色板试试</p>
<pre><code class="{r}">ggplot(gapminder,aes(gdpPercap, lifeExp, color=continent))+
  geom_point(size=2, alpha=0.8)+
  scale_x_log10()+
  scale_color_my(palette = &quot;hot&quot;)
</code></pre>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/4-1.png" alt=""></p>
<p>如果是连续变量的话</p>
<pre><code class="{r}">ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
    geom_point(size = 4, alpha = .8) +
    scale_color_my(discrete = FALSE, palette = &quot;bw&quot;, reverse = TRUE)
</code></pre>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/5-1.png" alt=""></p>
<p>上面是颜色，下面试试填充</p>
<pre><code class="{r}">ggplot(mpg, aes(manufacturer, fill = manufacturer)) +
    geom_bar() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    scale_fill_my(palette = &quot;mixed&quot;, guide = &quot;none&quot;)
</code></pre>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/6-1.png" alt=""></p>
<h2 id="包的创建"><a href="#包的创建" class="headerlink" title="包的创建"></a>包的创建</h2><p>通过上面的内容可以看出，如果我们会创建包的话，将上述代码封装在一起再加上一些元素就形成了一个包，可以方便自己或他人后续使用。如果要创建包的话，可以学习<a href="https://twitter.com/hadleywickham" target="_blank" rel="external">Hadley Wickham</a>的书<a href="http://r-pkgs.had.co.nz/" target="_blank" rel="external">R packages</a>。</p>
<h2 id="SessionInfo"><a href="#SessionInfo" class="headerlink" title="SessionInfo"></a>SessionInfo</h2><pre><code class="{r}">sessionInfo()
</code></pre>
<pre><code>## R version 3.4.3 (2017-11-30)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 17.10
## 
## Matrix products: default
## BLAS: /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3
## LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3
## 
## locale:
##  [1] LC_CTYPE=zh_CN.UTF-8       LC_NUMERIC=C              
##  [3] LC_TIME=zh_CN.UTF-8        LC_COLLATE=zh_CN.UTF-8    
##  [5] LC_MONETARY=zh_CN.UTF-8    LC_MESSAGES=zh_CN.UTF-8   
##  [7] LC_PAPER=zh_CN.UTF-8       LC_NAME=C                 
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
## [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C       
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] gapminder_0.3.0 ggplot2_2.2.1  
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.15     knitr_1.20       magrittr_1.5     munsell_0.4.3   
##  [5] colorspace_1.3-2 rlang_0.2.0      stringr_1.3.0    plyr_1.8.4      
##  [9] tools_3.4.3      grid_3.4.3       gtable_0.2.0     utf8_1.1.3      
## [13] cli_1.0.0        htmltools_0.3.6  assertthat_0.2.0 yaml_2.1.16     
## [17] lazyeval_0.2.1   rprojroot_1.3-2  digest_0.6.15    tibble_1.4.2    
## [21] crayon_1.3.4     evaluate_0.10.1  rmarkdown_1.8    labeling_0.3    
## [25] stringi_1.1.6    compiler_3.4.3   pillar_1.1.0     scales_0.5.0    
## [29] backports_1.1.2
</code></pre><hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410</p>
<p>Email: tyan@zju.edu.cn</p>
<p>QQ: 1051927088</p>
<p>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a></p>
<p>简书: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a></p>
<p>博客: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://os3hnmzbp.bkt.clouddn.com/palette.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;我们知道发表文章的时候不同杂志的配色方案是不同的，如果参加工作的话，不同公司的配色方案也是不一样的，每个人的色觉也是不一样的，所以如果可以创建属于自己的配色方案的话以后可视化就可以随心所欲了。&lt;/p&gt;
    
    </summary>
    
      <category term="可视化" scheme="https://ytlogos.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="调色板" scheme="https://ytlogos.github.io/tags/%E8%B0%83%E8%89%B2%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>Shell编程：运算符</title>
    <link href="https://ytlogos.github.io/2018/02/09/Shell%E7%BC%96%E7%A8%8B%EF%BC%9A%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://ytlogos.github.io/2018/02/09/Shell编程：运算符/</id>
    <published>2018-02-09T13:19:05.000Z</published>
    <updated>2018-02-27T14:24:31.906Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://os3hnmzbp.bkt.clouddn.com/yunsuanfu.jpeg" alt=""></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Shell支持多种运算符：</p>
<ul>
<li>算术运算符</li>
<li>布尔运算符</li>
<li>关系运算符</li>
<li>字符串运算符</li>
<li>文件测试运算符</li>
</ul>
<a id="more"></a>
<p>原生bash不支持简单的数学运算，但是可以通过expr等来实现。例如两个数相加：</p>
<blockquote>
<p>需要注意的是使用的是反引号`，而不是单引号’。另外表达式与运算符之间要有空格。</p>
</blockquote>
<pre><code>#!/bin/bash
#创建测试脚本test.sh

add=`expr 3 + 5`
echo &quot;两数之和为：$add&quot;
</code></pre><p>运行脚本之后结果如下：</p>
<pre><code>$ ./test.sh        
两数之和为：4
</code></pre><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>算术运算符主要如下：假设a=10,b=20</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>加法</td>
<td>`expr \$a + \$b`结果为30</td>
</tr>
<tr>
<td>-</td>
<td>减法</td>
<td>`expr \$a + \$b`结果为-10</td>
</tr>
<tr>
<td>*</td>
<td>乘法</td>
<td>`expr \$a*\$b`结果为200</td>
</tr>
<tr>
<td>/</td>
<td>除法</td>
<td>`expr \$b/\$a`结果为2</td>
</tr>
<tr>
<td>%</td>
<td>取余</td>
<td>`expr \$b\%\$a`结果为0</td>
</tr>
<tr>
<td>=</td>
<td>赋值</td>
<td>a=$b将变量b的值赋值给a</td>
</tr>
<tr>
<td>==</td>
<td>相等，用于比较两个数字是否相等，是则返回TRUE，否则返回FALSE</td>
<td>[ \$a==\$b ]结果返回FALSE</td>
</tr>
<tr>
<td>!=</td>
<td>不相等</td>
<td>[ \$a!=\$b ]结果返回TRUE</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意的是表达式要放在括号之间，并且要有空格。</p>
</blockquote>
<h3 id="举个例子说明"><a href="#举个例子说明" class="headerlink" title="举个例子说明"></a>举个例子说明</h3><pre><code>#!/bin/bash
#创建测试脚本test.sh
m=12
n=5
#加法
val=`expr $m + $n`
echo &quot;m+n= $val&quot;
#减法
val=`expr $m - $n`
echo &quot;m-n= $val&quot;
#乘法
val=`expr $m \* $n`
echo &quot;m*n= $val&quot;
#乘法
val=`expr $m / $n`
echo &quot;m/n= $val&quot;
#乘法
val=`expr $m % $n`
echo &quot;m%n= $val&quot;

#相等
if [ $m == $n ]
then
        echo &quot;m=n&quot;
fi
#不相等
if [ $m != $n ]
then
        echo &quot;m!=n&quot;
</code></pre><p>运行脚本结果如下：</p>
<pre><code>$ ./test.sh 
m+n= 17
m-n= 7
m*n= 60
m/n= 2
m%n= 2
m!=n
</code></pre><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>关系运算符只支持数字，假设a=10,b=20:</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>-eq</td>
<td>是否相等</td>
<td>[ \$a -eq \$b ]结果返回FALSE</td>
</tr>
<tr>
<td>-ne</td>
<td>是否不相等</td>
<td>[ \$a -ne \$b ]结果返回TRUE</td>
</tr>
<tr>
<td>-gt</td>
<td>左边是否大于右边</td>
<td>[ \$a -gt \$b ]结果返回FALSE</td>
</tr>
<tr>
<td>-lt</td>
<td>左边是否小于是否右边</td>
<td>[ \$a -lt \$b ]结果返回TRUE</td>
</tr>
<tr>
<td>-ge</td>
<td>左边是否大于等于右边</td>
<td>[ \$a -ge \$b ]结果返回FALSE</td>
</tr>
<tr>
<td>-eq</td>
<td>左边是否小于等于右边</td>
<td>[ \$a -le \$b ]结果返回TRUE</td>
</tr>
</tbody>
</table>
<h3 id="举个例子说明-1"><a href="#举个例子说明-1" class="headerlink" title="举个例子说明"></a>举个例子说明</h3><pre><code>#!/bin/bash
# 创建测试脚本test.sh

a=10
b=20

if [ $a -eq $b ]
then
   echo &quot;$a -eq $b : a 等于 b&quot;
else
   echo &quot;$a -eq $b: a 不等于 b&quot;
fi
if [ $a -ne $b ]
then
   echo &quot;$a -ne $b: a 不等于 b&quot;
else
   echo &quot;$a -ne $b : a 等于 b&quot;
fi
if [ $a -gt $b ]
then
   echo &quot;$a -gt $b: a 大于 b&quot;
else
   echo &quot;$a -gt $b: a 不大于 b&quot;
fi
if [ $a -lt $b ]
then
   echo &quot;$a -lt $b: a 小于 b&quot;
else
   echo &quot;$a -lt $b: a 不小于 b&quot;
fi
if [ $a -ge $b ]
then
   echo &quot;$a -ge $b: a 大于或等于 b&quot;
else
   echo &quot;$a -ge $b: a 小于 b&quot;
fi
if [ $a -le $b ]
then
   echo &quot;$a -le $b: a 小于或等于 b&quot;
else
   echo &quot;$a -le $b: a 大于 b&quot;
fi
</code></pre><p>运行脚本结果如下：</p>
<pre><code>$ ./test.sh 
10 -eq 20: a 不等于 b
10 -ne 20: a 不等于 b
10 -gt 20: a 不大于 b
10 -lt 20: a 小于 b
10 -ge 20: a 小于 b
10 -le 20: a 小于或等于 b
</code></pre><h2 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h2><p>假设a=10,b=20</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>！</td>
<td>非运算</td>
<td>[ !false ]返回TRUE</td>
</tr>
<tr>
<td>-o</td>
<td>或运算</td>
<td>[ \$a -lt 20 -o \$b -gt 100 ] 返回true。</td>
</tr>
<tr>
<td>-a</td>
<td>与运算</td>
<td>[ \$a -lt 20 -a \$b -gt 100 ] 返回false</td>
</tr>
</tbody>
</table>
<h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><pre><code>#!/bin/bash
# 创建测试脚本test.sh

a=10
b=20

if [ $a != $b ]
then
   echo &quot;$a != $b : a 不等于 b&quot;
else
   echo &quot;$a != $b: a 等于 b&quot;
fi
if [ $a -lt 100 -a $b -gt 15 ]
then
   echo &quot;$a 小于 100 且 $b 大于 15 : 返回 true&quot;
else
   echo &quot;$a 小于 100 且 $b 大于 15 : 返回 false&quot;
fi
if [ $a -lt 100 -o $b -gt 100 ]
then
   echo &quot;$a 小于 100 或 $b 大于 100 : 返回 true&quot;
else
   echo &quot;$a 小于 100 或 $b 大于 100 : 返回 false&quot;
fi
if [ $a -lt 5 -o $b -gt 100 ]
then
   echo &quot;$a 小于 5 或 $b 大于 100 : 返回 true&quot;
else
   echo &quot;$a 小于 5 或 $b 大于 100 : 返回 false&quot;
fi
</code></pre><p>运行脚本结果如下：</p>
<pre><code>$ ./test.sh 
10 != 20 : a 不等于 b
10 小于 100 且 20 大于 15 : 返回 true
10 小于 100 或 20 大于 100 : 返回 true
10 小于 5 或 20 大于 100 : 返回 false
</code></pre><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>假设a=10,b=20</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;&amp;</td>
<td>逻辑的AND</td>
<td>[[ \$a -lt 100 &amp;&amp; \$b -gt 100 ]] 返回 false</td>
</tr>
<tr>
<td>\</td>
<td>\</td>
<td></td>
<td>逻辑的OR</td>
<td>[[ \$a -lt 100 \</td>
<td>\</td>
<td>\$b -gt 100 ]] 返回 true</td>
</tr>
</tbody>
</table>
<h3 id="举例说明-1"><a href="#举例说明-1" class="headerlink" title="举例说明"></a>举例说明</h3><pre><code>#!/bin/bash
# 创建测试脚本test.sh

a=10
b=20

if [[ $a -lt 100 &amp;&amp; $b -gt 100 ]]
then
   echo &quot;返回 true&quot;
else
   echo &quot;返回 false&quot;
fi

if [[ $a -lt 100 || $b -gt 100 ]]
then
   echo &quot;返回 true&quot;
else
   echo &quot;返回 false&quot;
fi
</code></pre><p>运行脚本结果如下：</p>
<pre><code>$ ./test.sh 
返回 false
返回 true
</code></pre><h2 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h2><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：<br>运算符|说明|例子<br>—|—-|—–<br>=|相等|[ \$a = \$b ] 返回 false<br>!=|不相等|[ \$a != \$b ] 返回 true<br>-z|字符串长度是否为0|[ -z \$a ] 返回 false<br>-n|字符串长度是否不为0|[ -n \$a ] 返回 true<br>str|字符串是否不为空|[ \$a ] 返回 true</p>
<h3 id="举例说明-2"><a href="#举例说明-2" class="headerlink" title="举例说明"></a>举例说明</h3><pre><code>#!/bin/bash
# 创建测试脚本test.sh

a=&quot;abc&quot;
b=&quot;efg&quot;

if [ $a = $b ]
then
   echo &quot;$a = $b : a 等于 b&quot;
else
   echo &quot;$a = $b: a 不等于 b&quot;
fi
if [ $a != $b ]
then
   echo &quot;$a != $b : a 不等于 b&quot;
else
   echo &quot;$a != $b: a 等于 b&quot;
fi
if [ -z $a ]
then
   echo &quot;-z $a : 字符串长度为 0&quot;
else
   echo &quot;-z $a : 字符串长度不为 0&quot;
fi
if [ -n $a ]
then
   echo &quot;-n $a : 字符串长度不为 0&quot;
else
   echo &quot;-n $a : 字符串长度为 0&quot;
fi
if [ $a ]
then
   echo &quot;$a : 字符串不为空&quot;
else
   echo &quot;$a : 字符串为空&quot;
fi
</code></pre><p>运行脚本结果如下：</p>
<pre><code>$ ./test.sh 
abc = efg: a 不等于 b
abc != efg : a 不等于 b
-z abc : 字符串长度不为 0
-n abc : 字符串长度不为 0
abc : 字符串不为空
</code></pre><h2 id="文件运算符"><a href="#文件运算符" class="headerlink" title="文件运算符"></a>文件运算符</h2><p>文件运算符主要用于检测文件属性。这里就不讲解了。</p>
<p>本文主要参考<a href="http://www.runoob.com/linux/linux-shell-basic-operators.html" target="_blank" rel="external">菜鸟教程</a></p>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>简书: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>博客: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://os3hnmzbp.bkt.clouddn.com/yunsuanfu.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Shell支持多种运算符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算术运算符&lt;/li&gt;
&lt;li&gt;布尔运算符&lt;/li&gt;
&lt;li&gt;关系运算符&lt;/li&gt;
&lt;li&gt;字符串运算符&lt;/li&gt;
&lt;li&gt;文件测试运算符&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Shell" scheme="https://ytlogos.github.io/categories/Shell/"/>
    
    
      <category term="运算符" scheme="https://ytlogos.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>利用gganimate可视化R-Ladies发展情况</title>
    <link href="https://ytlogos.github.io/2018/02/08/%E5%88%A9%E7%94%A8gganimate%E5%8F%AF%E8%A7%86%E5%8C%96R-Ladies%E5%8F%91%E5%B1%95%E6%83%85%E5%86%B5/"/>
    <id>https://ytlogos.github.io/2018/02/08/利用gganimate可视化R-Ladies发展情况/</id>
    <published>2018-02-08T04:19:05.000Z</published>
    <updated>2018-02-08T06:02:39.920Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180208/g0hLljaEb9.gif" alt="mark"></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这篇博客主要基于<a href="https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate" target="_blank" rel="external"><strong>d4tagirl</strong></a>,稍微有所修改。</p>
<a id="more"></a>
<h2 id="数据加载"><a href="#数据加载" class="headerlink" title="数据加载"></a>数据加载</h2><pre><code class="{r}">library(pacman)
p_load(tidyverse, gganomate, maps, ggthemes)
rladies &lt;- read_csv(url(&quot;https://raw.githubusercontent.com/d4tagirl/R-Ladies-growth-maps/master/rladies.csv&quot;))%&gt;%
  select(-1)
head(rladies)
</code></pre>
<pre><code>## # A tibble: 6 x 7
##   screen_name     location     created_at followers age_days     lon   lat
##   &lt;chr&gt;           &lt;chr&gt;        &lt;date&gt;         &lt;int&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;
## 1 RLadiesSF       San Francis~ 2012-10-15       916     1673 -122     37.8
## 2 RLadiesNYC      New York     2016-09-01       309      256 - 74.0   40.7
## 3 RLadiesIstanbul &lt;U+0130&gt;stanbul, T~ 2016-09-06       436      251   29.0   41.0
## 4 RLadiesBCN      Barcelona, ~ 2016-10-11       377      216    2.17  41.4
## 5 RLadiesColumbus Columbus, OH 2016-10-04       179      223 - 83.0   40.0
## 6 RLadiesBoston   Boston, MA   2016-09-06       259      251 - 71.1   42.4
</code></pre><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><p>主要是根据地理位置信息映射到地图上<br>```{r,fig.width=24, fig.height=18}<br>ggplot()+<br>  borders(“world”, color=”gray85”, fill=”grey80”)+<br>  geom_point(data = rladies, aes(lon, lat, size=followers), color=”purple”, alpha=0.5)+<br>  scale_size_continuous(range = c(8, 24), breaks = c(250, 500, 750, 1000))+<br>  labs(size=”Followers”, title=”                                             The development of R-Ladies’ Twitter accounts”,x=NULL,y=NULL)+<br>  theme(text = element_text(family = “Times New Roman”, color = “#EEEEEE”),<br>        plot.title = element_text(size=40,color = “#f9ba00”),<br>        plot.subtitle = element_text(size=14),<br>        axis.ticks = element_blank(),<br>        axis.text = element_blank(),<br>        panel.grid = element_blank(),<br>        panel.background = element_rect(fill=”#333333”),<br>        plot.background = element_rect(fill = “#333333”),<br>        legend.position = c(0.18,0.36),<br>        legend.background = element_blank(),<br>        legend.key = element_blank(),<br>        legend.text = element_text(size = 28),<br>        legend.title = element_text(size=28, color = “#f9ba00”))+<br>  annotate(geom = “text”,<br>           label=”Made by Logos ytlogos.github.io\nOriginally from d4tagirl <a href="https://d4tagirl.com" target="_blank" rel="external">https://d4tagirl.com</a>“,<br>           x=70, y=-55, size=10, family=”Helvetica Black”, color=”#f9ba00”, hjust=”left”)</p>
<pre><code>![mark](http://ov520p4qw.bkt.clouddn.com/ytlogos/180208/emDGG7e91G.png?imageslim)

## 动画展示
为了利用**gganimate**进行动态展示，需要构建一个映射变量：时间。同时为了使得可视化开始和结尾呈现的是空白，又构建了两个空白图层
</code></pre><p>ghost_points_ini &lt;- tibble(created_at=as.Date(“2011-09-01”), followers=0, lon=0, lat=0)<br>ghost_points_fin &lt;- tibble(created_at=seq(as.Date(“2017-05-16”), as.Date(“2017-05-30”),by=”days”), followers=0, lon=0,lat=0)</p>
<pre><code>
添加frame映射
</code></pre><p>map &lt;- ggplot()+<br>  borders(“world”, color=”gray85”, fill=”grey80”)+<br>  geom_point(data = rladies, aes(lon, lat, size=followers, frame=created_at, cumulative=TRUE), color=”purple”, alpha=0.5)+<br>  scale_size_continuous(range = c(4, 16), breaks = c(250, 500, 750, 1000))+<br>  geom_point(data = ghost_points_ini, aes(lon, lat, size=followers, frame=created_at, cumulative=TRUE), alpha=0)+<br>  geom_point(data = ghost_points_fin, aes(lon, lat, size=followers, frame=created_at, cumulative=TRUE), alpha=0)+<br>  labs(size=”Followers”, title=”The development of R-Ladies’ Twitter accounts”,x=NULL,y=NULL)+<br>  theme(text = element_text(family = “Times New Roman”, color = “#EEEEEE”),<br>        plot.title = element_text(size=28, color = “#f9ba00”),<br>        plot.subtitle = element_text(size=14),<br>        axis.ticks = element_blank(),<br>        axis.text = element_blank(),<br>        panel.grid = element_blank(),<br>        panel.background = element_rect(fill=”#333333”),<br>        plot.background = element_rect(fill = “#333333”),<br>        legend.position = c(0.18,0.36),<br>        legend.background = element_blank(),<br>        legend.key = element_blank(),<br>        legend.text = element_text(size = 18),<br>        legend.title = element_text(size=24, color = “#f9ba00”))+<br>  annotate(geom = “text”,<br>           label=”Made by Logos ytlogos.github.io\nOriginally from d4tagirl <a href="https://d4tagirl.com" target="_blank" rel="external">https://d4tagirl.com</a>“,<br>           x=70, y=-55, size=6, family=”Helvetica Black”, color=”#f9ba00”, hjust=”left”)<br>animation::ani.options(interval=0.15, ani.width=1500, ani.height=800, units=”in”)<br>gganimate::gganimate(map, filename = “d4tagirlmap.gif”)</p>
<pre><code>![mark](http://ov520p4qw.bkt.clouddn.com/ytlogos/180208/g0hLljaEb9.gif)

## SessionInfo
```{r}
sessionInfo()
</code></pre><pre><code>## R version 3.4.3 (2017-11-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 16299)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] ggthemes_3.4.0       maps_3.2.0           BiocInstaller_1.28.0
##  [4] forcats_0.2.0        stringr_1.2.0        dplyr_0.7.4         
##  [7] purrr_0.2.4          readr_1.1.1          tidyr_0.8.0         
## [10] tibble_1.4.2         ggplot2_2.2.1.9000   tidyverse_1.2.1     
## [13] pacman_0.4.6        
## 
## loaded via a namespace (and not attached):
##  [1] reshape2_1.4.3    haven_1.1.1       lattice_0.20-35  
##  [4] colorspace_1.3-2  htmltools_0.3.6   yaml_2.1.16      
##  [7] utf8_1.1.3        rlang_0.1.6       pillar_1.1.0     
## [10] foreign_0.8-69    glue_1.2.0        modelr_0.1.1     
## [13] readxl_1.0.0      bindrcpp_0.2      bindr_0.1        
## [16] plyr_1.8.4        munsell_0.4.3     gtable_0.2.0     
## [19] cellranger_1.1.0  rvest_0.3.2       psych_1.7.8      
## [22] evaluate_0.10.1   labeling_0.3      knitr_1.19       
## [25] parallel_3.4.3    broom_0.4.3       Rcpp_0.12.15     
## [28] scales_0.5.0.9000 backports_1.1.2   jsonlite_1.5     
## [31] mnormt_1.5-5      hms_0.4.1         digest_0.6.15    
## [34] stringi_1.1.6     grid_3.4.3        rprojroot_1.3-2  
## [37] cli_1.0.0         tools_3.4.3       magrittr_1.5     
## [40] lazyeval_0.2.1    crayon_1.3.4      pkgconfig_2.0.1  
## [43] xml2_1.2.0        lubridate_1.7.1   assertthat_0.2.0 
## [46] rmarkdown_1.8     httr_1.3.1        rstudioapi_0.7   
## [49] R6_2.2.2          nlme_3.1-131      compiler_3.4.3
</code></pre><hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410</p>
<p>Email: tyan@zju.edu.cn</p>
<p>QQ: 1051927088</p>
<p>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a></p>
<p>简书: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a></p>
<p>博客: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180208/g0hLljaEb9.gif&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;这篇博客主要基于&lt;a href=&quot;https://d4tagirl.com/2017/05/how-to-plot-animated-maps-with-gganimate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;d4tagirl&lt;/strong&gt;&lt;/a&gt;,稍微有所修改。&lt;/p&gt;
    
    </summary>
    
      <category term="可视化" scheme="https://ytlogos.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="地图" scheme="https://ytlogos.github.io/tags/%E5%9C%B0%E5%9B%BE/"/>
    
      <category term="gganimate" scheme="https://ytlogos.github.io/tags/gganimate/"/>
    
  </entry>
  
  <entry>
    <title>利用R语言绘制世界航班路线图</title>
    <link href="https://ytlogos.github.io/2018/02/07/%E5%88%A9%E7%94%A8R%E8%AF%AD%E8%A8%80%E7%BB%98%E5%88%B6%E4%B8%96%E7%95%8C%E8%88%AA%E7%8F%AD%E8%B7%AF%E7%BA%BF%E5%9B%BE/"/>
    <id>https://ytlogos.github.io/2018/02/07/利用R语言绘制世界航班路线图/</id>
    <published>2018-02-07T04:19:05.000Z</published>
    <updated>2018-02-07T06:19:41.066Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180207/6HckGG7Jfc.png?imageslim" alt="mark"></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文基于<strong>NASA</strong>的<a href="https://www.nasa.gov/specials/blackmarble/2016/globalmaps/BlackMarble_2016_01deg.jpg" target="_blank" rel="external">夜间地图</a>的基础上进行世界航班路线可视化，参考多篇博客以及可视化案例。</p>
<a id="more"></a>
<h2 id="包加载"><a href="#包加载" class="headerlink" title="包加载"></a>包加载</h2><p>本博客使用的包较多，利用<strong>pacman</strong>包里的<code>p_load()</code>函数进行加载</p>
<pre><code class="{r}">library(pacman)
p_load(tidyverse, data.table, geosphere, grid, jpeg, plyr)
</code></pre>
<h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>使用的数据来自于<a href="https://openflights.org/data.html" target="_blank" rel="external">OpenFlights.org</a>。</p>
<h3 id="数据下载"><a href="#数据下载" class="headerlink" title="数据下载"></a>数据下载</h3><pre><code>download.file(&quot;https://raw.githubusercontent.com/jpatokal/openflights/master/data/airlines.dat&quot;,
              destfile = &quot;airlines.dat&quot;, mode = &quot;wb&quot;)
download.file(&quot;https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat&quot;, 
              destfile = &quot;airports.dat&quot;, mode = &quot;wb&quot;)
download.file(&quot;https://raw.githubusercontent.com/jpatokal/openflights/master/data/routes.dat&quot;, 
              destfile = &quot;routes.dat&quot;, mode = &quot;wb&quot;)
</code></pre><h3 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h3><pre><code class="{r}">airlines &lt;- fread(&quot;airlines.dat&quot;, sep = &quot;,&quot;, skip = 1)
airports &lt;- fread(&quot;airports.dat&quot;, sep = &quot;,&quot;)
routes &lt;- fread(&quot;routes.dat&quot;, sep = &quot;,&quot;)
</code></pre>
<h3 id="数据整理"><a href="#数据整理" class="headerlink" title="数据整理"></a>数据整理</h3><pre><code class="{r}">#添加列名
colnames(airlines) &lt;- c(&quot;airline_id&quot;, &quot;name&quot;, &quot;alias&quot;, &quot;iata&quot;, &quot;icao&quot;, &quot;callisign&quot;, &quot;country&quot;, &quot;active&quot;)
colnames(airports) &lt;- c(&quot;airport_id&quot;, &quot;name&quot;, &quot;city&quot;, &quot;country&quot;,&quot;iata&quot;, &quot;icao&quot;, &quot;latitude&quot;, &quot;longitude&quot;,&quot;altitude&quot;, &quot;timezone&quot;,&quot;dst&quot;,&quot;tz_database_time_zone&quot;,&quot;type&quot;, &quot;source&quot;)
colnames(routes) &lt;- c(&quot;airline&quot;, &quot;airline_id&quot;, &quot;source_airport&quot;, &quot;source_airport_id&quot;,&quot;destination_airport&quot;,&quot;destination_airport_id&quot;,&quot;codeshare&quot;, &quot;stops&quot;,&quot;equipment&quot;)

#类型转换
routes$airline_id &lt;- as.numeric(routes$airline_id)
# airlines与routes数据融合
flights &lt;- left_join(routes, airlines, by=&quot;airline_id&quot;)
# flights与airports数据融合
airports_orig &lt;- airports[,c(5,7,8)]
colnames(airports_orig) &lt;- c(&quot;source_airport&quot;,&quot;source_airport_lat&quot;, &quot;source_airport_long&quot;)
airports_dest &lt;- airports[, c(5, 7, 8)]
colnames(airports_dest) &lt;- c(&quot;destination_airport&quot;, &quot;destination_airport_lat&quot;, &quot;destination_airport_long&quot;)
flights &lt;- left_join(flights, airports_orig, by = &quot;source_airport&quot;)
flights &lt;- left_join(flights, airports_dest, by = &quot;destination_airport&quot;)
#剔除缺失值
flights &lt;- na.omit(flights, cols = c(&quot;source_airport_long&quot;, &quot;source_airport_lat&quot;, &quot;destination_airport_long&quot;, &quot;destination_airport_lat&quot;))
#最后数据如下
head(flights[,c(1:5)])
</code></pre>
<p>下面就是准备地理信息数据</p>
<p>本文主要是可视化地理信息上的点与点之间的连接，这可以通过<strong>geosphere</strong>包里的函数<code>gcIntermediate()</code>很轻松实现。具体使用方法可以参考<a href="http://flowingdata.com/2011/05/11/how-to-map-connections-with-great-circles/" target="_blank" rel="external">这里</a></p>
<pre><code class="{r}"># 按航空公司拆分数据集
flights_split &lt;- split(flights, flights$name)
# Calculate intermediate points between each two locations
flights_all &lt;- lapply(flights_split, function(x) gcIntermediate(x[, c(&quot;source_airport_long&quot;, &quot;source_airport_lat&quot;)], x[, c(&quot;destination_airport_long&quot;, &quot;destination_airport_lat&quot;)], n=100, breakAtDateLine = FALSE, addStartEnd = TRUE, sp = TRUE))

# 转换为数据框
flights_fortified &lt;- lapply(flights_all, function(x) ldply(x@lines, fortify))

# Unsplit lists
flights_fortified &lt;- do.call(&quot;rbind&quot;, flights_fortified)

# Add and clean column with airline names
flights_fortified$name &lt;- rownames(flights_fortified)
flights_fortified$name &lt;- gsub(&quot;\\..*&quot;, &quot;&quot;, flights_fortified$name)

# Extract first and last observations for plotting source and destination points (i.e., airports)
flights_points &lt;- flights_fortified %&gt;%
  group_by(group) %&gt;%
  filter(row_number() == 1 | row_number() == n())
</code></pre>
<h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><p>接下来就是进行可视化了，前面讲了我们只是在<strong>NASA</strong>提供的夜间地球图上面进行数据映射，所以第一我们需要获取该背景地图。</p>
<h3 id="图片获取并渲染"><a href="#图片获取并渲染" class="headerlink" title="图片获取并渲染"></a>图片获取并渲染</h3><pre><code class="{r}">#下载图片
download.file(&quot;https://www.nasa.gov/specials/blackmarble/2016/globalmaps/BlackMarble_2016_01deg.jpg&quot;,
              destfile = &quot;BlackMarble_2016_01deg.jpg&quot;, mode = &quot;wb&quot;)
#加载并渲染图片
earth &lt;- readJPEG(&quot;BlackMarble_2016_01deg.jpg&quot;, native = TRUE)
earth &lt;- rasterGrob(earth, interpolate = TRUE)
</code></pre>
<h3 id="数据映射"><a href="#数据映射" class="headerlink" title="数据映射"></a>数据映射</h3><p>由于航空公司十分多，就挑选几个有名的航空公司进行可视化。</p>
<h4 id="Lufthansa-德国汉莎航空公司"><a href="#Lufthansa-德国汉莎航空公司" class="headerlink" title="Lufthansa(德国汉莎航空公司)"></a>Lufthansa(德国汉莎航空公司)</h4><pre><code class="{r}">ggplot() +
  annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) +
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.0, size = 0.0, data = flights_fortified) + 
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.2, size = 0.3, color = &quot;#f9ba00&quot;, data = flights_fortified[flights_fortified$name == &quot;Lufthansa&quot;, ]) + 
  geom_point(data = flights_points[flights_points$name == &quot;Lufthansa&quot;, ], aes(long, lat), alpha = 0.8, size = 0.1, colour = &quot;white&quot;) +
  theme(panel.background = element_rect(fill = &quot;#05050f&quot;, colour = &quot;#05050f&quot;), 
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.title = element_blank(), 
        axis.text = element_blank(), 
        axis.ticks.length = unit(0, &quot;cm&quot;),
        legend.position = &quot;none&quot;) +
  annotate(&quot;text&quot;, x = -150, y = -18, hjust = 0, size = 14,
           label = paste(&quot;Lufthansa&quot;), color = &quot;#f9ba00&quot;, family = &quot;Helvetica Black&quot;) +
  annotate(&quot;text&quot;, x = -150, y = -26, hjust = 0, size = 8, 
           label = paste(&quot;Flight routes&quot;), color = &quot;white&quot;) +
  annotate(&quot;text&quot;, x = -150, y = -30, hjust = 0, size = 7, 
           label = paste(&quot;ytlogos.github.io || NASA.gov || OpenFlights.org&quot;), color = &quot;white&quot;, alpha = 0.5) +
  coord_equal()
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180207/5g2k5l3afB.png?imageslim" alt="mark"></p>
<h4 id="Emirates-阿联酋航空公司"><a href="#Emirates-阿联酋航空公司" class="headerlink" title="Emirates(阿联酋航空公司)"></a>Emirates(阿联酋航空公司)</h4><pre><code class="{r}">ggplot() +
  annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) +
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.0, size = 0.0, data = flights_fortified) + 
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.2, size = 0.3, color = &quot;#ff0000&quot;, data = flights_fortified[flights_fortified$name == &quot;Emirates&quot;, ]) + 
  geom_point(data = flights_points[flights_points$name == &quot;Emirates&quot;, ], aes(long, lat), alpha = 0.8, size = 0.1, colour = &quot;white&quot;) +
  theme(panel.background = element_rect(fill = &quot;#05050f&quot;, colour = &quot;#05050f&quot;), 
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.title = element_blank(), 
        axis.text = element_blank(), 
        axis.ticks.length = unit(0, &quot;cm&quot;),
        legend.position = &quot;none&quot;) +
  annotate(&quot;text&quot;, x = -150, y = -18, hjust = 0, size = 14,
           label = paste(&quot;Emirates&quot;), color = &quot;#ff0000&quot;, family = &quot;Fontin&quot;) +
  annotate(&quot;text&quot;, x = -150, y = -26, hjust = 0, size = 8, 
           label = paste(&quot;Flight routes&quot;), color = &quot;white&quot;) +
  annotate(&quot;text&quot;, x = -150, y = -30, hjust = 0, size = 7, 
           label = paste(&quot;ytlogos.github.io || NASA.gov || OpenFlights.org&quot;), color = &quot;white&quot;, alpha = 0.5) +
  coord_equal()
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180207/mgl6B5ecaJ.png?imageslim" alt="mark"></p>
<h4 id="British-Airways-英国航空公司"><a href="#British-Airways-英国航空公司" class="headerlink" title="British Airways(英国航空公司)"></a>British Airways(英国航空公司)</h4><pre><code class="{r}">ggplot() +
  annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) +
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.0, size = 0.0, data = flights_fortified) + 
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.2, size = 0.3, color = &quot;#075aaa&quot;, data = flights_fortified[flights_fortified$name == &quot;British Airways&quot;, ]) + 
  geom_point(data = flights_points[flights_points$name == &quot;British Airways&quot;, ], aes(long, lat), alpha = 0.8, size = 0.1, colour = &quot;white&quot;) +
  theme(panel.background = element_rect(fill = &quot;#05050f&quot;, colour = &quot;#05050f&quot;), 
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.title = element_blank(), 
        axis.text = element_blank(), 
        axis.ticks.length = unit(0, &quot;cm&quot;),
        legend.position = &quot;none&quot;) +
  annotate(&quot;text&quot;, x = -150, y = -18, hjust = 0, size = 14,
           label = paste(&quot;BRITISH AIRWAYS&quot;), color = &quot;#075aaa&quot;, family = &quot;Baker Signet Std&quot;) +
  annotate(&quot;text&quot;, x = -150, y = -26, hjust = 0, size = 8, 
           label = paste(&quot;Flight routes&quot;), color = &quot;white&quot;) +
  annotate(&quot;text&quot;, x = -150, y = -30, hjust = 0, size = 7, 
           label = paste(&quot;ytlogos.github.io || NASA.gov || OpenFlights.org&quot;), color = &quot;white&quot;, alpha = 0.5) +
  coord_equal()
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180207/7H0j1CdIka.png?imageslim" alt="mark"></p>
<h4 id="Air-China-中国国航"><a href="#Air-China-中国国航" class="headerlink" title="Air China(中国国航)"></a>Air China(中国国航)</h4><pre><code class="{r}">ggplot() +
  annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) +
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.0, size = 0.0, data = flights_fortified) + 
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.2, size = 0.3, color = &quot;#F70C15&quot;, data = flights_fortified[flights_fortified$name == &quot;Air China&quot;, ]) + 
  geom_point(data = flights_points[flights_points$name == &quot;Air China&quot;, ], aes(long, lat), alpha = 0.8, size = 0.1, colour = &quot;white&quot;) +
  theme(panel.background = element_rect(fill = &quot;#05050f&quot;, colour = &quot;#05050f&quot;), 
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.title = element_blank(), 
        axis.text = element_blank(), 
        axis.ticks.length = unit(0, &quot;cm&quot;),
        legend.position = &quot;none&quot;) +
  annotate(&quot;text&quot;, x = -150, y = -18, hjust = 0, size = 14,
           label = paste(&quot;Air China&quot;), color = &quot;#F70C15&quot;, family = &quot;Times New Roman&quot;) +
  annotate(&quot;text&quot;, x = -150, y = -26, hjust = 0, size = 8, 
           label = paste(&quot;Flight routes&quot;), color = &quot;white&quot;) +
  annotate(&quot;text&quot;, x = -150, y = -30, hjust = 0, size = 7, 
           label = paste(&quot;ytlogos.github.io || NASA.gov || OpenFlights.org&quot;), color = &quot;white&quot;, alpha = 0.5) +
  coord_equal()
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180207/e9hHgKI1AE.png?imageslim" alt="mark"></p>
<h4 id="China-Southern-Airlines-中国南航"><a href="#China-Southern-Airlines-中国南航" class="headerlink" title="China Southern Airlines(中国南航)"></a>China Southern Airlines(中国南航)</h4><pre><code class="{r}">ggplot() +
  annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) +
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.0, size = 0.0, data = flights_fortified) + 
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.2, size = 0.3, color = &quot;#004D9D&quot;, data = flights_fortified[flights_fortified$name == &quot;China Southern Airlines&quot;, ]) + 
  geom_point(data = flights_points[flights_points$name == &quot;China Southern Airlines&quot;, ], aes(long, lat), alpha = 0.8, size = 0.1, colour = &quot;white&quot;) +
  theme(panel.background = element_rect(fill = &quot;#05050f&quot;, colour = &quot;#05050f&quot;), 
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.title = element_blank(), 
        axis.text = element_blank(), 
        axis.ticks.length = unit(0, &quot;cm&quot;),
        legend.position = &quot;none&quot;) +
  annotate(&quot;text&quot;, x = -150, y = -18, hjust = 0, size = 14,
           label = paste(&quot;China Southern Airlines&quot;), color = &quot;#004D9D&quot;, family = &quot;Times New Roman&quot;) +
  annotate(&quot;text&quot;, x = -150, y = -26, hjust = 0, size = 8, 
           label = paste(&quot;Flight routes&quot;), color = &quot;white&quot;) +
  annotate(&quot;text&quot;, x = -150, y = -30, hjust = 0, size = 7, 
           label = paste(&quot;ytlogos.github.io || NASA.gov || OpenFlights.org&quot;), color = &quot;white&quot;, alpha = 0.5) +
  coord_equal()
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180207/D0GeF9BC62.png?imageslim" alt="mark"></p>
<h3 id="一次性映射多家航空公司航行路线"><a href="#一次性映射多家航空公司航行路线" class="headerlink" title="一次性映射多家航空公司航行路线"></a>一次性映射多家航空公司航行路线</h3><pre><code class="{r}">#抽取数据集
flights_subset &lt;- c(&quot;Lufthansa&quot;, &quot;Emirates&quot;, &quot;British Airways&quot;)
flights_subset &lt;- flights_fortified[flights_fortified$name %in% flights_subset, ]
flights_subset_points &lt;- flights_subset%&gt;%
  group_by(group)%&gt;%
  filter(row_number()==1|row_number()==n())
#可视化
ggplot() +
  annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) +
  geom_path(aes(long, lat, group = id, color = name), alpha = 0.2, size = 0.3, data = flights_subset) + 
  geom_point(data = flights_subset_points, aes(long, lat), alpha = 0.8, size = 0.1, colour = &quot;white&quot;) +
  scale_color_manual(values = c(&quot;#f9ba00&quot;, &quot;#ff0000&quot;, &quot;#075aaa&quot;)) +
  theme(panel.background = element_rect(fill = &quot;#05050f&quot;, colour = &quot;#05050f&quot;), 
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.title = element_blank(), 
        axis.text = element_blank(), 
        axis.ticks.length = unit(0, &quot;cm&quot;),
        legend.position = &quot;none&quot;) +
  annotate(&quot;text&quot;, x = -150, y = -4, hjust = 0, size = 14, 
           label = paste(&quot;Lufthansa&quot;), color = &quot;#f9ba00&quot;, family = &quot;Helvetica Black&quot;) +
  annotate(&quot;text&quot;, x = -150, y = -11, hjust = 0, size = 14, 
           label = paste(&quot;Emirates&quot;), color = &quot;#ff0000&quot;, family = &quot;Fontin&quot;) +
  annotate(&quot;text&quot;, x = -150, y = -18, hjust = 0, size = 14, 
           label = paste(&quot;BRITISH AIRWAYS&quot;), color = &quot;#075aaa&quot;, family = &quot;Baker Signet Std&quot;) + 
  annotate(&quot;text&quot;, x = -150, y = -30, hjust = 0, size = 8, 
           label = paste(&quot;Flight routes&quot;), color = &quot;white&quot;) +
  annotate(&quot;text&quot;, x = -150, y = -34, hjust = 0, size = 7, 
           label = paste(&quot;ytlogos.github.io || NASA.gov || OpenFlights.org&quot;), color = &quot;white&quot;, alpha = 0.5) +
  coord_equal()
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180207/6HckGG7Jfc.png?imageslim" alt="mark"></p>
<h2 id="SessionInfo"><a href="#SessionInfo" class="headerlink" title="SessionInfo"></a>SessionInfo</h2><pre><code class="{r}">sessionInfo()
</code></pre>
<pre><code>R version 3.4.3 (2017-11-30)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows &gt;= 8 x64 (build 9200)

Matrix products: default

locale:
[1] LC_COLLATE=Chinese (Simplified)_China.936  LC_CTYPE=Chinese (Simplified)_China.936   
[3] LC_MONETARY=Chinese (Simplified)_China.936 LC_NUMERIC=C                              
[5] LC_TIME=Chinese (Simplified)_China.936    

attached base packages:
[1] grid      stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] plyr_1.8.4          jpeg_0.1-8          geosphere_1.5-7     data.table_1.10.4-3
 [5] forcats_0.2.0       stringr_1.2.0       dplyr_0.7.4         purrr_0.2.4        
 [9] readr_1.1.1         tidyr_0.8.0         tibble_1.4.2        ggplot2_2.2.1.9000 
[13] tidyverse_1.2.1     pacman_0.4.6       

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.15      cellranger_1.1.0  pillar_1.1.0      compiler_3.4.3    bindr_0.1        
 [6] tools_3.4.3       lubridate_1.7.1   jsonlite_1.5      nlme_3.1-131      gtable_0.2.0     
[11] lattice_0.20-35   pkgconfig_2.0.1   rlang_0.1.6       psych_1.7.8       cli_1.0.0        
[16] rstudioapi_0.7    yaml_2.1.16       parallel_3.4.3    haven_1.1.1       bindrcpp_0.2     
[21] xml2_1.2.0        httr_1.3.1        knitr_1.19        hms_0.4.1         glue_1.2.0       
[26] R6_2.2.2          readxl_1.0.0      foreign_0.8-69    sp_1.2-7          modelr_0.1.1     
[31] reshape2_1.4.3    magrittr_1.5      scales_0.5.0.9000 rvest_0.3.2       assertthat_0.2.0 
[36] mnormt_1.5-5      colorspace_1.3-2  stringi_1.1.6     lazyeval_0.2.1    munsell_0.4.3    
[41] broom_0.4.3       crayon_1.3.4
</code></pre><hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410</p>
<p>Email: tyan@zju.edu.cn</p>
<p>QQ: 1051927088</p>
<p>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a></p>
<p>简书: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a></p>
<p>博客: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180207/6HckGG7Jfc.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;本文基于&lt;strong&gt;NASA&lt;/strong&gt;的&lt;a href=&quot;https://www.nasa.gov/specials/blackmarble/2016/globalmaps/BlackMarble_2016_01deg.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;夜间地图&lt;/a&gt;的基础上进行世界航班路线可视化，参考多篇博客以及可视化案例。&lt;/p&gt;
    
    </summary>
    
      <category term="可视化" scheme="https://ytlogos.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="地图" scheme="https://ytlogos.github.io/tags/%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>R语言可视化学习笔记之gganimate包</title>
    <link href="https://ytlogos.github.io/2018/02/06/R%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bgganimate%E5%8C%85/"/>
    <id>https://ytlogos.github.io/2018/02/06/R语言可视化学习笔记之gganimate包/</id>
    <published>2018-02-06T06:19:05.000Z</published>
    <updated>2018-02-06T09:30:29.592Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180206/kHCkkicfkh.gif" alt="mark"></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://github.com/dgrtwo/gganimate" target="_blank" rel="external"><strong>gganimate</strong></a>包是<strong>ggplot2</strong>的扩展包，主要用于绘制动画。它在<strong>ggplot2</strong>的基础上了补充了一个美学映射<code>frame</code>，就像x,y,size,color,fill一样进行映射。</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>if(!require(devtools)) install.packages(&quot;devtools&quot;)
devtools::install_github(&quot;dgrtwo/gganimate&quot;)
</code></pre><blockquote>
<p>需要注意的是这个包依赖于<strong>ImageMagick</strong>来产生动画，如果自行安装的话在调用<strong>ImageMagick</strong>很容易出错，所以推荐在<strong>RStudio</strong>里面安装。</p>
</blockquote>
<pre><code>install.packages(&quot;installr&quot;)
installr::install.ImageMagick(&quot;http://www.imagemagick.org/script/download.php&quot;)
</code></pre><p>安装好之后以管理员身份运行<strong>RStudio</strong></p>
<h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><p>这里我们使用<strong>gapminder</strong>包里的数据集<code>gapminder</code>进行可视化</p>
<pre><code>library(gapminder)
library(ggplot2)
library(gganimate)
theme_set(theme_bw())
head(gapminder)
</code></pre><pre><code># A tibble: 6 x 6
  country     continent  year lifeExp      pop gdpPercap
  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;
1 Afghanistan Asia       1952    28.8  8425333       779
2 Afghanistan Asia       1957    30.3  9240934       821
3 Afghanistan Asia       1962    32.0 10267083       853
4 Afghanistan Asia       1967    34.0 11537966       836
5 Afghanistan Asia       1972    36.1 13079460       740
6 Afghanistan Asia       1977    38.4 14880372       786
</code></pre><pre><code>p &lt;- ggplot(gapminder, aes(gdpPercap, lifeExp, size=pop, color=continent,frame=year))+
  geom_point()+
  scale_x_log10()
 gganimate(p)
</code></pre><p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180206/cIEhbkd1CE.gif" alt="mark"></p>
<p>不管动画中的图形如何移动，坐标轴、图例等都是固定的。</p>
<h2 id="定制化"><a href="#定制化" class="headerlink" title="定制化"></a>定制化</h2><p>将<strong>gganimate</strong>与<strong>ggplot2</strong>结合起来可以定制化很多复杂的动画</p>
<pre><code>p2 &lt;- ggplot(gapminder, aes(gdpPercap, lifeExp, size=pop))+
  geom_point()+
  geom_point(aes(frame=year), color=&quot;red&quot;)+
  scale_x_log10()
gganimate(p2)
</code></pre><p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180206/lcD6kdcA73.gif" alt="mark"></p>
<p>如果要绘制累积效果图，<strong>gganimate</strong>提供了<code>cumalative</code>参数，这对于路径图来说十分是有效的</p>
<pre><code>p3 &lt;- ggplot(gapminder, aes(gdpPercap, lifeExp, frame=year, color=continent))+
  geom_path(aes(cumulative=TRUE, group=country))+
  scale_x_log10()+
  facet_wrap(~continent)
gganimate(p3)
</code></pre><p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180206/D2g6l8d18K.gif" alt="mark"></p>
<p>一般来说我们都是将时间映射给<code>frame</code>，这也符合我们的直觉，但是这并不意味着我们只能将时间映射给<code>frame</code>，我们可以将任何想要的变量映射给<code>frame</code>。</p>
<pre><code>p4 &lt;- ggplot(gapminder, aes(gdpPercap, lifeExp, size=pop, frame=continent))+
  geom_point(color=&quot;blue&quot;)+
  scale_x_log10()
gganimate(p4)
</code></pre><p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180206/jcbklhff47.gif" alt="mark"></p>
<blockquote>
<p>需要注意的是如何我们绘制的图形涉及到统计汇总比如geom_smooth()，那么在geom_smooth()图层中需要添加group映射。</p>
</blockquote>
<pre><code>p5 &lt;- ggplot(gapminder,aes(gdpPercap, lifeExp, size=pop, frame=year))+
  geom_point()+
  geom_smooth(aes(group=year),method = &quot;lm&quot;, show.legend = FALSE)+
  facet_wrap(~continent, scales = &quot;free&quot;)+
  scale_x_log10()
gganimate(p5)
</code></pre><p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180206/Hb2aac620H.gif" alt="mark"></p>
<p>最后如果需要控制动画播放速度，使用<code>interval</code>参数控制</p>
<pre><code>gganimate(p, interval = .2)
</code></pre><p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180206/kHCkkicfkh.gif" alt="mark"></p>
<h2 id="SessionInfo"><a href="#SessionInfo" class="headerlink" title="SessionInfo"></a>SessionInfo</h2><pre><code>sessionInfo()
</code></pre><pre><code>R version 3.4.3 (2017-11-30)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows &gt;= 8 x64 (build 9200)

Matrix products: default

locale:
[1] LC_COLLATE=Chinese (Simplified)_China.936 
[2] LC_CTYPE=Chinese (Simplified)_China.936   
[3] LC_MONETARY=Chinese (Simplified)_China.936
[4] LC_NUMERIC=C                              
[5] LC_TIME=Chinese (Simplified)_China.936    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods  
[7] base     

other attached packages:
[1] gganimate_0.1.0.9000 ggplot2_2.2.1.9000  
[3] gapminder_0.3.0     

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.15      rstudioapi_0.7    magrittr_1.5     
 [4] munsell_0.4.3     colorspace_1.3-2  rlang_0.1.6      
 [7] stringr_1.2.0     plyr_1.8.4        tools_3.4.3      
[10] grid_3.4.3        gtable_0.2.0      utf8_1.1.3       
[13] cli_1.0.0         withr_2.1.1.9000  htmltools_0.3.6  
[16] yaml_2.1.16       lazyeval_0.2.1    assertthat_0.2.0 
[19] digest_0.6.15     tibble_1.4.2      crayon_1.3.4     
[22] base64enc_0.1-3   animation_2.5     labeling_0.3     
[25] stringi_1.1.6     compiler_3.4.3    pillar_1.1.0     
[28] installr_0.19.0   scales_0.5.0.9000
</code></pre><hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410</p>
<p>Email: tyan@zju.edu.cn</p>
<p>QQ: 1051927088</p>
<p>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a></p>
<p>简书: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a></p>
<p>博客: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180206/kHCkkicfkh.gif&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/dgrtwo/gganimate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;gganimate&lt;/strong&gt;&lt;/a&gt;包是&lt;strong&gt;ggplot2&lt;/strong&gt;的扩展包，主要用于绘制动画。它在&lt;strong&gt;ggplot2&lt;/strong&gt;的基础上了补充了一个美学映射&lt;code&gt;frame&lt;/code&gt;，就像x,y,size,color,fill一样进行映射。&lt;/p&gt;
    
    </summary>
    
      <category term="可视化" scheme="https://ytlogos.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="gganimate" scheme="https://ytlogos.github.io/tags/gganimate/"/>
    
  </entry>
  
  <entry>
    <title>R语言可视化学习笔记之ggridges包</title>
    <link href="https://ytlogos.github.io/2018/02/05/R%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bggridges%E5%8C%85/"/>
    <id>https://ytlogos.github.io/2018/02/05/R语言可视化学习笔记之ggridges包/</id>
    <published>2018-02-05T06:19:05.000Z</published>
    <updated>2018-02-05T06:47:15.776Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180205/bhlKJ09j0e.png?imageslim" alt="mark"></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>ggridges</strong>包主要用来绘制山峦图。尤其是针对时间或者空间分布份可视化具有十分好的效果。<strong>ggridges</strong>主要提供两个几何图像函数：</p>
<ul>
<li>geom_ridgeline():主要绘制山脊线图</li>
<li>geom_density_ridges()：主要根据密度绘制山脊线图</li>
</ul>
<p>具体用法可以参考<a href="https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html" target="_blank" rel="external">官方文档</a></p>
<a id="more"></a>
<h2 id="geom-ridgeline"><a href="#geom-ridgeline" class="headerlink" title="geom_ridgeline()"></a>geom_ridgeline()</h2><pre><code class="{r}">library(ggridges)
library(tidyverse)
library(gridExtra)
my_data &lt;- data.frame(x=1:5, y=rep(1,5), height=c(0,1,-1,3,2))
plot_base &lt;- ggplot(my_data, aes(x, y, height=height))
grid.arrange(plot_base+geom_ridgeline(), 
             plot_base+geom_ridgeline(min_height=-2), ncol=2)
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180205/JjFA48a46m.png?imageslim" alt="mark"></p>
<h2 id="geom-density-ridges"><a href="#geom-density-ridges" class="headerlink" title="geom_density_ridges()"></a>geom_density_ridges()</h2><p>geom_density_ridges()函数首先会根据数据计算密度然后绘图，此时美学映射<code>height</code>没有必要写入函数中。下面使用<strong>lincoln_weather</strong>数据集。</p>
<pre><code class="{r}">library(viridis)
head(lincoln_weather[ ,1:4])
</code></pre>
<pre><code>## # A tibble: 6 x 4
##   CST      `Max Temperature [F]` `Mean Temperature [F]` `Min Temperature ~
##   &lt;chr&gt;                    &lt;int&gt;                  &lt;int&gt;              &lt;int&gt;
## 1 2016-1-1                    37                     24                 11
## 2 2016-1-2                    41                     23                  5
## 3 2016-1-3                    37                     23                  8
## 4 2016-1-4                    30                     17                  4
## 5 2016-1-5                    38                     29                 19
## 6 2016-1-6                    34                     33                 32
</code></pre><pre><code>ggplot(lincoln_weather, aes(x=`Mean Temperature [F]`, y=`Month`, fill=..x..))+
  geom_density_ridges_gradient(scale=3, rel_min_height=0.01, gradient_lwd = 1.)+
  scale_x_continuous(expand = c(0.01, 0))+
  scale_y_discrete(expand = c(0.01,0))+
  scale_fill_viridis(name=&quot;Temp. [F]&quot;, option = &quot;C&quot;)+
  labs(title=&quot;Temperature in Lincoln NE&quot;,
       subtitle=&quot;Mean temperature (Fahrenheit) by month for 2016\nData:Orogin CSV from the Weather Underground &quot;)+
  theme_ridges(font_size = 13, grid = FALSE)+
  theme(axis.title.y = element_blank())
</code></pre><p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180205/bhlKJ09j0e.png?imageslim" alt="mark"></p>
<h2 id="cyclinal-scales"><a href="#cyclinal-scales" class="headerlink" title="cyclinal scales"></a>cyclinal scales</h2><p>为了使得<strong>ggridges</strong>绘制的图形可视化效果最好，同时为了减少用户对颜色设置的困难，作者提供了<strong>cyclinal scales</strong>用于颜色轮转映射。</p>
<pre><code class="{r}">ggplot(diamonds, aes(x=price, y=cut, fill=cut))+
  geom_density_ridges(scale=4)+
  scale_fill_cyclical(values = c(&quot;blue&quot;, &quot;green&quot;))+
  theme_ridges(grid = FALSE)
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180205/ljf8Gcjh08.png?imageslim" alt="mark"></p>
<p>默认的，<strong>cyclinal scales</strong>为了防止误解是不绘制图例的，但是可以通过选项<code>guide=&quot;legend&quot;</code>添加图例。</p>
<pre><code class="{r}">ggplot(diamonds, aes(x=price, y=cut, fill=cut))+
  geom_density_ridges(scale=4)+
  scale_fill_cyclical(values = c(&quot;blue&quot;, &quot;green&quot;), guide=&quot;legend&quot;)+
  theme_ridges(grid = FALSE)
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180205/iGh734gaCG.png?imageslim" alt="mark"></p>
<p>跟<strong>ggplot2</strong>一样，图例是可以修改的,其他参数比如大小、透明度、形状等都是可以通过<strong>cyclinal scales</strong>修改。</p>
<pre><code class="{r}">ggplot(diamonds, aes(x=price, y=cut, fill=cut))+
  geom_density_ridges(scale=4)+
  scale_fill_cyclical(values = c(&quot;blue&quot;, &quot;green&quot;), guide=&quot;legend&quot;,
                      labels=c(&quot;Fair&quot;=&quot;blue&quot;, &quot;Good&quot;=&quot;green&quot;),
                      name=&quot;Fill colors&quot;)+
  theme_ridges(grid = FALSE)
</code></pre>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180205/5kmJIcg7EB.png?imageslim" alt="mark"></p>
<p>还有很多用法有兴趣的可以查看<a href="https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html" target="_blank" rel="external">官方文档</a>继续学习。</p>
<h2 id="SessionInfo"><a href="#SessionInfo" class="headerlink" title="SessionInfo"></a>SessionInfo</h2><pre><code class="{r}">sessionInfo()
</code></pre>
<pre><code>## R version 3.4.3 (2017-11-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 16299)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] viridis_0.5.0       viridisLite_0.3.0   gridExtra_2.3      
##  [4] forcats_0.2.0       stringr_1.2.0       dplyr_0.7.4        
##  [7] purrr_0.2.4         readr_1.1.1         tidyr_0.8.0        
## [10] tibble_1.4.2        tidyverse_1.2.1     ggridges_0.4.1.9990
## [13] ggplot2_2.2.1.9000 
## 
## loaded via a namespace (and not attached):
##  [1] reshape2_1.4.3    haven_1.1.1       lattice_0.20-35  
##  [4] colorspace_1.3-2  htmltools_0.3.6   yaml_2.1.16      
##  [7] utf8_1.1.3        rlang_0.1.6       pillar_1.1.0     
## [10] foreign_0.8-69    glue_1.2.0        modelr_0.1.1     
## [13] readxl_1.0.0      bindrcpp_0.2      bindr_0.1        
## [16] plyr_1.8.4        munsell_0.4.3     gtable_0.2.0     
## [19] cellranger_1.1.0  rvest_0.3.2       psych_1.7.8      
## [22] evaluate_0.10.1   labeling_0.3      knitr_1.19       
## [25] parallel_3.4.3    broom_0.4.3       Rcpp_0.12.15     
## [28] scales_0.5.0.9000 backports_1.1.2   jsonlite_1.5     
## [31] mnormt_1.5-5      hms_0.4.1         digest_0.6.15    
## [34] stringi_1.1.6     grid_3.4.3        rprojroot_1.3-2  
## [37] cli_1.0.0         tools_3.4.3       magrittr_1.5     
## [40] lazyeval_0.2.1    crayon_1.3.4      pkgconfig_2.0.1  
## [43] xml2_1.2.0        lubridate_1.7.1   assertthat_0.2.0 
## [46] rmarkdown_1.8     httr_1.3.1        rstudioapi_0.7   
## [49] R6_2.2.2          nlme_3.1-131      compiler_3.4.3
</code></pre><hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410</p>
<p>Email: tyan@zju.edu.cn</p>
<p>QQ: 1051927088</p>
<p>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a></p>
<p>简书: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a></p>
<p>博客: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180205/bhlKJ09j0e.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;ggridges&lt;/strong&gt;包主要用来绘制山峦图。尤其是针对时间或者空间分布份可视化具有十分好的效果。&lt;strong&gt;ggridges&lt;/strong&gt;主要提供两个几何图像函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geom_ridgeline():主要绘制山脊线图&lt;/li&gt;
&lt;li&gt;geom_density_ridges()：主要根据密度绘制山脊线图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体用法可以参考&lt;a href=&quot;https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="可视化" scheme="https://ytlogos.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="ggridges" scheme="https://ytlogos.github.io/tags/ggridges/"/>
    
  </entry>
  
  <entry>
    <title>Shell编程：数组</title>
    <link href="https://ytlogos.github.io/2018/02/04/Shell%E7%BC%96%E7%A8%8B%EF%BC%9A%E6%95%B0%E7%BB%84/"/>
    <id>https://ytlogos.github.io/2018/02/04/Shell编程：数组/</id>
    <published>2018-02-04T13:19:05.000Z</published>
    <updated>2018-02-27T14:23:57.504Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://os3hnmzbp.bkt.clouddn.com/数组.png" alt="数组"></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组中可以存放多个值。Bash只支持一维数组，初始化时无需定义数组大小，数组元素下标从0开始。Shell数组用括号表示，元素之间由空号隔开：</p>
<a id="more"></a>
<pre><code>array_name=(value1 value2 ... valuen)
</code></pre><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="创建数据"><a href="#创建数据" class="headerlink" title="创建数据"></a>创建数据</h3><pre><code>#!/bin/bash
my_array=(A B &quot;C&quot; D)
</code></pre><p>也可以通过下标赋值来定义数组</p>
<pre><code>array_name[0]=value0
array_name[1]=value1
array_name[2]=value2
</code></pre><h3 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h3><p>读取数组的一般格式为：</p>
<pre><code>${array_name[index]}
</code></pre><p>现在创建一个脚本<code>test.sh</code>来演示一下：</p>
<pre><code>#！/bin/bash
#创建脚本test.sh
my_array=(A B &quot;C&quot; D)
echo &quot;第一个元素为：${my_array[0]}&quot;
echo &quot;第二个元素为：${my_array[1]}&quot;
echo &quot;第三个元素为：${my_array[2]}&quot;
echo &quot;第四个元素为：${my_array[3]}&quot;
</code></pre><p>执行脚本结果如下</p>
<pre><code>$ chmod +x test.sh 
$ ./test.sh 
第一个元素为：A
第二个元素为：B
第三个元素为：C
第四个元素为：D
</code></pre><h3 id="获取数组中所有元素"><a href="#获取数组中所有元素" class="headerlink" title="获取数组中所有元素"></a>获取数组中所有元素</h3><p>使用@或者*可以获取数组中的所有元素</p>
<pre><code>#!/bin/bash
# 创建脚本test.sh

my_array[0]=A
my_array[1]=B
my_array[2]=C
my_array[3]=D

echo &quot;数组的元素为: ${my_array[*]}&quot;
echo &quot;数组的元素为: ${my_array[@]}&quot;
</code></pre><p>执行脚本结果如下：</p>
<pre><code>$ ./test.sh 
数组的元素为: A B C D
数组的元素为: A B C D
</code></pre><h3 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a>获取数组长度</h3><p>获取数组长度的方法与获取字符串长度的方法相同</p>
<pre><code>#!/bin/bash
# 创建脚本test.sh

my_array[0]=A
my_array[1]=B
my_array[2]=C
my_array[3]=D

echo &quot;数组元素个数为: ${#my_array[*]}&quot;
echo &quot;数组元素个数为: ${#my_array[@]}&quot;
</code></pre><p>执行脚本结果如下</p>
<pre><code>$ ./test.sh 
数组元素个数为: 4
数组元素个数为: 4
</code></pre><h3 id="数组的值也可以写入变量"><a href="#数组的值也可以写入变量" class="headerlink" title="数组的值也可以写入变量"></a>数组的值也可以写入变量</h3><pre><code>#!/bin/bash
# 创建脚本test.sh

A=1
my_array=($A B C D)
echo &quot;第一个元素为：${my_array[0]}&quot;
echo &quot;第二个元素为：${my_array[1]}&quot;
echo &quot;第三个元素为：${my_array[2]}&quot;
echo &quot;第四个元素为：${my_array[3]}&quot;
</code></pre><p>执行脚本结果如下</p>
<pre><code>$ ./test.sh 
第一个元素为：1
第二个元素为：B
第三个元素为：C
第四个元素为：D
</code></pre><h3 id="数组下标也可以为变量"><a href="#数组下标也可以为变量" class="headerlink" title="数组下标也可以为变量"></a>数组下标也可以为变量</h3><pre><code>#!/bin/bash
# 创建脚本test.sh

my_array=(A B C D)

i=2
echo ${my_array[i]}
</code></pre><p>执行脚本结果如下</p>
<pre><code>$ ./test.sh 
C
</code></pre><h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><p>这里讲解几种方法用于数据遍历</p>
<pre><code>#!/bin/bash
# 创建演示脚本test.sh
my_array=(A B C D E F G)
echo &quot;---------for循环遍历数组-----------&quot;
for i in ${my_array[@]}
do
        echo $i
done

echo &quot;--------while循环遍历数组，使用let i++自增-------------&quot;
i=0
#注意[与$之间要有空格，否则报错,下同
while [ $i -lt ${#my_array[@]} ]
do
        echo ${my_array[$i]}
        let i++
done

echo &quot;-------while循环遍历数组，使用let &quot;n++ &quot;自增：双引号可有可无，推荐加上双引号-----------&quot;
n=0
while [ $n -lt ${#my_array[@]} ]
do
        echo ${my_array[$n]}
        let &quot;n++&quot;
done

echo &quot;-----------while循环遍历数组，使用let m+=1自增--------------&quot;

m=0
while [ $m -lt ${#my_array[@]} ]
do
        echo ${my_array[$m]}
        let m+=1
done

echo &quot;------------------while循环遍历数组，使用a=$[$a+1]自增------------------&quot;
a=0
while [ $a -lt ${#my_array[@]} ]
do
        echo ${my_array[$a]}
        a=$[$a+1]
done
</code></pre><p>执行脚本结果如下</p>
<pre><code>$ ./test.sh 
---------for循环遍历数组-----------
A
B
C
D
E
F
G
--------while循环遍历数组，使用let i++自增-------------
A
B
C
D
E
F
G
-------while循环遍历数组，使用let n++ 自增：双引号可有可无，推荐加上双引号-----------
A
B
C
D
E
F
G
-----------while循环遍历数组，使用let m+=1自增--------------
A
B
C
D
E
F
G
------------------while循环遍历数组，使用a=$[$a+1]自增------------------
A
B
C
D
E
F
G
</code></pre><p>可以看出各种遍历方法大同小异，区别就在于自增方式的不同</p>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>简书: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>博客: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://os3hnmzbp.bkt.clouddn.com/数组.png&quot; alt=&quot;数组&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;p&gt;数组中可以存放多个值。Bash只支持一维数组，初始化时无需定义数组大小，数组元素下标从0开始。Shell数组用括号表示，元素之间由空号隔开：&lt;/p&gt;
    
    </summary>
    
      <category term="Shell" scheme="https://ytlogos.github.io/categories/Shell/"/>
    
    
      <category term="数组" scheme="https://ytlogos.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Shell编程：传参</title>
    <link href="https://ytlogos.github.io/2018/02/03/Shell%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BC%A0%E5%8F%82/"/>
    <id>https://ytlogos.github.io/2018/02/03/Shell编程：传参/</id>
    <published>2018-02-03T13:19:05.000Z</published>
    <updated>2018-02-05T12:18:46.856Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180205/gfihd4EIE0.png?imageslim" alt="mark"></p>
<h2 id="shell传递参数"><a href="#shell传递参数" class="headerlink" title="shell传递参数"></a>shell传递参数</h2><p>执行shell脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n代表数字，1为执行脚本的第一个参数，2为第二个，以此类推。</p>
<a id="more"></a>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>下面实例我们向脚本传递三个参数并分别输出，其中$0为执行的文件名：<br>新建一个脚本canshu.sh</p>
<pre><code>#!/bin/bash
echo &quot;Shell 传递参数实例！&quot;
echo &quot;执行的文件名：$0&quot;
echo &quot;第一个参数为：$1&quot;
echo &quot;第二个参数为：$2&quot;
echo &quot;第三个参数为：$3&quot;
</code></pre><p>运行：</p>
<pre><code>$ ./canshu.sh 1 2 3
Shell 传递参数实例！
执行的文件名：./canshu.sh
第一个参数为：1
第二个参数为：2
第三个参数为：3
</code></pre><blockquote>
<p>特殊字符处理参数</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数处理</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$#</td>
<td>传递到脚本的参数个数</td>
</tr>
<tr>
<td>$*</td>
<td>以一个单字符串显示所有向脚本传递的参数,以”$1 $2 … $n”输出所有参数</td>
</tr>
<tr>
<td>$$</td>
<td>脚本运行的当前进程ID号</td>
</tr>
<tr>
<td>$!</td>
<td>后台运行的最后一个进程ID号</td>
</tr>
<tr>
<td>$@</td>
<td>类似于$*,但是以”$1” “\$2” … “\$n”输出参数</td>
</tr>
<tr>
<td>$-</td>
<td>显示shell使用的当前选项</td>
</tr>
<tr>
<td>$?</td>
<td>显示最后命令的退出状态。0表示没有错误，其他任何输出表明有错误</td>
</tr>
</tbody>
</table>
<p>修改上述脚本canshu.sh</p>
<pre><code>#!/bin/bash
echo &quot;Shell 传递参数实例！&quot;
echo &quot;第一个参数为：$1&quot;
echo &quot;参数个数为：$#&quot;
echo &quot;传递的参数作为一个字符串显示：$*&quot;
</code></pre><p>运行：</p>
<pre><code>$ ./canshu.sh 1 2 3
Shell 传递参数实例！
第一个参数为：1
参数个数为：3
传递的参数作为一个字符串显示：1 2 3
</code></pre><blockquote>
<p>需要注意的是$*与\$@的区别</p>
</blockquote>
<ul>
<li>相同点：都是引用所有参数</li>
<li>不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数1、2、3，则”*”等价于”1 2 3”（传递了一个参数），而”@”等价于”1”,”2”,”3”(传递了三个参数)</li>
</ul>
<p>下面通过一个脚本来说明,新建脚本compare.sh</p>
<pre><code>#!/bin/bash
echo &quot;-- \$* 演示 ---&quot;
for i in &quot;$*&quot;;do
echo $i
done

echo &quot;-- \$@ 演示 ---&quot;
for i in &quot;$@&quot;;do
echo $i
done
</code></pre><p>运行脚本</p>
<pre><code>$ ./compare.sh 1 2 3
-- $* 演示 ---
1 2 3
-- $@ 演示 ---
1
2
3
</code></pre><p>区别一目了然。</p>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>简书: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>博客: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180205/gfihd4EIE0.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;shell传递参数&quot;&gt;&lt;a href=&quot;#shell传递参数&quot; class=&quot;headerlink&quot; title=&quot;shell传递参数&quot;&gt;&lt;/a&gt;shell传递参数&lt;/h2&gt;&lt;p&gt;执行shell脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n代表数字，1为执行脚本的第一个参数，2为第二个，以此类推。&lt;/p&gt;
    
    </summary>
    
      <category term="Shell" scheme="https://ytlogos.github.io/categories/Shell/"/>
    
    
  </entry>
  
  <entry>
    <title>Shell编程：变量</title>
    <link href="https://ytlogos.github.io/2018/02/02/Shell%E7%BC%96%E7%A8%8B%EF%BC%9A%E5%8F%98%E9%87%8F/"/>
    <id>https://ytlogos.github.io/2018/02/02/Shell编程：变量/</id>
    <published>2018-02-02T13:19:05.000Z</published>
    <updated>2018-02-05T05:21:56.946Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180204/7bEcJiH4l2.png?imageslim" alt="mark"></p>
<a id="more"></a>
<h2 id="Shell变量"><a href="#Shell变量" class="headerlink" title="Shell变量"></a>Shell变量</h2><p>定义变量时，变量名不加美元符号<code>$</code>，如：</p>
<pre><code>$ my_name=&quot;logos&quot;
</code></pre><blockquote>
<p>需要注意的是，变量名与等号之间不能有空格。同时变量命名遵循以下规则：</p>
</blockquote>
<ul>
<li>只能使用英文字母，数字与下划线，首个字符不能以数字开头</li>
<li>中间不能有空格，可以使用下划线</li>
<li>不能使用标点符号</li>
<li>不能使用bash里的关键字</li>
</ul>
<h2 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h2><p>使用已经定义过的变量只需在变量名前加美元符号<code>$</code>即可</p>
<pre><code>$ echo $my-name
$ echo $my_name
logos
$ echo ${my_name}
logos
</code></pre><p>变量名外面的花括号是可选的，加花括号是为了帮助解释器识别变量边界，因此推荐使用花括号。另已经定义过的变量可以重新被定义。</p>
<h2 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h2><p>使用<code>readonly</code>命令可以将变量定义为只读变量，只读变量的值不能被改变</p>
<pre><code>$ my_name=&quot;logos&quot;
$ readonly my_name
$ my_name=&quot;other&quot;
zsh: read-only variable: my_name
</code></pre><h2 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h2><p>使用<code>unset</code>命令可以删除变量，但是无法删除只读变量</p>
<pre><code>$ unset my_name
</code></pre><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p>运行shell时，会同时存在三种变量</p>
<ul>
<li>局部变量：局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量</li>
<li>环境变量：所有程序包括shell启动的程序都能访问环境变量</li>
<li>shell变量：由shell设置的特殊变量。shell变量中一部分是局部变量，一部分是环境变量。这些变量保证shell的正常运行</li>
</ul>
<h2 id="shell字符串"><a href="#shell字符串" class="headerlink" title="shell字符串"></a>shell字符串</h2><p>字符串是最常用的数据类型，可以用单引号、双引号，也可以不用引号。</p>
<h3 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h3><pre><code>$ str=&#39;This is a string&#39;
</code></pre><p>单引号字符串的限制：</p>
<ul>
<li>单引号里的任意字符都会原样输出，单引号字符串中的变量是无效的</li>
<li>单引号字符串中不能出现单引号,使用转义符也没用</li>
</ul>
<h2 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h2><pre><code>$ my_name=&#39;logos&#39;
$ str=&quot;Hello, I know you are \&quot;${my_name}\&quot;! \n&quot;
$ echo ${str}
Hello, I know you are &quot;logos&quot;!
</code></pre><p>双引号的优点：</p>
<ul>
<li>双引号里面可以有变量</li>
<li>双引号里可以出现转义符</li>
</ul>
<h2 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h2><p>新建一个脚本string.sh</p>
<pre><code>#!/bin/bash
my_name=&quot;logos&quot;
greeting=&quot;hello, &quot;$my_name&quot; !&quot;
greeting_1=&quot;hello, ${my_name} !&quot;
echo $greeting $greeting_1
</code></pre><p>运行脚本</p>
<pre><code>$ bash string.sh
hello, logos ! hello, logos !
</code></pre><h2 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h2><pre><code>$string=&quot;abcde&quot;
$echo ${#string}
5
</code></pre><blockquote>
<p>计算字符串长度也可以用<strong>length</strong></p>
</blockquote>
<pre><code>$ expr length &quot;$url&quot;
26
</code></pre><h2 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h2><p>字符串截取主要有4个截取符：<code>#</code>、<code>##</code>、<code>%</code>、<code>%%</code>：删除包含了指定的字符</p>
<ul>
<li>#、##表示从左边开始截取，#表示从左边删除到指定的第一个字符；##表示从左边删除到最后一个指定的字符</li>
<li>%、%%表示从右边开始删除，%表示从右边删除到指定的第一个字符；%%表示从右边删除到最后一个指定的字符</li>
</ul>
<blockquote>
<p>linux的字符串截取有八种方法</p>
</blockquote>
<p>假设我们有变量url=<a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h3 id="截取，删除左边字符，保留右边字符"><a href="#截取，删除左边字符，保留右边字符" class="headerlink" title="#截取，删除左边字符，保留右边字符"></a><code>#</code>截取，删除左边字符，保留右边字符</h3><pre><code>$ echo ${url#*//}
ytlogos.github.io/
</code></pre><p>其中url是变量名，#是字符截取运算符，*//表示从左边开始删除第一个<code>//</code>及其左边所有字符，即删除<code>https://</code>。</p>
<h3 id="截取，删除左边字符，保留右边字符-1"><a href="#截取，删除左边字符，保留右边字符-1" class="headerlink" title="##截取，删除左边字符，保留右边字符"></a><code>##</code>截取，删除左边字符，保留右边字符</h3><pre><code>$ echo ${url##*/}
</code></pre><p>##*/表示从左边开始删除指定的最后一个字符<code>/</code>及其左边所有字符，所以上述结果就是空的。</p>
<h3 id="截取，删除右边字符，保留左边字符"><a href="#截取，删除右边字符，保留左边字符" class="headerlink" title="%截取，删除右边字符，保留左边字符"></a><code>%</code>截取，删除右边字符，保留左边字符</h3><pre><code>$ echo ${url%/*}
https://ytlogos.github.io
</code></pre><p>%/*表示从右边开始删除第一个<code>/</code>及其右边字符</p>
<h3 id="截取，删除右边字符，保留左边字符-1"><a href="#截取，删除右边字符，保留左边字符-1" class="headerlink" title="%%截取，删除右边字符，保留左边字符"></a><code>%%</code>截取，删除右边字符，保留左边字符</h3><pre><code>$ echo ${url%%/*}
https:
</code></pre><p><code>%%</code>表示从右边开始删除最后一个<code>/</code>及其右边的字符</p>
<h3 id="从左边第几个字符开始及字符个数"><a href="#从左边第几个字符开始及字符个数" class="headerlink" title="从左边第几个字符开始及字符个数"></a>从左边第几个字符开始及字符个数</h3><pre><code>$ echo ${url:0:5}
https
</code></pre><p>上述命令表示从左边第一个字符开始截取5个字符</p>
<h3 id="从左边开始第几个字符开始一直到结束"><a href="#从左边开始第几个字符开始一直到结束" class="headerlink" title="从左边开始第几个字符开始一直到结束"></a>从左边开始第几个字符开始一直到结束</h3><pre><code>$ echo ${url:5}
://ytlogos.github.io/
</code></pre><h3 id="从右边第几个字符开始及字符个数"><a href="#从右边第几个字符开始及字符个数" class="headerlink" title="从右边第几个字符开始及字符个数"></a>从右边第几个字符开始及字符个数</h3><pre><code>$ echo ${url:0-4:3}
.io
</code></pre><p>上述命令表示从右边第四个字符开始向右截取3个字符</p>
<h3 id="从右边第几个字符开始一直到结束"><a href="#从右边第几个字符开始一直到结束" class="headerlink" title="从右边第几个字符开始一直到结束"></a>从右边第几个字符开始一直到结束</h3><pre><code>$ echo ${url:0-7}
hub.io/
</code></pre><blockquote>
<p>左边第一个字符用0表示，右边第一个字符用0-1表示</p>
</blockquote>
<h2 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a>查找子字符串</h2><p>查找字符<code>g</code>的位置</p>
<pre><code>$ echo `expr index &quot;$url&quot; g`
13
</code></pre><blockquote>
<p>如果字符串中不含那个字符的话，结果显示为0，另外如果查找多个字符的话只显示排在前面的字符</p>
<p>还有一点需要注意的是上面的是反引号`而不是单引号’</p>
</blockquote>
<pre><code>$ echo `expr index &quot;$url&quot; gt`
2
</code></pre><h2 id="shell数组"><a href="#shell数组" class="headerlink" title="shell数组"></a>shell数组</h2><p>bash支持一维数组（不支持多维数组），并且没有限定数组大小，数组元素下标从0开始，可以是整数或算术表达式。</p>
<h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h3><p>shell中数组的定义用括号表示，数组元素用<code>空格</code>分隔开。定义数组形式如下：</p>
<pre><code>数组名=(值1 值2 ... 值n)
</code></pre><p>具体如下：</p>
<pre><code>array_name=(v0 v1 v2 v3 v4 v5)
</code></pre><p>或</p>
<pre><code>array_name=(
    v0
    v1
    v2
    v3
    v4
    v5
)
</code></pre><p>还可以通过赋值单独定义数组各个分量</p>
<pre><code>array_name[0]=v0
array_name[1]=v1
.
.
.
</code></pre><blockquote>
<p>可以不使用连续的下标，而且下标范围没有限制</p>
</blockquote>
<h2 id="数组读取"><a href="#数组读取" class="headerlink" title="数组读取"></a>数组读取</h2><p>数组读取的一帮格式如下：</p>
<pre><code>${数组名[下标]}
</code></pre><pre><code>$ echo ${array_name[2]}
v1
</code></pre><p>使用@符号可以获取数组中所有元素</p>
<pre><code>$ echo ${array_name[@]}
v0 v1 v2 v3 v4 v5
</code></pre><h3 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a>获取数组长度</h3><p>获取数组长度的方法与获取字符串长度的方法相同：首先获取数组元素个数，再获取长度</p>
<pre><code>$ echo ${#array_name[@]}
6
# 或
$ echo ${#array_name[*]}
6
</code></pre><h2 id="shell注释"><a href="#shell注释" class="headerlink" title="shell注释"></a>shell注释</h2><p>注释行都是以<code>#</code>开头，会被解释器忽略。不支持多行注释。</p>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>简书: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>博客: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180204/7bEcJiH4l2.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Shell" scheme="https://ytlogos.github.io/categories/Shell/"/>
    
    
  </entry>
  
  <entry>
    <title>Shell编程：简介</title>
    <link href="https://ytlogos.github.io/2018/02/01/Shell%E7%BC%96%E7%A8%8B%EF%BC%9A%E7%AE%80%E4%BB%8B/"/>
    <id>https://ytlogos.github.io/2018/02/01/Shell编程：简介/</id>
    <published>2018-02-01T13:19:05.000Z</published>
    <updated>2018-02-04T10:59:24.055Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180204/GhihcB409F.png?imageslim" alt="mark"></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Shell是一个用C语言编写的程序，提供用户使用linux的桥梁。它既是一种命令语言，又是一种程序设计语言。Shell脚本(Shell script)shiyizhongweiShel编写的脚本程序。通常我们说的Shell就是指的Shell脚本，但是应该记住的是Shell与Shell脚本是两个不同的概念。linux的Shell种类众多，但是我们常用的是bash。</p>
<a id="more"></a>
<h2 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h2><p>由于Shell种类众多，所以我们编写Shell脚本的时候解释该脚本的Shell程序。所以第一行我们通常写成这样：</p>
<pre><code>#!/bin/bash
</code></pre><p><strong>#!</strong>是一个约定的标记，用来告诉系统这个脚本用什么解释器来执行，也就是使用哪一种Shell来执行，这里我们指定由bash来执行。</p>
<pre><code>!#/bin/bash
echo &quot;Hello World !&quot;
</code></pre><p><code>echo</code>命令用于向窗口输出文本。</p>
<h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><p>运行脚本有两种方法</p>
<ul>
<li>作为可执行程序</li>
</ul>
<p>将上面的代码保存为hello.sh，然后进入其所在的目录</p>
<pre><code>#使脚本具有执行权限
chmod +x ./hello.sh
#执行脚本
./hello.sh
</code></pre><blockquote>
<p>需要注意的是，一定要写成./hello.sh，而不是./hello.sh，运行其他二进制的程序也一样。如果直接写成hello.sh的话，linux系统会去PATH里寻找有没有hello.sh这个文本，但是只有/bin,/sbin,/usr/bin等在PATH里，当前目录通常不在PATH里，所以写成hello.sh是找不到命令的，要用./hello.sh告诉系统就在当前目录找。</p>
</blockquote>
<ul>
<li>作为解释器参数<br>这种运行方式是直接运行解释器，参数就是shell脚本文件名。</li>
</ul>
<pre><code>/bin/sh hello.sh
</code></pre><p>此时就无需声明解释器了，因为已经在命令中指定了</p>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>简书: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>博客: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180204/GhihcB409F.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Shell是一个用C语言编写的程序，提供用户使用linux的桥梁。它既是一种命令语言，又是一种程序设计语言。Shell脚本(Shell script)shiyizhongweiShel编写的脚本程序。通常我们说的Shell就是指的Shell脚本，但是应该记住的是Shell与Shell脚本是两个不同的概念。linux的Shell种类众多，但是我们常用的是bash。&lt;/p&gt;
    
    </summary>
    
      <category term="Shell" scheme="https://ytlogos.github.io/categories/Shell/"/>
    
    
  </entry>
  
  <entry>
    <title>关于如何修改坐标轴表达式以及分面图例的一个例子</title>
    <link href="https://ytlogos.github.io/2018/01/31/%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E5%9D%90%E6%A0%87%E8%BD%B4%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BB%A5%E5%8F%8A%E5%88%86%E9%9D%A2%E5%9B%BE%E4%BE%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90/"/>
    <id>https://ytlogos.github.io/2018/01/31/关于如何修改坐标轴表达式以及分面图例的一个例子/</id>
    <published>2018-01-31T11:43:11.000Z</published>
    <updated>2018-02-01T03:30:29.055Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180201/ElKca96m2c.png?imageslim" alt="mark"></p>
<p><strong>ggplot2</strong>绘制的图形如果需要修改细节的话，没有对<strong>ggplot2</strong>有一定的了解的话是十分困难的，毕竟连创建这个包的作者<strong>Hadley Wickham</strong>都自称自己使用<strong>ggplot2</strong>的时候都需要查文档。在对<strong>ggplot2</strong>有一定了解的基础上如果需要修改ggplot图的话稍微查查文档基本能解决。</p>
<a id="more"></a>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>这两天有人问我如何修改她的图形，她绘制的图如下：</p>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180201/5fA4FDKGJB.png?imageslim" alt="mark"></p>
<p>她希望修改三点：</p>
<ul>
<li>各个分面的图例比如DK、NL等是否可以修改，使得大一点</li>
<li>Y轴标题中的-1如何变成上标</li>
<li>平均值虚线如何针对不同物种画相对应的虚线平均值</li>
</ul>
<p>她是使用<strong>ggpubr</strong>包绘制的，这个包就是对一些<strong>ggplot2</strong>函数的一些封装及继承，本质上来说是可以通过<strong>ggplot2</strong>来修改参数的。我参考了一部分的官方文档之后解决了这三个问题，所以写了这篇博客。</p>
<h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><pre><code>library(tidyverse)
library(ggpubr)
ICP&lt;-read.csv(&quot;C:/Users/taoyan/Desktop/element.csv&quot;)
ICP$Order &lt;- factor(ICP$Species, levels = c(&quot;DK&quot;, &quot;NL&quot;, &quot;RO&quot;, &quot;IT&quot;, &quot;TL&quot;, &quot;AP&quot;, &quot;AD&quot;))
head(ICP)
</code></pre><pre><code>##   Species Treatment       Na       Ca        P
## 1      DK         A 268.4234 3021.933 1791.317
## 2      DK         A 301.9390 3314.308 1595.479
## 3      DK         A 261.1024 3417.643 1547.596
## 4      DK         A 229.1169 3069.978 1735.703
## 5      DK         A 265.1454 3205.965 1667.524
## 6      DK         B 330.7135 4028.279 1638.113
</code></pre><h2 id="构造数据"><a href="#构造数据" class="headerlink" title="构造数据"></a>构造数据</h2><p>由于后面需要用到平均值，所以需要构造含有平均值的数据集</p>
<pre><code>meanvalue &lt;- ICP%&gt;%group_by(Species)%&gt;%summarise(mean=mean(Na))
data &lt;- left_join(ICP,meanvalue,by=c(&#39;Species&#39;=&#39;Species&#39;))
head(data[,c(1:4,13)])
</code></pre><pre><code>##   Species Treatment       Na       Ca     mean
## 1      DK         A 268.4234 3021.933 426.6542
## 2      DK         A 301.9390 3314.308 426.6542
## 3      DK         A 261.1024 3417.643 426.6542
## 4      DK         A 229.1169 3069.978 426.6542
## 5      DK         A 265.1454 3205.965 426.6542
## 6      DK         B 330.7135 4028.279 426.6542
</code></pre><h2 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h2><pre><code>p &lt;- ggboxplot(ICP, x=&quot;Treatment&quot;, y=&quot;Na&quot;,group=&quot;Species&quot;, color=&quot;Treatment&quot;,
add=&quot;mean_se&quot;,facet.by = &quot;Order&quot;,ncol=4, legend=&quot;none&quot;)+
geom_hline(aes(yintercept=mean),data,linetype=2)+ #由于要在不同的分面里绘制水平线，这里要mapping
stat_compare_means(method=&quot;anova&quot;,label=&quot;p.format&quot;,label.y=3500,size=8)+
stat_compare_means(label=&quot;p.signif&quot;,size=8,method=&quot;wilcox.test&quot;,ref.group=&quot;.all.&quot;,hide.ns=TRUE)
ggpar(p,palette = &quot;npg&quot;,font.tickslab = c(18,&quot;bold&quot;))+
  theme(strip.text = element_text(size=15,face = &quot;bold&quot;))+ #调整分面legend
  labs(x=&quot;Treatment&quot;, y=expression(bold(paste(&quot;Na (  &quot;, &#39;mg Kg&#39;^{-1},&quot;)&quot;,&#39; DM&#39;))))+
  theme(axis.title = element_text(face = &quot;bold&quot;, size=18))
</code></pre><p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180201/ElKca96m2c.png?imageslim" alt="mark"></p>
<h2 id="SessionInfo"><a href="#SessionInfo" class="headerlink" title="SessionInfo()"></a>SessionInfo()</h2><pre><code>sessionInfo()
</code></pre><pre><code>## R version 3.4.3 (2017-11-30)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 16299)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=Chinese (Simplified)_China.936 
## [2] LC_CTYPE=Chinese (Simplified)_China.936   
## [3] LC_MONETARY=Chinese (Simplified)_China.936
## [4] LC_NUMERIC=C                              
## [5] LC_TIME=Chinese (Simplified)_China.936    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] bindrcpp_0.2       ggpubr_0.1.6       magrittr_1.5      
##  [4] forcats_0.2.0      stringr_1.2.0      dplyr_0.7.4       
##  [7] purrr_0.2.4        readr_1.1.1        tidyr_0.7.2       
## [10] tibble_1.4.2       ggplot2_2.2.1.9000 tidyverse_1.2.1   
## 
## loaded via a namespace (and not attached):
##  [1] tidyselect_0.2.3  reshape2_1.4.3    haven_1.1.1      
##  [4] lattice_0.20-35   colorspace_1.3-2  htmltools_0.3.6  
##  [7] yaml_2.1.16       rlang_0.1.6       pillar_1.1.0     
## [10] foreign_0.8-69    glue_1.2.0        modelr_0.1.1     
## [13] readxl_1.0.0      bindr_0.1         plyr_1.8.4       
## [16] munsell_0.4.3     gtable_0.2.0      cellranger_1.1.0 
## [19] rvest_0.3.2       ggsci_2.8         psych_1.7.8      
## [22] evaluate_0.10.1   labeling_0.3      knitr_1.18       
## [25] parallel_3.4.3    broom_0.4.3       Rcpp_0.12.15     
## [28] scales_0.5.0.9000 backports_1.1.2   jsonlite_1.5     
## [31] mnormt_1.5-5      hms_0.4.1         digest_0.6.14    
## [34] stringi_1.1.6     grid_3.4.3        rprojroot_1.3-2  
## [37] cli_1.0.0         tools_3.4.3       lazyeval_0.2.1   
## [40] crayon_1.3.4      pkgconfig_2.0.1   xml2_1.2.0       
## [43] lubridate_1.7.1   assertthat_0.2.0  rmarkdown_1.8    
## [46] httr_1.3.1        rstudioapi_0.7    R6_2.2.2         
## [49] nlme_3.1-131      compiler_3.4.3
</code></pre><hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410</p>
<p>Email: tyan@zju.edu.cn</p>
<p>QQ: 1051927088</p>
<p>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a></p>
<p>简书: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a></p>
<p>博客: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛</p>
<p>浙江大学作物遗传育种在读研究生（生物信息学方向）</p>
<p>伪码农，R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180201/ElKca96m2c.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;绘制的图形如果需要修改细节的话，没有对&lt;strong&gt;ggplot2&lt;/strong&gt;有一定的了解的话是十分困难的，毕竟连创建这个包的作者&lt;strong&gt;Hadley Wickham&lt;/strong&gt;都自称自己使用&lt;strong&gt;ggplot2&lt;/strong&gt;的时候都需要查文档。在对&lt;strong&gt;ggplot2&lt;/strong&gt;有一定了解的基础上如果需要修改ggplot图的话稍微查查文档基本能解决。&lt;/p&gt;
    
    </summary>
    
      <category term="可视化" scheme="https://ytlogos.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="R" scheme="https://ytlogos.github.io/tags/R/"/>
    
      <category term="visualization" scheme="https://ytlogos.github.io/tags/visualization/"/>
    
      <category term="ggplot2" scheme="https://ytlogos.github.io/tags/ggplot2/"/>
    
      <category term="ggpubr" scheme="https://ytlogos.github.io/tags/ggpubr/"/>
    
  </entry>
  
</feed>
