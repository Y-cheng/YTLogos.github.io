<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Logos</title>
  <subtitle>Stay hungry,Stay foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ytlogos.github.io/"/>
  <updated>2018-05-24T05:51:41.420Z</updated>
  <id>https://ytlogos.github.io/</id>
  
  <author>
    <name>TaoYan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux之数据呈现</title>
    <link href="https://ytlogos.github.io/2018/05/22/Linux%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%91%88%E7%8E%B0/"/>
    <id>https://ytlogos.github.io/2018/05/22/Linux之数据呈现/</id>
    <published>2018-05-22T13:19:05.000Z</published>
    <updated>2018-05-24T05:51:41.420Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180524/8aj460AJAl.png?imageslim" alt="mark"></p>
<a id="more"></a>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p><strong>bash shell</strong>保留了前三个文件描述符(0、1、2),分别表示标准输入、标准输出、标准错误。如果需要将标准输出和标准错误重定向到同一个输出文件中，<strong>bash shell</strong>提供了特殊的重定向符<code>&amp;&gt;</code>。</p>
<h2 id="脚本中重定向输出"><a href="#脚本中重定向输出" class="headerlink" title="脚本中重定向输出"></a>脚本中重定向输出</h2><h3 id="临时重定向"><a href="#临时重定向" class="headerlink" title="临时重定向"></a>临时重定向</h3><p>在重定向到文件描述符时，必须在文件描述符数字前加一个<code>&amp;</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ cat test8</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># testing STDERR messages</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"This is an error"</span> &gt;&amp;2</div><div class="line"><span class="built_in">echo</span> <span class="string">"This is normal output"</span></div><div class="line">$ ./test8 2&gt; test9</div><div class="line">This is normal output</div><div class="line">$ cat test9</div><div class="line">This is an error</div></pre></td></tr></table></figure>
<h3 id="永久重定向"><a href="#永久重定向" class="headerlink" title="永久重定向"></a>永久重定向</h3><p>可以在脚本中用<code>exec</code>命令告诉<code>shell</code>在脚本执行期间重定向某个特定文件描述符</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ cat test11</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># redirecting output to different locations</span></div><div class="line"><span class="built_in">exec</span> 2&gt;testerror</div><div class="line"><span class="built_in">echo</span> <span class="string">"This is the start of the script"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"now redirecting all output to another location"</span></div><div class="line"><span class="built_in">exec</span> 1&gt;testout</div><div class="line"><span class="built_in">echo</span> <span class="string">"This output should go to the testout file"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"but this should go to the testerror file"</span> &gt;&amp;2</div><div class="line">$</div><div class="line">$ ./test11</div><div class="line">This is the start of the script</div><div class="line">now redirecting all output to another location</div><div class="line">$ cat testout</div><div class="line">This output should go to the testout file</div><div class="line">$ cat testerror</div><div class="line">but this should go to the testerror file</div></pre></td></tr></table></figure>
<h2 id="脚本中重定向输入"><a href="#脚本中重定向输入" class="headerlink" title="脚本中重定向输入"></a>脚本中重定向输入</h2><p><code>exec</code>命令允许将标准输入重定向到<strong>Linux</strong>系统上的文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">exec</span> 0&lt; testfile</div></pre></td></tr></table></figure>
<blockquote>
<p>这个命令会告诉<code>shell</code>应该从文件testfile中获得输入而不是STDIN</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ cat test12</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># redirecting file input</span></div><div class="line"><span class="built_in">exec</span> 0&lt; testfile</div><div class="line">count=1</div><div class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Line #<span class="variable">$count</span>: <span class="variable">$line</span>"</span></div><div class="line">count=$[ <span class="variable">$count</span> + 1 ]</div><div class="line"><span class="keyword">done</span></div><div class="line">$ ./test12</div><div class="line">Line <span class="comment">#1: This is the first line.</span></div><div class="line">Line <span class="comment">#2: This is the second line.</span></div><div class="line">Line <span class="comment">#3: This is the third line.</span></div></pre></td></tr></table></figure>
<h2 id="消息记录"><a href="#消息记录" class="headerlink" title="消息记录"></a>消息记录</h2><p><code>tee</code>命令相当于管道的一个T型接头，它将从STDIN过来的数据同时发往两处，一处是STDOUT，另一处是<code>tee</code>命令行指定的文件名</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> date | tee testfile</span></div><div class="line">Sun Oct 19 18:56:21 EDT 2014</div><div class="line"><span class="meta">$</span><span class="bash"> cat testfile</span></div><div class="line">Sun Oct 19 18:56:21 EDT 2014</div></pre></td></tr></table></figure>
<blockquote>
<p><code>tee</code>命令在默认条件下会每次覆盖输出文件内容，如果需要追加数据到文件中，可以用<code>-a</code>参数</p>
</blockquote>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180524/8aj460AJAl.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://ytlogos.github.io/categories/Linux/"/>
    
    
      <category term="Shell" scheme="https://ytlogos.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux之获取用户输入</title>
    <link href="https://ytlogos.github.io/2018/05/21/Linux%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/"/>
    <id>https://ytlogos.github.io/2018/05/21/Linux之获取用户输入/</id>
    <published>2018-05-21T13:19:05.000Z</published>
    <updated>2018-05-22T09:12:25.425Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180522/CGbkeLBFc9.png?imageslim" alt="mark"><br><a id="more"></a></p>
<h2 id="基本读取"><a href="#基本读取" class="headerlink" title="基本读取"></a>基本读取</h2><p>read命令从标准输入（键盘）或另一个文件描述符中接受输入，在收到输入后，read命令会将数据放进一个变量</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ cat test21.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># testing the read command</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">echo</span> -n <span class="string">"Enter your name: "</span></div><div class="line"><span class="built_in">read</span> name</div><div class="line"><span class="built_in">echo</span> <span class="string">"Hello <span class="variable">$name</span>, welcome to my program. "</span></div><div class="line"><span class="comment">#</span></div><div class="line">$</div><div class="line">$ ./test21.sh</div><div class="line">Enter your name: Rich Blum</div><div class="line">Hello Rich Blum, welcome to my program.</div></pre></td></tr></table></figure>
<p>echo命令使用了-n选项，该选项不会在字符串末尾输出换行符，允许脚本用户紧跟其后输入数据，而不是下一行。<br>read命令包含了-p选项，允许用户直接在read命令行指定提示符</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ cat test22.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># testing the read -p option</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">read</span> -p <span class="string">"Please enter your age: "</span> age</div><div class="line">days=$[ <span class="variable">$age</span> * 365 ]</div><div class="line"><span class="built_in">echo</span> <span class="string">"That makes you over <span class="variable">$days</span> days old! "</span></div><div class="line"><span class="comment">#</span></div><div class="line">$</div><div class="line">$ ./test22.sh</div><div class="line">Please enter your age: 10</div><div class="line">That makes you over 3650 days old!</div></pre></td></tr></table></figure>
<blockquote>
<p>read命令会将提示符后输入的所有数据分配给单个变量，要么指定多个变量，输入的每个数据值都会分配给变量列表中的下一个变量，如果变量数量不够，剩下的数据就全部分配给最后一个变量。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ cat test23.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># entering multiple variables</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">read</span> -p <span class="string">"Enter your name: "</span> first last</div><div class="line"><span class="built_in">echo</span> <span class="string">"Checking data for <span class="variable">$last</span>, <span class="variable">$first</span>…"</span></div><div class="line">$</div><div class="line">$ ./test23.sh</div><div class="line">Enter your name: Rich Blum</div><div class="line">Checking data <span class="keyword">for</span> Blum, Rich...</div></pre></td></tr></table></figure>
<p>也可以在read命令行中不指定变量，此时read会将它收到的任何数据存入环境变量REPLY中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ cat test24.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># Testing the REPLY Environment variable</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">read</span> -p <span class="string">"Enter your name: "</span></div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="built_in">echo</span> Hello <span class="variable">$REPLY</span>, welcome to my program.</div><div class="line"><span class="comment">#</span></div><div class="line">$</div><div class="line">$ ./test24.sh</div><div class="line">Enter your name: Christine</div><div class="line">Hello Christine, welcome to my program.</div></pre></td></tr></table></figure>
<h3 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h3><p>使用read命令时脚本很可能会一直等着用户输入，此时可以设置一个计时器来让脚本在超过输入时间后继续执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ cat test25.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># timing the data entry</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="keyword">if</span> <span class="built_in">read</span> -t 5 -p <span class="string">"Please enter your name: "</span> name</div><div class="line"><span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Hello <span class="variable">$name</span>, welcome to my script"</span></div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Sorry, too slow! "</span></div><div class="line"><span class="keyword">fi</span></div><div class="line">$</div><div class="line">$ ./test25.sh</div><div class="line">Please enter your name: Rich</div><div class="line">Hello Rich, welcome to my script</div><div class="line">$ ./test25.sh</div><div class="line">Please enter your name:</div><div class="line">Sorry, too slow!</div></pre></td></tr></table></figure>
<p>也可以不对输入过程计时，而是让read命令来统计输入的字符数，当输入的字符数达到预设的字符数时，就会自动退出，将输入的数据赋值给变量</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ cat test26.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># getting just one character of input</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">read</span> -n1 -p <span class="string">"Do you want to continue [Y/N]? "</span> answer</div><div class="line"><span class="keyword">case</span> <span class="variable">$answer</span> <span class="keyword">in</span></div><div class="line">Y | y) <span class="built_in">echo</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"fine, continue on…"</span>;;</div><div class="line">N | n) <span class="built_in">echo</span></div><div class="line"><span class="built_in">echo</span> OK, goodbye</div><div class="line"><span class="built_in">exit</span>;;</div><div class="line"><span class="keyword">esac</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"This is the end of the script"</span></div><div class="line">$</div><div class="line">$ ./test26.sh</div><div class="line">Do you want to <span class="built_in">continue</span> [Y/N]? Y</div><div class="line">fine, <span class="built_in">continue</span> on…</div><div class="line">This is the end of the script</div><div class="line">$</div><div class="line">$ ./test26.sh</div><div class="line">Do you want to <span class="built_in">continue</span> [Y/N]? n</div><div class="line">OK, goodbye</div></pre></td></tr></table></figure>
<p>将-n选项与值1一起使用，告诉read命令在接受单个字符后退出。</p>
<h3 id="隐藏方式读取"><a href="#隐藏方式读取" class="headerlink" title="隐藏方式读取"></a>隐藏方式读取</h3><p>-s选项可以避免在read命令中输入的数据出现在显示器上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ cat test27.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># hiding input data from the monitor</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">read</span> -s -p <span class="string">"Enter your password: "</span> pass</div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Is your password really <span class="variable">$pass</span>? "</span></div><div class="line">$</div><div class="line">$ ./test27.sh</div><div class="line">Enter your password:</div><div class="line">Is your password really T3st1ng?</div></pre></td></tr></table></figure>
<h3 id="文件中读取"><a href="#文件中读取" class="headerlink" title="文件中读取"></a>文件中读取</h3><p>read可以用来直接读取文件里保存的数据，每次调用read命令，它都会从文件中读取一行，当文件中没有内容后，read退出</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ cat test28.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># reading data from a file</span></div><div class="line"><span class="comment">#</span></div><div class="line">count=1</div><div class="line">cat <span class="built_in">test</span> | <span class="keyword">while</span> <span class="built_in">read</span> line</div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Line <span class="variable">$count</span>: <span class="variable">$line</span>"</span></div><div class="line">count=$[ <span class="variable">$count</span> + 1]</div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Finished processing the file"</span></div><div class="line">$</div><div class="line">$ cat <span class="built_in">test</span></div><div class="line">The quick brown dog jumps over the lazy fox.</div><div class="line">This is a <span class="built_in">test</span>, this is only a <span class="built_in">test</span>.</div><div class="line">O Romeo, Romeo! Wherefore art thou Romeo?</div><div class="line">$</div><div class="line">$ ./test28.sh</div><div class="line">Line 1: The quick brown dog jumps over the lazy fox.</div><div class="line">Line 2: This is a <span class="built_in">test</span>, this is only a <span class="built_in">test</span>.</div><div class="line">Line 3: O Romeo, Romeo! Wherefore art thou Romeo?</div><div class="line">Finished processing the file</div></pre></td></tr></table></figure>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180522/CGbkeLBFc9.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://ytlogos.github.io/categories/Linux/"/>
    
    
      <category term="Shell" scheme="https://ytlogos.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux之处理用户输入（三）</title>
    <link href="https://ytlogos.github.io/2018/05/20/Linux%E4%B9%8B%E5%A4%84%E7%90%86%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5(%E4%B8%89)/"/>
    <id>https://ytlogos.github.io/2018/05/20/Linux之处理用户输入(三)/</id>
    <published>2018-05-20T13:19:05.000Z</published>
    <updated>2018-05-22T03:50:43.818Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180522/AHC1ACD4IH.png?imageslim" alt="mark"></p>
<a id="more"></a>
<h2 id="使用getopt命令"><a href="#使用getopt命令" class="headerlink" title="使用getopt命令"></a>使用<code>getopt</code>命令</h2><p><code>getopt</code>能够识别命令行参数，从而在脚本中解析它们。<code>getopt</code>可以接受一系列任意形式的命令行选项和参数，并自动将它们转换为适当的格式。其命令行格式如下：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">getopt optstring paramaters</span></div></pre></td></tr></table></figure>
<blockquote>
<p><code>optstring</code>是这个过程的关键所在，它定义了命令行有效的选项字母，还定义了哪些选项字母需要参数值，在<code>optstring</code>中列出你要在脚本中用到的每个命令行选项字母，然后在每个需要参数值的选项字母后加一个冒号，<code>getopt</code>命令会基于你定义的optstring解析提供的参数。</p>
</blockquote>
<p>举个例子：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ getopt ad:cd -<span class="selector-tag">a</span> -<span class="selector-tag">b</span> test1 -cd test2 test3</div><div class="line">-<span class="selector-tag">a</span> -<span class="selector-tag">b</span> test1 -c -d -- test2 test3</div></pre></td></tr></table></figure>
<blockquote>
<p>optstring定义了四个有效选项字母，冒号在b之后，因为b选项需要一个参数值，当<code>getopt</code>命令运行时，它会检查提供的参数列表(-a -b test1 -cd test2 test3)，并基于提供的optstring进行解析，它会自动将-cd选项分成两个独立的选项，并插入双破折线来分隔行中的额外参数。</p>
</blockquote>
<p>如果指定了一个不在<code>optstring</code>中的选项，会报错，这时可以在命令行中加入<code>-q</code>选项以忽略错误消息</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ getopt ab:cd -<span class="selector-tag">a</span> -<span class="selector-tag">b</span> test1 -cde test2 test3</div><div class="line">getopt: invalid option -- e</div><div class="line">-<span class="selector-tag">a</span> -<span class="selector-tag">b</span> test1 -c -d -- test2 test3</div><div class="line">$ getopt -<span class="selector-tag">q</span> ab:cd -<span class="selector-tag">a</span> -<span class="selector-tag">b</span> test1 -cde test2 test3</div><div class="line">-<span class="selector-tag">a</span> -<span class="selector-tag">b</span> <span class="string">'test1'</span> -c -d -- <span class="string">'test2'</span> <span class="string">'test3'</span></div></pre></td></tr></table></figure>
<h3 id="脚本中使用getopt"><a href="#脚本中使用getopt" class="headerlink" title="脚本中使用getopt"></a>脚本中使用<code>getopt</code></h3><p>通过<code>set</code>命令来完成，set命令的选项之一是双破折线，它会将命令行参数替换成set命令的命令行值。该方法首先将原始脚本中的命令行参数传给getopt命令，之后再将getopt命令的输出传给set命令，用getopt格式化后的命令行参数来替换原始的命令行参数，具体如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> --$(gteopt -q ab:<span class="built_in">cd</span> <span class="string">"<span class="variable">$@</span>"</span>)</div></pre></td></tr></table></figure>
<p>现在原始的命令行参数变量的值就会被getopt命令行的输出替换，getopt已经将命令行参数全部格式化好了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">$ cat test18.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># Extract command line options &amp; values with getopt</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">set</span> -- $(getopt -q ab:<span class="built_in">cd</span> <span class="string">"<span class="variable">$@</span>"</span>)</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="keyword">while</span> [ -n <span class="string">"<span class="variable">$1</span>"</span> ]</div><div class="line"><span class="keyword">do</span></div><div class="line">    <span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">    -a) <span class="built_in">echo</span> <span class="string">"Found the -a option"</span> ;;</div><div class="line">    -b) param=<span class="string">"<span class="variable">$2</span>"</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"Found the -b option, with parameter value <span class="variable">$param</span>"</span></div><div class="line">        <span class="built_in">shift</span> ;;</div><div class="line">    -c) <span class="built_in">echo</span> <span class="string">"Found the -c option"</span> ;;</div><div class="line">    --) <span class="built_in">shift</span></div><div class="line">        <span class="built_in">break</span> ;;</div><div class="line">    *) <span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span> is not an option"</span>;;</div><div class="line"><span class="keyword">esac</span></div><div class="line">    <span class="built_in">shift</span></div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="comment">#</span></div><div class="line">count=1</div><div class="line"><span class="keyword">for</span> param <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span></div><div class="line"><span class="keyword">do</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"Parameter #<span class="variable">$count</span>: <span class="variable">$param</span>"</span></div><div class="line">    count=$[ <span class="variable">$count</span> + 1 ]</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>现在运行含有复杂选项的脚本</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> ./test18.sh -ac</div><div class="line">Found the -a <span class="keyword">option</span></div><div class="line">Found the -c <span class="keyword">option</span></div><div class="line"><span class="symbol">$</span> ./test18.sh -a -b test1 -cd test2 test3 test4</div><div class="line">Found the -a <span class="keyword">option</span></div><div class="line">Found the -b <span class="keyword">option</span>, with <span class="keyword">parameter</span> value <span class="comment">'test1'</span></div><div class="line">Found <span class="comment">the -c option</span></div><div class="line"><span class="keyword">Parameter</span> <span class="comment">#1:</span> <span class="comment">'test2'</span></div><div class="line"><span class="keyword">Parameter</span> <span class="comment">#2:</span> <span class="comment">'test3'</span></div><div class="line"><span class="keyword">Parameter</span> <span class="comment">#3:</span> <span class="comment">'test4'</span></div></pre></td></tr></table></figure>
<p>但是还是存在一个问题，就是无法处理带空格和引号的参数值，它会将空格当作参数分隔符，而不是根据双引号将两者当作一个参数。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ./test18.sh -<span class="keyword">a</span> -b test1 -cd <span class="string">"test2 test3"</span> test4</div><div class="line">Found <span class="keyword">the</span> -<span class="keyword">a</span> option</div><div class="line">Found <span class="keyword">the</span> -b option, <span class="keyword">with</span> parameter <span class="built_in">value</span> <span class="string">'test1'</span></div><div class="line">Found <span class="keyword">the</span> -c option</div><div class="line">Parameter <span class="comment">#1: 'test2</span></div><div class="line">Parameter <span class="comment">#2: test3'</span></div><div class="line">Parameter <span class="comment">#3: 'test4'</span></div></pre></td></tr></table></figure>
<h3 id="getopts"><a href="#getopts" class="headerlink" title="getopts"></a>getopts</h3><p>getopts相对于getopt来说更高级，它可以提供getopt无法实现的功能。每次调用getopts时，它一次只会处理命令行上检测到的一个参数，处理完所有参数后，它会退出并返回一个大于0的退出状态码，因此可以与while结合运行。getopts命令用到两个环境变量，如果选项需要跟一个参数值，OPTARG环境变量会保存这个值，OPTIND环境变量保存了参数列表中getopts正在处理的<strong>参数位置</strong>，这样就能在处理完选项之后继续处理其他命令行参数了，其主要格式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">getopts</span> optstring variable</div></pre></td></tr></table></figure>
<blockquote>
<p>optstring存有效的选项字母，如果选项字母要求有个参数值，就加一个冒号，要去掉错误信息，在optstring之前加一个冒号，getopts命令会将当前参数保存到命令行中定义的variable中</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ cat test19.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># simple demonstration of the getopts command</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> :ab:c opt</div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$opt</span>"</span> <span class="keyword">in</span></div><div class="line">a) <span class="built_in">echo</span> <span class="string">"Found the -a option"</span> ;;</div><div class="line">b) <span class="built_in">echo</span> <span class="string">"Found the -b option, with value <span class="variable">$OPTARG</span>"</span>;;</div><div class="line">c) <span class="built_in">echo</span> <span class="string">"Found the -c option"</span> ;;</div><div class="line">*) <span class="built_in">echo</span> <span class="string">"Unknown option: <span class="variable">$opt</span>"</span>;;</div><div class="line"><span class="keyword">esac</span></div><div class="line"><span class="keyword">done</span></div><div class="line">$</div><div class="line">$ ./test19.sh -ab test1 -c</div><div class="line">Found the -a option</div><div class="line">Found the -b option, with value test1</div><div class="line">Found the -c option</div></pre></td></tr></table></figure>
<p>getopts在解析命令行选项时会移除开头的破折线所以在case定义中不用单破折线。getopts支持空格参数值输入及其他输入</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ ./test19<span class="selector-class">.sh</span> -<span class="selector-tag">b</span> <span class="string">"test1 test2"</span> -<span class="selector-tag">a</span></div><div class="line">Found the -<span class="selector-tag">b</span> option, with value test1 test2</div><div class="line">Found the -<span class="selector-tag">a</span> option</div><div class="line">$ ./test19<span class="selector-class">.sh</span> -abtest1</div><div class="line">Found the -<span class="selector-tag">a</span> option</div><div class="line">Found the -<span class="selector-tag">b</span> option, with value test1</div></pre></td></tr></table></figure>
<p>getopts会将在命令行上找到的未定义的选项统一输出为问号</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> ./test19.sh -d</div><div class="line">Unknown <span class="keyword">option</span>: ?</div><div class="line"><span class="symbol">$</span></div><div class="line"><span class="symbol">$</span> ./test19.sh -acde</div><div class="line">Found the -a <span class="keyword">option</span></div><div class="line">Found the -c <span class="keyword">option</span></div><div class="line">Unknown <span class="keyword">option</span>: ?</div><div class="line">Unknown <span class="keyword">option</span>: ?</div></pre></td></tr></table></figure>
<p>getopts知道何时停止处理选项，在getopts处理每个选项时会将OPTIND环境变量值加一，在完成getopts之后，可以使用shift命令和OPTIND值来移动参数。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">$ cat test20.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># Processing options &amp; parameters with getopts</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> :ab:<span class="built_in">cd</span> opt</div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$opt</span>"</span> <span class="keyword">in</span></div><div class="line">a) <span class="built_in">echo</span> <span class="string">"Found the -a option"</span> ;;</div><div class="line">b) <span class="built_in">echo</span> <span class="string">"Found the -b option, with value <span class="variable">$OPTARG</span>"</span> ;;</div><div class="line">c) <span class="built_in">echo</span> <span class="string">"Found the -c option"</span> ;;</div><div class="line">d) <span class="built_in">echo</span> <span class="string">"Found the -d option"</span> ;;</div><div class="line">*) <span class="built_in">echo</span> <span class="string">"Unknown option: <span class="variable">$opt</span>"</span> ;;</div><div class="line"><span class="keyword">esac</span></div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">shift</span> $[ <span class="variable">$OPTIND</span> - 1 ]</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">echo</span></div><div class="line">count=1</div><div class="line"><span class="keyword">for</span> param <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span></div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Parameter <span class="variable">$count</span>: <span class="variable">$param</span>"</span></div><div class="line">count=$[ <span class="variable">$count</span> + 1 ]</div><div class="line"><span class="keyword">done</span></div><div class="line">$ ./test20.sh -a -b test1 -d test2 test3 test4</div><div class="line">Found the -a option</div><div class="line">Found the -b option, with value test1</div><div class="line">Found the -d option</div><div class="line">Parameter 1: test2</div><div class="line">Parameter 2: test3</div><div class="line">Parameter 3: test4</div></pre></td></tr></table></figure>
<h3 id="选项标准化"><a href="#选项标准化" class="headerlink" title="选项标准化"></a>选项标准化</h3><p>主要是与Linux里已经存在含有某种程度的标准含义的字母相吻合，比如o一般代表输出等。<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">选 项 描 述</div><div class="line">-<span class="ruby">a 显示所有对象</span></div><div class="line">-<span class="ruby">c 生成一个计数</span></div><div class="line">-<span class="ruby">d 指定一个目录</span></div><div class="line">-<span class="ruby">e 扩展一个对象</span></div><div class="line">-<span class="ruby">f 指定读入数据的文件</span></div><div class="line">-<span class="ruby">h 显示命令的帮助信息</span></div><div class="line">-<span class="ruby">i 忽略文本大小写</span></div><div class="line">-<span class="ruby">l 产生输出的长格式版本</span></div><div class="line">-<span class="ruby">n 使用非交互模式（批处理）</span></div><div class="line">-<span class="ruby">o 将所有输出重定向到的指定的输出文件</span></div><div class="line">-<span class="ruby">q 以安静模式运行</span></div><div class="line">-<span class="ruby">r 递归地处理目录和文件</span></div><div class="line">-<span class="ruby">s 以安静模式运行</span></div><div class="line">-<span class="ruby">v 生成详细输出</span></div><div class="line">-<span class="ruby">x 排除某个对象</span></div><div class="line">-<span class="ruby">y 对所有问题回答yes</span></div></pre></td></tr></table></figure></p>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180522/AHC1ACD4IH.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://ytlogos.github.io/categories/Linux/"/>
    
    
      <category term="Shell" scheme="https://ytlogos.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux之处理用户输入(二)</title>
    <link href="https://ytlogos.github.io/2018/05/19/Linux%E4%B9%8B%E5%A4%84%E7%90%86%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5(%E4%BA%8C)/"/>
    <id>https://ytlogos.github.io/2018/05/19/Linux之处理用户输入(二)/</id>
    <published>2018-05-19T13:19:05.000Z</published>
    <updated>2018-05-21T02:24:46.491Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180204/7bEcJiH4l2.png?imageslim" alt="mark"></p>
<a id="more"></a>
<h2 id="特殊参数变量"><a href="#特殊参数变量" class="headerlink" title="特殊参数变量"></a>特殊参数变量</h2><p>在<code>bash shell</code>中有些特殊变量，它们会记录命令行参数</p>
<h3 id="参数统计"><a href="#参数统计" class="headerlink" title="参数统计"></a>参数统计</h3><p>特殊变量<code>$#</code>含有脚本运行时携带的命令行参数的个数，可以在脚本中任何地方使用这个特殊变量，就跟普通变量一样</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$ cat test9.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># Testing parameters</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 2 ]</div><div class="line"><span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="built_in">echo</span> Usage: test9.sh a b</div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="keyword">else</span></div><div class="line">total=$[ <span class="variable">$1</span> + <span class="variable">$2</span> ]</div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="built_in">echo</span> The total is <span class="variable">$total</span></div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="comment">#</span></div><div class="line">$</div><div class="line">$ bash test9.sh</div><div class="line">Usage: test9.sh a b</div><div class="line">$ bash test9.sh 10</div><div class="line">Usage: test9.sh a b</div><div class="line">$ bash test9.sh 10 15</div><div class="line">The total is 25</div></pre></td></tr></table></figure>
<p>如何获取最后一个命令行参数变量？可以通过以下方法获取：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ cat test10.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># Grabbing the last parameter</span></div><div class="line"><span class="comment">#</span></div><div class="line">params=<span class="variable">$#</span></div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="built_in">echo</span> The last parameter is <span class="variable">$params</span></div><div class="line"><span class="built_in">echo</span> The last parameter is $\&#123;!<span class="comment">#\&#125;</span></div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="comment">#</span></div><div class="line">$</div><div class="line">$ bash test10.sh 1 2 3 4 5</div><div class="line">The last parameter is 5</div><div class="line">The last parameter is 5</div></pre></td></tr></table></figure>
<h3 id="抓取所有数据"><a href="#抓取所有数据" class="headerlink" title="抓取所有数据"></a>抓取所有数据</h3><p><code>$*</code>和<code>$@</code>变量可以用来轻松访问所有参数，这两个变量能够在单个变量中存储所有的命令行参数。</p>
<ul>
<li><code>$*</code>变量会将命令行上提供的所有参数当作一个单词保存，这个单词包含了命令行中出现的每一个参数，基本上<code>$*</code>变量会将这些参数视为一个整体，而不是多个个体</li>
<li><code>$@</code>变量会将命令行上提供的所有参数当作同一字符串中的多个独立的单词，这样可以遍历所有的参数值，得到每个参数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ cat test11.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># testing $* and $@</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Using the $* method: $*"</span></div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Using the <span class="variable">$@</span> method: <span class="variable">$@</span>"</span></div><div class="line">$</div><div class="line">$ ./test11.sh rich barbara katie jessica</div><div class="line">Using the $* method: rich barbara katie jessica</div><div class="line">Using the <span class="variable">$@</span> method: rich barbara katie jessica</div></pre></td></tr></table></figure>
<p>二者的差异主要如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">$ cat test12.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># testing $* and $@</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">echo</span></div><div class="line">count=1</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="keyword">for</span> param <span class="keyword">in</span> <span class="string">"$*"</span></div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"$* Parameter #<span class="variable">$count</span> = <span class="variable">$param</span>"</span></div><div class="line">count=$[ <span class="variable">$count</span> + 1 ]</div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">echo</span></div><div class="line">count=1</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="keyword">for</span> param <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span></div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$@</span> Parameter #<span class="variable">$count</span> = <span class="variable">$param</span>"</span></div><div class="line">count=$[ <span class="variable">$count</span> + 1 ]</div><div class="line"><span class="keyword">done</span></div><div class="line">$</div><div class="line">$ ./test12.sh rich barbara katie jessica</div><div class="line">$* Parameter <span class="comment">#1 = rich barbara katie jessica</span></div><div class="line"><span class="variable">$@</span> Parameter <span class="comment">#1 = rich</span></div><div class="line"><span class="variable">$@</span> Parameter <span class="comment">#2 = barbara</span></div><div class="line"><span class="variable">$@</span> Parameter <span class="comment">#3 = katie</span></div><div class="line"><span class="variable">$@</span> Parameter <span class="comment">#4 = jessica</span></div></pre></td></tr></table></figure>
<blockquote>
<p><code>$*</code>变量将所有参数当成单个参数，<code>$@</code>变量会单独处理每个参数</p>
</blockquote>
<h2 id="移动变量"><a href="#移动变量" class="headerlink" title="移动变量"></a>移动变量</h2><p><code>bash shell</code>的<code>shift</code>命令默认条件下会将每个参数变量向左移动一个位置，即变量<code>$3</code>的值会移到<code>$2</code>，以此类推，变量<code>$1</code>的值会被删除，变量<code>$0</code>的值即程序名不会改变</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ cat test13.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># demonstrating the shift command</span></div><div class="line"><span class="built_in">echo</span></div><div class="line">count=1</div><div class="line"><span class="keyword">while</span> [ -n <span class="string">"<span class="variable">$1</span>"</span> ]</div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Parameter #<span class="variable">$count</span> = <span class="variable">$1</span>"</span></div><div class="line">count=$[ <span class="variable">$count</span> + 1 ]</div><div class="line"><span class="built_in">shift</span></div><div class="line"><span class="keyword">done</span></div><div class="line">$</div><div class="line">$ ./test13.sh rich barbara katie jessica</div><div class="line">Parameter <span class="comment">#1 = rich</span></div><div class="line">Parameter <span class="comment">#2 = barbara</span></div><div class="line">Parameter <span class="comment">#3 = katie</span></div><div class="line">Parameter <span class="comment">#4 = jessica</span></div></pre></td></tr></table></figure>
<h2 id="处理选项"><a href="#处理选项" class="headerlink" title="处理选项"></a>处理选项</h2><p>选项是跟在单破折号<code>-</code>后面的单个字母，比如<code>-n</code>，它能改变命令的行为。</p>
<h3 id="查找选项"><a href="#查找选项" class="headerlink" title="查找选项"></a>查找选项</h3><p>命令行选项在命令行上紧跟在脚本名之后，就跟命令行参数一样</p>
<h3 id="处理简单选项"><a href="#处理简单选项" class="headerlink" title="处理简单选项"></a>处理简单选项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$ cat test15.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># extracting command line options as parameters</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="keyword">while</span> [ -n <span class="string">"<span class="variable">$1</span>"</span> ]</div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">-a) <span class="built_in">echo</span> <span class="string">"Found the -a option"</span> ;;</div><div class="line">-b) <span class="built_in">echo</span> <span class="string">"Found the -b option"</span> ;;</div><div class="line">-c) <span class="built_in">echo</span> <span class="string">"Found the -c option"</span> ;;</div><div class="line">*) <span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span> is not an option"</span> ;;</div><div class="line"><span class="keyword">esac</span></div><div class="line"><span class="built_in">shift</span></div><div class="line"><span class="keyword">done</span></div><div class="line">$</div><div class="line">$ ./test15.sh -a -b -c -d</div><div class="line">Found the -a option</div><div class="line">Found the -b option</div><div class="line">Found the -c option</div><div class="line">-d is not an option</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#</span></div><div class="line">$ ./test15.sh -d -c -a</div><div class="line">-d is not an option</div><div class="line">Found the -c option</div><div class="line">Found the -a option</div></pre></td></tr></table></figure>
<h3 id="分离参数和选项"><a href="#分离参数和选项" class="headerlink" title="分离参数和选项"></a>分离参数和选项</h3><p><strong>Linux</strong>处理同时含有选项和参数的情况时，利用特殊字符将两者分开，该字符会告诉脚本何时选项结束以及普通参数何时开始。这个特殊字符就是双破折线<code>--</code>，<code>shell</code>会用双破折线来表明选项列表结束，在双破折线之后，脚本就可以放心将剩下的命令行参数当作参数而不是选项来处理。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$ cat test16.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># extracting options and parameters</span></div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="keyword">while</span> [ -n <span class="string">"<span class="variable">$1</span>"</span> ]</div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">-a) <span class="built_in">echo</span> <span class="string">"Found the -a option"</span> ;;</div><div class="line">-b) <span class="built_in">echo</span> <span class="string">"Found the -b option"</span>;;</div><div class="line">-c) <span class="built_in">echo</span> <span class="string">"Found the -c option"</span> ;;</div><div class="line">--) <span class="built_in">shift</span></div><div class="line"><span class="built_in">break</span> ;;</div><div class="line">*) <span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span> is not an option"</span>;;</div><div class="line"><span class="keyword">esac</span></div><div class="line"><span class="built_in">shift</span></div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="comment">#</span></div><div class="line">count=1</div><div class="line"><span class="keyword">for</span> param <span class="keyword">in</span> <span class="variable">$@</span></div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Parameter #<span class="variable">$count</span>: <span class="variable">$param</span>"</span></div><div class="line">count=$[ <span class="variable">$count</span> + 1 ]</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>在遇到双破折线时脚本用<code>break</code>命令跳出<code>while</code>循环，由于过早跳出循环，需要再加一条<code>shift</code>命令来将双破折线移出参数变量。</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ./test16.sh -c -a -b test1 test2 test3</div><div class="line">Found the -c <span class="keyword">option</span></div><div class="line">Found the -a <span class="keyword">option</span></div><div class="line">Found the -b <span class="keyword">option</span></div><div class="line">test1 <span class="keyword">is</span> <span class="keyword">not</span> an <span class="keyword">option</span></div><div class="line">test2 <span class="keyword">is</span> <span class="keyword">not</span> an <span class="keyword">option</span></div><div class="line">test3 <span class="keyword">is</span> <span class="keyword">not</span> an <span class="keyword">option</span></div></pre></td></tr></table></figure>
<p>结果说明在处理时脚本认为所有的命令行参数都是选项，下面用双破折线将命令行上的参数和选项分隔开</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ./test16<span class="selector-class">.sh</span> -c -<span class="selector-tag">a</span> -<span class="selector-tag">b</span> -- test1 test2 test3</div><div class="line">Found the -c option</div><div class="line">Found the -<span class="selector-tag">a</span> option</div><div class="line">Found the -<span class="selector-tag">b</span> option</div><div class="line">Parameter #<span class="number">1</span>: test1</div><div class="line">Parameter #<span class="number">2</span>: test2</div><div class="line">Parameter #<span class="number">3</span>: test3</div></pre></td></tr></table></figure>
<p>当脚本遇到双破折线时它会停止处理选项，并将剩下的参数都当作命令行参数。</p>
<h3 id="处理带值的选项"><a href="#处理带值的选项" class="headerlink" title="处理带值的选项"></a>处理带值的选项</h3><p>有些选项会带有一个额外的参数值，比如：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./testing<span class="selector-class">.sh</span> -<span class="selector-tag">a</span> test1 -<span class="selector-tag">b</span> -c -d test2</div></pre></td></tr></table></figure>
<p>当命令行选项要求有额外的参数时，处理如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">$ cat test17.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># extracting command line options and values</span></div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="keyword">while</span> [ -n <span class="string">"<span class="variable">$1</span>"</span> ]</div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">-a) <span class="built_in">echo</span> <span class="string">"Found the -a option"</span>;;</div><div class="line">-b) param=<span class="string">"<span class="variable">$2</span>"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Found the -b option, with parameter value <span class="variable">$param</span>"</span></div><div class="line"><span class="built_in">shift</span> ;;</div><div class="line">-c) <span class="built_in">echo</span> <span class="string">"Found the -c option"</span>;;</div><div class="line">--) <span class="built_in">shift</span></div><div class="line"><span class="built_in">break</span> ;;</div><div class="line">*) <span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span> is not an option"</span>;;</div><div class="line"><span class="keyword">esac</span></div><div class="line"><span class="built_in">shift</span></div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="comment">#</span></div><div class="line">count=1</div><div class="line"><span class="keyword">for</span> param <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span></div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Parameter #<span class="variable">$count</span>: <span class="variable">$param</span>"</span></div><div class="line">count=$[ <span class="variable">$count</span> + 1 ]</div><div class="line"><span class="keyword">done</span></div><div class="line">$</div><div class="line">$ ./test17.sh -a -b test1 -d</div><div class="line">Found the -a option</div><div class="line">Found the -b option, with parameter value test1</div><div class="line">-d is not an option</div></pre></td></tr></table></figure>
<p>在这个例子中，<code>case</code>语句定义了三个处理选项，<code>-b</code>选项还有一个额外的参数值，由于要处理的参数是<code>$1</code>，额外的参数值就应该位于<code>$2</code>(因为所有的参数在处理完之后都会被移出)。只要将参数值从<code>$2</code>变量中提取出来就行了，因为这个选项占用了两个参数位，所以需要使用<code>shift</code>命令多移动一个位置。</p>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180204/7bEcJiH4l2.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://ytlogos.github.io/categories/Linux/"/>
    
    
      <category term="Shell" scheme="https://ytlogos.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux之处理用户输入</title>
    <link href="https://ytlogos.github.io/2018/05/18/Linux%E4%B9%8B%E5%A4%84%E7%90%86%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/"/>
    <id>https://ytlogos.github.io/2018/05/18/Linux之处理用户输入/</id>
    <published>2018-05-18T13:19:05.000Z</published>
    <updated>2018-05-20T05:37:34.042Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180204/7bEcJiH4l2.png?imageslim" alt="mark"></p>
<a id="more"></a>
<h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>向<code>shell</code>脚本传递参数的最基本方法是使用命令行参数。命令行参数允许在运行脚本时向命令行添加数据。</p>
<h3 id="读取参数"><a href="#读取参数" class="headerlink" title="读取参数"></a>读取参数</h3><p><code>bash shell</code>将一些称为位置参数的特殊变量分配给输入到命令行中的所有参数，包括<code>shell</code>所执行的脚本名称。位置参数变量是标准的数字:\$0是程序名，\$1是第一个变量,依此类推到第九个参数\$9。</p>
<p>下面是在<code>shell</code>脚本中使用单个命令行参数的简单例子</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ cat test1.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># using one command line parameter</span></div><div class="line"><span class="comment">#</span></div><div class="line">factorial=1</div><div class="line"><span class="keyword">for</span> (( number = 1; number &lt;= <span class="variable">$1</span> ; number++ ))</div><div class="line"><span class="keyword">do</span></div><div class="line">factorial=$[ <span class="variable">$factorial</span> * <span class="variable">$number</span> ]</div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="built_in">echo</span> The factorial of <span class="variable">$1</span> is <span class="variable">$factorial</span></div><div class="line">$</div><div class="line">$ ./test1.sh 5</div><div class="line">The factorial of 5 is 120</div></pre></td></tr></table></figure>
<blockquote>
<p>可以在<code>shell</code>脚本中像使用其他变量一样使用\$1变量，<code>shell</code>脚本会自动蒋命令行参数的值分配给变量，不需要用户做任何处理</p>
</blockquote>
<p>如果需要输入更多的命令行参数，则每个参数必须用空格分开</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ cat test2.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># testing two command line parameters</span></div><div class="line"><span class="comment">#</span></div><div class="line">total=$[ <span class="variable">$1</span> * <span class="variable">$2</span> ]</div><div class="line"><span class="built_in">echo</span> The first parameter is <span class="variable">$1</span>.</div><div class="line"><span class="built_in">echo</span> The second parameter is <span class="variable">$2</span>.</div><div class="line"><span class="built_in">echo</span> The total value is <span class="variable">$total</span>.</div><div class="line">$</div><div class="line">$ ./test2.sh 2 5</div><div class="line">The first parameter is 2.</div><div class="line">The second parameter is 5.</div><div class="line">The total value is 10.</div></pre></td></tr></table></figure>
<p><code>shell</code>会将每个参数分配给对应的变量</p>
<p>也可以在命令行中使用文本字符串<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ cat test3.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># testing string parameters</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">echo</span> Hello <span class="variable">$1</span>, glad to meet you.</div><div class="line">$</div><div class="line">$ ./test3.sh Rich</div><div class="line">Hello Rich, glad to meet you.</div></pre></td></tr></table></figure></p>
<p><code>shell</code>将输入到命令行的字符串值传给脚本，但碰到含有空格的文本字符串时就会出现问题：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ./test3.sh Rich Blum</span></div><div class="line">Hello Rich, glad to meet you.</div></pre></td></tr></table></figure>
<blockquote>
<p>记住每个参数都是用空格分隔的，所以<code>shell</code>会将空格当成两个值的分隔符。要在参数值中包含空格，必须使用引号(单双引号均可)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ./test3.sh <span class="string">'Rich Blum'</span></span></div><div class="line">Hello Rich Blum, glad to meet you.</div></pre></td></tr></table></figure>
<blockquote>
<p>将文本字符串作为参数传递时，引号并非数据的一部分，它们只是表明数据的起止位置</p>
</blockquote>
<p>如果脚本需要的命令行参数不止9个，需要在第九个变量之后的变量数字周围加上花括号,比如\${10}</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ cat test4.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># handling lots of parameters</span></div><div class="line"><span class="comment">#</span></div><div class="line">total=$[ <span class="variable">$&#123;10&#125;</span> * <span class="variable">$&#123;11&#125;</span> ]</div><div class="line"><span class="built_in">echo</span> The tenth parameter is <span class="variable">$&#123;10&#125;</span></div><div class="line"><span class="built_in">echo</span> The eleventh parameter is <span class="variable">$&#123;11&#125;</span></div><div class="line"><span class="built_in">echo</span> The total is <span class="variable">$total</span></div><div class="line">$</div><div class="line">$ ./test4.sh 1 2 3 4 5 6 7 8 9 10 11 12</div><div class="line">The tenth parameter is 10</div><div class="line">The eleventh parameter is 11</div><div class="line">The total is 110</div></pre></td></tr></table></figure>
<h3 id="读取脚本名"><a href="#读取脚本名" class="headerlink" title="读取脚本名"></a>读取脚本名</h3><p>可以用\$0参数获取<code>shell</code>在命令行启动的脚本名</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ cat test5.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># Testing the $0 parameter</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">echo</span> The zero parameter is <span class="built_in">set</span> to: <span class="variable">$0</span></div><div class="line"><span class="comment">#</span></div><div class="line">$</div><div class="line">$ bash test5.sh</div><div class="line">The zero parameter is <span class="built_in">set</span> to: test5.sh</div></pre></td></tr></table></figure>
<p>这里存在一个潜在的问题，如果使用另一个命令来运行脚本，命令会和脚本名混在一起，出现在\$0参数中</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ./test5.<span class="keyword">sh</span></div><div class="line">The zero parameter <span class="keyword">is</span> <span class="keyword">set</span> <span class="keyword">to</span>: ./test5.<span class="keyword">sh</span></div></pre></td></tr></table></figure>
<p>另外如果传给\$0变量的实际字符串不仅仅是脚本名，而是完整的脚本路径时，变量\$0就会使用整个路径</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ bash /home/Christine/test5.<span class="keyword">sh</span></div><div class="line">The zero parameter <span class="keyword">is</span> <span class="keyword">set</span> <span class="keyword">to</span>: /home/Christine/test5.<span class="keyword">sh</span></div></pre></td></tr></table></figure>
<p>有个小命令可以解决这些问题，<code>basename</code>命令会返回不包含路径的脚本名</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ cat test5b.sh</div><div class="line"><span class="comment">#!/bin/bash</span></div><div class="line"><span class="comment"># Using basename with the $0 parameter</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="attribute">name</span>=$(basename <span class="variable">$0</span>)</div><div class="line">echo</div><div class="line">echo The<span class="built_in"> script </span>name is: <span class="variable">$name</span></div><div class="line"><span class="comment">#</span></div><div class="line">$ bash /home/Christine/test5b.sh</div><div class="line">The<span class="built_in"> script </span>name is: test5b.sh</div><div class="line">$</div><div class="line">$ ./test5b.sh</div><div class="line">The<span class="built_in"> script </span>name is: test5b.sh</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> cat test6.sh</span></div><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> Testing a Multi-function script</span></div><div class="line"><span class="meta">#</span><span class="bash"></span></div><div class="line">name=$(basename $0)</div><div class="line"><span class="meta">#</span><span class="bash"></span></div><div class="line">if [ $name = "addem" ]</div><div class="line">then</div><div class="line">total=$[ $1 + $2 ]</div><div class="line"><span class="meta">#</span><span class="bash"></span></div><div class="line">elif [ $name = "multem" ]</div><div class="line">then</div><div class="line">total=$[ $1 * $2 ]</div><div class="line">fi</div><div class="line"><span class="meta">#</span><span class="bash"></span></div><div class="line">echo</div><div class="line">echo The calculated value is $total</div><div class="line"><span class="meta">#</span><span class="bash"></span></div><div class="line"><span class="meta">$</span><span class="bash"></span></div><div class="line"><span class="meta">$</span><span class="bash"> cp test6.sh addem</span></div><div class="line"><span class="meta">$</span><span class="bash"> chmod u+x addem</span></div><div class="line"><span class="meta">$</span><span class="bash"></span></div><div class="line"><span class="meta">$</span><span class="bash"> ln -s test6.sh multem</span></div><div class="line"><span class="meta">$</span><span class="bash"></span></div><div class="line"><span class="meta">$</span><span class="bash"> ls -l *em</span></div><div class="line">-rwxrw-r--. 1 Christine Christine 224 Jun 30 23:50 addem</div><div class="line">lrwxrwxrwx. 1 Christine Christine 8 Jun 30 23:50 multem -&gt; test6.sh</div><div class="line"><span class="meta">$</span><span class="bash"></span></div><div class="line"><span class="meta">$</span><span class="bash"> ./addem 2 5</span></div><div class="line">The calculated value is 7</div><div class="line"><span class="meta">$</span><span class="bash"></span></div><div class="line"><span class="meta">$</span><span class="bash"> ./multem 2 5</span></div><div class="line">The calculated value is 10</div></pre></td></tr></table></figure>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180204/7bEcJiH4l2.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://ytlogos.github.io/categories/Linux/"/>
    
    
      <category term="Shell" scheme="https://ytlogos.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux结构化命令which</title>
    <link href="https://ytlogos.github.io/2018/05/17/Linux%E7%BB%93%E6%9E%84%E5%8C%96%E5%91%BD%E4%BB%A4which/"/>
    <id>https://ytlogos.github.io/2018/05/17/Linux结构化命令which/</id>
    <published>2018-05-17T13:19:05.000Z</published>
    <updated>2018-05-19T09:40:42.827Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180204/7bEcJiH4l2.png?imageslim" alt="mark"></p>
<a id="more"></a>
<h2 id="for命令"><a href="#for命令" class="headerlink" title="for命令"></a><code>for</code>命令</h2><p><code>for</code>命令允许你创建一个遍历一系列值的循环，每次迭代都是用其中一个值来执行已定义好的命令。具体格式如下：</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> var <span class="keyword">in</span> <span class="built_in">list</span></div><div class="line"><span class="keyword">do</span></div><div class="line">    commands</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<p><code>for</code>循环假定每个值都是用空格分隔的，如果有包含空格的数据值，用双引号圈起来</p>
<h3 id="读取列表中的值"><a href="#读取列表中的值" class="headerlink" title="读取列表中的值"></a>读取列表中的值</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ cat test1</div><div class="line"><span class="comment">#!/bin/bash</span></div><div class="line"><span class="comment"># basic for command</span></div><div class="line"><span class="keyword">for</span> test <span class="keyword">in</span> Alabama Alaska Arizona Arkansas California Colorado</div><div class="line">do</div><div class="line">echo The next <span class="keyword">state</span> is <span class="variable">$test</span></div><div class="line">done</div><div class="line">$ ./test1</div><div class="line">The next <span class="keyword">state</span> is Alabama</div><div class="line">The next <span class="keyword">state</span> is Alaska</div><div class="line">The next <span class="keyword">state</span> is Arizona</div><div class="line">The next <span class="keyword">state</span> is Arkansas</div><div class="line">The next <span class="keyword">state</span> is California</div><div class="line">The next <span class="keyword">state</span> is Colorado</div></pre></td></tr></table></figure>
<h3 id="读取列表中的复杂值"><a href="#读取列表中的复杂值" class="headerlink" title="读取列表中的复杂值"></a>读取列表中的复杂值</h3><p>看下面的例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ cat badtest1</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># another example of how not to use the for command</span></div><div class="line"><span class="keyword">for</span> <span class="built_in">test</span> <span class="keyword">in</span> I don<span class="string">'t know if this'</span>ll work</div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"word:<span class="variable">$test</span>"</span></div><div class="line"><span class="keyword">done</span></div><div class="line">$ ./badtest1</div><div class="line">word:I</div><div class="line">word:dont know <span class="keyword">if</span> thisll</div><div class="line">word:work</div></pre></td></tr></table></figure></p>
<p>结果并不是我们想要的</p>
<p>有两种办法解决该问题：</p>
<ul>
<li>使用转义字符(反斜线)来将单引号转义</li>
<li>使用双引号来定义用到单引号的值</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ cat test2</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># another example of how not to use the for command</span></div><div class="line"><span class="keyword">for</span> <span class="built_in">test</span> <span class="keyword">in</span> I don\<span class="string">'t know if "this'</span>ll<span class="string">" work</span></div><div class="line">do</div><div class="line">echo "word:<span class="variable">$test</span><span class="string">"</span></div><div class="line">done</div><div class="line">$ ./test2</div><div class="line">word:I</div><div class="line">word:don't</div><div class="line">word:know</div><div class="line">word:if</div><div class="line">word:this'll</div><div class="line">word:work</div></pre></td></tr></table></figure>
<h3 id="从变量读取列表"><a href="#从变量读取列表" class="headerlink" title="从变量读取列表"></a>从变量读取列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ cat test4</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># using a variable to hold the list</span></div><div class="line">list=<span class="string">"Alabama Alaska Arizona Arkansas Colorado"</span></div><div class="line">list=<span class="variable">$list</span><span class="string">" Connecticut"</span></div><div class="line"><span class="keyword">for</span> state <span class="keyword">in</span> <span class="variable">$list</span></div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Have you ever visited <span class="variable">$state</span>?"</span></div><div class="line"><span class="keyword">done</span></div><div class="line">$ ./test4</div><div class="line">Have you ever visited Alabama?</div><div class="line">Have you ever visited Alaska?</div><div class="line">Have you ever visited Arizona?</div><div class="line">Have you ever visited Arkansas?</div><div class="line">Have you ever visited Colorado?</div><div class="line">Have you ever visited Connecticut?</div></pre></td></tr></table></figure>
<h3 id="从命令读取值"><a href="#从命令读取值" class="headerlink" title="从命令读取值"></a>从命令读取值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">$ cat test5</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># reading values from a file</span></div><div class="line">file=<span class="string">"states"</span></div><div class="line"><span class="keyword">for</span> state <span class="keyword">in</span> $(cat <span class="variable">$file</span>)</div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Visit beautiful <span class="variable">$state</span>"</span></div><div class="line"><span class="keyword">done</span></div><div class="line">$ cat states</div><div class="line">Alabama</div><div class="line">Alaska</div><div class="line">Arizona</div><div class="line">Arkansas</div><div class="line">Colorado</div><div class="line">Connecticut</div><div class="line">Delaware</div><div class="line">Florida</div><div class="line">Georgia</div><div class="line">$ ./test5</div><div class="line">Visit beautiful Alabama</div><div class="line">Visit beautiful Alaska</div><div class="line">Visit beautiful Arizona</div><div class="line">Visit beautiful Arkansas</div><div class="line">Visit beautiful Colorado</div><div class="line">Visit beautiful Connecticut</div><div class="line">Visit beautiful Delaware</div><div class="line">Visit beautiful Florida</div><div class="line">Visit beautiful Georgia</div></pre></td></tr></table></figure>
<h3 id="更改字段分隔符"><a href="#更改字段分隔符" class="headerlink" title="更改字段分隔符"></a>更改字段分隔符</h3><p>造成这个问题的原因是特殊的环境变量IFS，叫做内部字段分隔符，IFS环境变量定义了<strong>bash shell</strong>用作分隔符的一系列字符。默认情况下，<strong>bash shell</strong>将下列字符当作字段分隔符：</p>
<ul>
<li>空格</li>
<li>制表符</li>
<li>换行符</li>
</ul>
<p>要解决上面遇到的处理文件中含有字段分隔符的问题，可以在<strong>shell</strong>脚本中临时更改IFS环境变量的值来限制被<strong>bahs shell</strong>当作字段分隔符的字符</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ cat test5b</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># reading values from a file</span></div><div class="line">file=<span class="string">"states"</span></div><div class="line">IFS=$<span class="string">'\n'</span></div><div class="line"><span class="keyword">for</span> state <span class="keyword">in</span> $(cat <span class="variable">$file</span>)</div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Visit beautiful <span class="variable">$state</span>"</span></div><div class="line"><span class="keyword">done</span></div><div class="line">$ ./test5b</div><div class="line">Visit beautiful Alabama</div><div class="line">Visit beautiful Alaska</div><div class="line">Visit beautiful Arizona</div><div class="line">Visit beautiful Arkansas</div><div class="line">Visit beautiful Colorado</div><div class="line">Visit beautiful Connecticut</div><div class="line">Visit beautiful Delaware</div><div class="line">Visit beautiful Florida</div><div class="line">Visit beautiful Georgia</div><div class="line">Visit beautiful New York</div><div class="line">Visit beautiful New Hampshire</div><div class="line">Visit beautiful North Carolina</div></pre></td></tr></table></figure>
<p>如果要指定多个IFS字符，只要将它们在赋值行串起来就行：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IFS=$'\n':;<span class="string">"</span></div></pre></td></tr></table></figure>
<p>这个赋值会将换行符、冒号、分号和双引号作为字段分隔符</p>
<h3 id="用通配符读取目录"><a href="#用通配符读取目录" class="headerlink" title="用通配符读取目录"></a>用通配符读取目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$ cat test6</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># iterate through all the files in a directory</span></div><div class="line"><span class="keyword">for</span> file <span class="keyword">in</span> /home/rich/<span class="built_in">test</span>/*</div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="keyword">if</span> [ -d <span class="string">"<span class="variable">$file</span>"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$file</span> is a directory"</span></div><div class="line"><span class="keyword">elif</span> [ -f <span class="string">"<span class="variable">$file</span>"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$file</span> is a file"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div><div class="line">$ ./test6</div><div class="line">/home/rich/<span class="built_in">test</span>/dir1 is a directory</div><div class="line">/home/rich/<span class="built_in">test</span>/myprog.c is a file</div><div class="line">/home/rich/<span class="built_in">test</span>/myprog is a file</div><div class="line">/home/rich/<span class="built_in">test</span>/myscript is a file</div><div class="line">/home/rich/<span class="built_in">test</span>/newdir is a directory</div><div class="line">/home/rich/<span class="built_in">test</span>/newfile is a file</div><div class="line">/home/rich/<span class="built_in">test</span>/newfile2 is a file</div><div class="line">/home/rich/<span class="built_in">test</span>/testdir is a directory</div><div class="line">/home/rich/<span class="built_in">test</span>/testing is a file</div><div class="line">/home/rich/<span class="built_in">test</span>/testprog is a file</div><div class="line">/home/rich/<span class="built_in">test</span>/testprog.c is a file</div></pre></td></tr></table></figure>
<h3 id="C语言风格的for命令"><a href="#C语言风格的for命令" class="headerlink" title="C语言风格的for命令"></a><code>C</code>语言风格的<code>for</code>命令</h3><p><strong>bash</strong>中<code>C</code>语言风格的<code>for</code>循环的基本格式:</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (( <span class="keyword">variable</span> assignment ; condition ; iteration process ))</div></pre></td></tr></table></figure>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ cat test8</div><div class="line"><span class="comment">#!/bin/bash</span></div><div class="line"><span class="comment"># testing the C-style for loop</span></div><div class="line"><span class="keyword">for</span> (( i=<span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ ))</div><div class="line">do</div><div class="line">echo <span class="string">"The next number is $i"</span></div><div class="line">done</div><div class="line">$ ./test8</div><div class="line">The next <span class="built_in">number</span> <span class="keyword">is</span> <span class="number">1</span></div><div class="line">The next <span class="built_in">number</span> <span class="keyword">is</span> <span class="number">2</span></div><div class="line">The next <span class="built_in">number</span> <span class="keyword">is</span> <span class="number">3</span></div><div class="line">The next <span class="built_in">number</span> <span class="keyword">is</span> <span class="number">4</span></div><div class="line">The next <span class="built_in">number</span> <span class="keyword">is</span> <span class="number">5</span></div><div class="line">The next <span class="built_in">number</span> <span class="keyword">is</span> <span class="number">6</span></div><div class="line">The next <span class="built_in">number</span> <span class="keyword">is</span> <span class="number">7</span></div><div class="line">The next <span class="built_in">number</span> <span class="keyword">is</span> <span class="number">8</span></div><div class="line">The next <span class="built_in">number</span> <span class="keyword">is</span> <span class="number">9</span></div><div class="line">The next <span class="built_in">number</span> <span class="keyword">is</span> <span class="number">10</span></div></pre></td></tr></table></figure>
<h3 id="使用多个变量"><a href="#使用多个变量" class="headerlink" title="使用多个变量"></a>使用多个变量</h3><p><code>C</code>语言风格的<code>for</code>命令也允许为迭代使用多个变量。循环会单独处理每个变量，你可以为每个变量定义不同的迭代过程。尽管可以使用多个变量，但你只能在<code>for</code>循环中定义一种条件:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ cat test9</div><div class="line">#!/bin/bash</div><div class="line"># multiple variables</div><div class="line">for (( a=<span class="number">1</span>, b=<span class="number">10</span>; a &lt;= <span class="number">10</span>; a++, b-- ))</div><div class="line">do</div><div class="line">echo <span class="string">"$a - $b"</span></div><div class="line">done</div><div class="line">$ ./test9</div><div class="line"><span class="number">1</span> - <span class="number">10</span></div><div class="line"><span class="number">2</span> - <span class="number">9</span></div><div class="line"><span class="number">3</span> - <span class="number">8</span></div><div class="line"><span class="number">4</span> - <span class="number">7</span></div><div class="line"><span class="number">5</span> - <span class="number">6</span></div><div class="line"><span class="number">6</span> - <span class="number">5</span></div><div class="line"><span class="number">7</span> - <span class="number">4</span></div><div class="line"><span class="number">8</span> - <span class="number">3</span></div><div class="line"><span class="number">9</span> - <span class="number">2</span></div><div class="line"><span class="number">10</span> - <span class="number">1</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180204/7bEcJiH4l2.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://ytlogos.github.io/categories/Linux/"/>
    
    
      <category term="Shell" scheme="https://ytlogos.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux之结构化命令</title>
    <link href="https://ytlogos.github.io/2018/05/16/Linux%E4%B9%8B%E7%BB%93%E6%9E%84%E5%8C%96%E5%91%BD%E4%BB%A4/"/>
    <id>https://ytlogos.github.io/2018/05/16/Linux之结构化命令/</id>
    <published>2018-05-16T13:19:05.000Z</published>
    <updated>2018-05-19T08:56:00.898Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180204/7bEcJiH4l2.png?imageslim" alt="mark"></p>
<a id="more"></a>
<h2 id="test语句"><a href="#test语句" class="headerlink" title="test语句"></a><code>test</code>语句</h2><p><code>test</code>命令提供了在<code>if-then</code>语句中测试不同条件的途径。如果<code>test</code>命令中列出的条件成立，<code>test</code>命令就会推出并返回退出状态码0。如果条件不成立，<code>test</code>命令就会推出并返回非零的退出状态码，这使得<code>if-then</code>语句不会被执行。<code>test</code>命令格式非常简单:</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">test </span>condition</div></pre></td></tr></table></figure>
<p>在<code>if-then</code>语句中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="built_in">test</span> condition</div><div class="line"><span class="keyword">then</span></div><div class="line">    commands</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p><strong>bash shell</strong>提供了另一种条件测试方法，无需在<code>if-then</code>语句中声明<code>test</code>命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ condition ]</div><div class="line"><span class="keyword">then</span></div><div class="line">    commands</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<blockquote>
<p>方括号定义了测试条件，需要注意的是，第一个方括号之后和第二个方括号之前必须加上一个空格，否则会报错。</p>
</blockquote>
<p><code>test</code>命令可以判断三类条件</p>
<ul>
<li>数值比较(bash shell只能处理整数)</li>
<li>字符串比较</li>
<li>文件比较</li>
</ul>
<blockquote>
<p>在比较测试中，大写字母被认为是小于小写字母的，但是<code>sort</code>命令恰好相反。比较测试中使用的是标准的<strong>ASCⅡ</strong>，根据每个字符的<strong>ASCⅡ</strong>数值来决定排序结果。<code>sort</code>命令使用的是系统的本地化语言设置中定义的排序顺序，对于英语，本地化设置指定了在排序顺序中小写字母出现在大写字母之前。<code>test</code>命令和测试表达式使用标准的数字比较符号来表示字符串比较，而用文本代码来表示数值比较。</p>
</blockquote>
<h2 id="if-then高级特性"><a href="#if-then高级特性" class="headerlink" title="if-then高级特性"></a><code>if-then</code>高级特性</h2><p><strong>bash shell</strong>提供了两项可在<code>if-then</code>语句中使用的高级特性：</p>
<ul>
<li>用于数学表达式的双括号(无需转义)</li>
<li>用于高级字符串处理功能的双方括号(支持模式匹配)</li>
</ul>
<h3 id="使用双括号"><a href="#使用双括号" class="headerlink" title="使用双括号"></a>使用双括号</h3><p>双括号提供了使用高级数学表达式的功能，双括号命令格式如下：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(( <span class="name">expression</span> ))</div></pre></td></tr></table></figure>
<h3 id="使用双方括号"><a href="#使用双方括号" class="headerlink" title="使用双方括号"></a>使用双方括号</h3><p>双方括号命令提供了针对字符串比较的高级特性，其命令格式如下：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">[[ expression ]]</span></div></pre></td></tr></table></figure>
<h2 id="case命令"><a href="#case命令" class="headerlink" title="case命令"></a><code>case</code>命令</h2><p><code>case</code>命令会将指定的变量与不同模式进行比较，如果变量和模式模式匹配，那么<code>shell</code>会执行为该模式指定的命令。可以通过竖线操作符来分隔出多个模式，星号会捕获所有与已知模式不匹配的值。格式具体如下：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">case variable <span class="keyword">in</span> </div><div class="line">pattern1 | pattern2) command1;;</div><div class="line">pattern3) command2;;</div><div class="line">*)<span class="built_in"> default </span>commands;;</div><div class="line">esac</div></pre></td></tr></table></figure>
<p>举个例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ cat test26.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># using the case command</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="keyword">case</span> <span class="variable">$USER</span> <span class="keyword">in</span></div><div class="line">rich | barbara)</div><div class="line"><span class="built_in">echo</span> <span class="string">"Welcome, <span class="variable">$USER</span>"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Please enjoy your visit"</span>;;</div><div class="line">testing)</div><div class="line"><span class="built_in">echo</span> <span class="string">"Special testing account"</span>;;</div><div class="line">jessica)</div><div class="line"><span class="built_in">echo</span> <span class="string">"Do not forget to log off when you're done"</span>;;</div><div class="line">*)</div><div class="line"><span class="built_in">echo</span> <span class="string">"Sorry, you are not allowed here"</span>;;</div><div class="line"><span class="keyword">esac</span></div><div class="line">$</div><div class="line">$ ./test26.sh</div><div class="line">Welcome, rich</div><div class="line">Please enjoy your visit</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180204/7bEcJiH4l2.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://ytlogos.github.io/categories/Linux/"/>
    
    
      <category term="Shell" scheme="https://ytlogos.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令</title>
    <link href="https://ytlogos.github.io/2018/05/15/Linux%E5%91%BD%E4%BB%A4/"/>
    <id>https://ytlogos.github.io/2018/05/15/Linux命令/</id>
    <published>2018-05-15T13:19:05.000Z</published>
    <updated>2018-05-19T06:30:54.079Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180204/7bEcJiH4l2.png?imageslim" alt="mark"></p>
<a id="more"></a>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul>
<li><strong>tail</strong>命令添加-f参数允许在其他进程使用该文件时查看文件的内容。<strong>tail</strong>命令会保持活动状态。</li>
<li>变量名、等号和值之间没有空格，如果要赋值一个含有空格的字符串组，必须用单引号来界定字符串的首尾。</li>
<li>删除已经存在的环境变量，可以用<code>unset</code>命令完成。在涉及环境变量名时，需要记住的一点是：如果要用到环境变量，使用\$，如果要操作变量，不使用\$。一个例外就是使用<code>printenv</code>显示某个变量的值。</li>
<li>/etc/profile文件是<code>bash shell</code>默认的主启动文件，只要登录了<strong>Linux</strong>系统，<code>bash</code>就会执行/etc/profile启动文件中的内容。</li>
<li>用来向<strong>Linux</strong>系统添加新用户的主要工具是<code>useradd</code>,删除用户使用<code>userdel</code>。</li>
<li><strong>Vim</strong>编辑器中<code>G</code>表示移到最后一行，<code>num G</code>表示移到第<code>num</code>行，<code>gg</code>表示移到第一行。</li>
<li><code>echo</code>命令如果想将文本字符串和命令输出显示在同一行中，可以用<code>echo</code>语句的<code>-n</code>参数。需要在字符串的两侧使用引号，保证要显示的字符串尾部有一个空格。</li>
<li>使用等号将值赋给用户变量，在变量、等号和值之间不能出现空格。</li>
<li><p>有两种方法可以将命令输出赋给变量</p>
<ul>
<li>反引号字符(`)</li>
<li>$()格式</li>
</ul>
</li>
<li><p>重定向输出时，<code>&gt;</code>会覆盖已有文件，<code>&gt;&gt;</code>追加数据</p>
</li>
<li>输入重定向和输出重定向正好相反，输入重定向将文件的内容重定到命令，而非将命令的输出重定向到文件。输入重定向的符号是<code>&lt;</code>：<code>command &lt; inputfile</code>。一个记忆方法是：在命令行上，命令总在左侧，而重定向符号指向数据流动的方向。</li>
<li>使用方括号进行数学运算，在<strong>bash</strong>中将一个数学运算结果赋值给某个变量时，可以用美元符和方括号<code>($[ operation ])</code>将数学表达式围起来</li>
</ul>
<h2 id="结构化命令"><a href="#结构化命令" class="headerlink" title="结构化命令"></a>结构化命令</h2><h3 id="使用if-then语句"><a href="#使用if-then语句" class="headerlink" title="使用if-then语句"></a>使用<code>if-then</code>语句</h3><p><code>if-then</code>语句是最基本的结构化语句，其格式如下：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">command</span></div><div class="line"><span class="keyword">then</span> </div><div class="line">    <span class="keyword">command</span></div><div class="line">fi</div></pre></td></tr></table></figure>
<p><strong>bash shell</strong>的语句会运行<code>if</code>后面的命令，如果该命令的退出码是0(表示该命令运行成功),位于<code>then</code>部分的命令就会被执行，否则<code>then</code>部分的命令不会被执行，<strong>bash shell</strong>会继续执行脚本中的下一个命令。<code>fi</code>语句用来表示<code>if-then</code>语句到此结束。</p>
<h3 id="使用if-then-else语句"><a href="#使用if-then-else语句" class="headerlink" title="使用if-then-else语句"></a>使用<code>if-then-else</code>语句</h3><p>在<code>if-then</code>语句中，不管命令是否成功执行，都只有一种选择。如果命令返回一个非零退出状态码，<code>bash shell</code>会继续执行脚本中的下一条命令。在这种情况下，如果能够执行另一组命令就好了，这正是<code>if-then-else</code>语句的作用。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">command</span></div><div class="line"><span class="keyword">then</span>  </div><div class="line">     <span class="keyword">command</span></div><div class="line"><span class="keyword">else</span></div><div class="line">     <span class="keyword">command</span></div><div class="line">fi</div></pre></td></tr></table></figure>
<p>与<code>if-then</code>相似，区别就是当<code>if</code>语句中的命令返回非零退出状态码时,<code>bash shell</code>会执行<code>else</code>部分中的命令。</p>
<h3 id="嵌套if"><a href="#嵌套if" class="headerlink" title="嵌套if"></a>嵌套<code>if</code></h3><p>有时需要检查脚本代码中的多种条件，可以使用嵌套的<code>if-then</code>语句。嵌套的<code>if-then</code>语句位于主<code>if-then-else</code>语句的<code>else</code>代码块中。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">$ ls -d /home/NoSuchUser/</div><div class="line">/home/NoSuchUser/</div><div class="line">$</div><div class="line">$ cat test5.sh</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># Testing nested ifs</span></div><div class="line"><span class="comment">#</span></div><div class="line">testuser=NoSuchUser</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="keyword">if</span> grep <span class="variable">$testuser</span> /etc/passwd</div><div class="line"><span class="keyword">then</span></div><div class="line">   <span class="built_in">echo</span> <span class="string">"The user <span class="variable">$testuser</span> exists on this system."</span></div><div class="line"><span class="keyword">else</span></div><div class="line">   <span class="built_in">echo</span> <span class="string">"The user <span class="variable">$testuser</span> does not exist on this system."</span></div><div class="line">   <span class="keyword">if</span> ls -d /home/<span class="variable">$testuser</span>/</div><div class="line">   <span class="keyword">then</span></div><div class="line">      <span class="built_in">echo</span> <span class="string">"However, <span class="variable">$testuser</span> has a directory."</span></div><div class="line">   <span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div><div class="line">$</div><div class="line">$ ./test5.sh</div><div class="line">The user NoSuchUser does not exist on this system.</div><div class="line">/home/NoSuchUser/</div><div class="line">However, NoSuchUser has a directory.</div></pre></td></tr></table></figure>
<p>可以使用<code>else</code>部分的另一种形式:<code>elif</code>。这样就不用书写多个<code>if-then</code>语句了，<code>elif</code>使用另一个<code>if-then</code>语句延续<code>else</code>部分。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">command</span></div><div class="line"><span class="keyword">then</span></div><div class="line">    <span class="keyword">command</span></div><div class="line">elif <span class="keyword">command</span></div><div class="line"><span class="keyword">then</span></div><div class="line">    more <span class="keyword">command</span></div><div class="line">fi</div></pre></td></tr></table></figure>
<p><code>elif</code>语句提供了另一个要测试的命令，这类似于原始的<code>if</code>语句行。如果<code>elif</code>后命令的退出状态码是0，则<code>bash</code>会执行第二个<code>then</code>语句部分的命令。</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">$ cat test5.sh</div><div class="line"><span class="comment">#!/bin/bash</span></div><div class="line"><span class="comment"># Testing nested ifs - use elif &amp; else</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="attribute">testuser</span>=NoSuchUser</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="keyword">if</span> grep <span class="variable">$testuser</span> /etc/passwd</div><div class="line">then</div><div class="line">echo <span class="string">"The user <span class="variable">$testuser</span> exists on this system."</span></div><div class="line"><span class="comment">#</span></div><div class="line">elif ls -d /home/<span class="variable">$testuser</span></div><div class="line">then</div><div class="line">echo <span class="string">"The user <span class="variable">$testuser</span> does not exist on this system."</span></div><div class="line">echo <span class="string">"However, <span class="variable">$testuser</span> has a directory."</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="keyword">else</span></div><div class="line">echo <span class="string">"The user <span class="variable">$testuser</span> does not exist on this system."</span></div><div class="line">echo <span class="string">"And, <span class="variable">$testuser</span> does not have a directory."</span></div><div class="line">fi</div><div class="line">$</div><div class="line">$ ./test5.sh</div><div class="line">/home/NoSuchUser</div><div class="line">The<span class="built_in"> user </span>NoSuchUser does <span class="keyword">not</span> exist on this system.</div><div class="line">However, NoSuchUser has a directory.</div><div class="line">$</div><div class="line">$ sudo rmdir /home/NoSuchUser</div><div class="line">[sudo] password <span class="keyword">for</span> Christine:</div><div class="line">$</div><div class="line">$ ./test5.sh</div><div class="line">ls: cannot access /home/NoSuchUser: <span class="literal">No</span> such file <span class="keyword">or</span> directory</div><div class="line">The<span class="built_in"> user </span>NoSuchUser does <span class="keyword">not</span> exist on this system.</div><div class="line"><span class="keyword">And</span>, NoSuchUser does <span class="keyword">not</span> have a directory.</div></pre></td></tr></table></figure>
<blockquote>
<p>需要注意的是，在<code>elif</code>语句中，紧跟其后的<code>else</code>语句属于<code>elif</code>代码块。它们并不属于之前的<code>if-then</code>代码块</p>
</blockquote>
<p>可以继续将多个<code>elif</code>语句串起来，形成一个大的<code>if-then-elif</code>嵌套组合。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> command1</div><div class="line"><span class="keyword">then</span></div><div class="line">    <span class="built_in">command</span> <span class="built_in">set</span> 1</div><div class="line"><span class="keyword">elif</span> command2</div><div class="line"><span class="keyword">then</span></div><div class="line">    <span class="built_in">command</span> <span class="built_in">set</span> 2</div><div class="line"><span class="keyword">elif</span> command3</div><div class="line"><span class="keyword">then</span></div><div class="line">    <span class="built_in">command</span> <span class="built_in">set</span> 3</div><div class="line"><span class="keyword">elif</span> command4</div><div class="line"><span class="keyword">then</span></div><div class="line">    <span class="built_in">command</span> <span class="built_in">set</span> 4</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<blockquote>
<p>每块命令都会根据命令是否会返回退出状态码0来执行。记住，<code>bash shell</code>会依次执行<code>if</code>语句，只有第一个返回退出状态码0的语句中的<code>then</code>部分会被执行。</p>
</blockquote>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180204/7bEcJiH4l2.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://ytlogos.github.io/categories/Linux/"/>
    
    
      <category term="Shell" scheme="https://ytlogos.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>R编程题目练习1</title>
    <link href="https://ytlogos.github.io/2018/04/24/R%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A01/"/>
    <id>https://ytlogos.github.io/2018/04/24/R编程题目练习1/</id>
    <published>2018-04-24T13:19:05.000Z</published>
    <updated>2018-05-20T03:55:43.823Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180520/8DLlfLA4dc.png?imageslim" alt="mark"></p>
<a id="more"></a>
<h2 id="Multiples-of-3-and-5"><a href="#Multiples-of-3-and-5" class="headerlink" title="Multiples of 3 and 5"></a>Multiples of 3 and 5</h2><p>Problem 1 </p>
<p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</p>
<p>Find the sum of all the multiples of 3 or 5 below 1000.</p>
<p><strong>answer</strong>：</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="title">n</span> &lt;- c()</div><div class="line"><span class="title">n</span>[<span class="number">1</span>] &lt;- <span class="number">0</span></div><div class="line"><span class="title">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:<span class="number">999</span>)&#123;</div><div class="line">  <span class="keyword">if</span> (i%%<span class="number">3</span>==<span class="number">0</span>)&#123;</div><div class="line">    n &lt;- n+i</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(i%%<span class="number">3</span>!=<span class="number">0</span>&amp;i%%<span class="number">5</span>==<span class="number">0</span>)&#123;</div><div class="line">    n &lt;- n+i</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="title">cat</span>(<span class="string">"The answer is:"</span>, n)</div></pre></td></tr></table></figure>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The answer <span class="keyword">is</span>: <span class="number">233168</span></div></pre></td></tr></table></figure>
<h2 id="Even-Fibonacci-numbers"><a href="#Even-Fibonacci-numbers" class="headerlink" title="Even Fibonacci numbers"></a>Even Fibonacci numbers</h2><p>Problem 2<br>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:</p>
<p>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …</p>
<p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.、</p>
<p><strong>answer</strong>:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">f &lt;- c()</div><div class="line">f[<span class="number">1</span>] &lt;- <span class="number">1</span></div><div class="line">f[<span class="number">2</span>] &lt;- <span class="number">2</span></div><div class="line">i &lt;- <span class="number">3</span></div><div class="line">repeat&#123;</div><div class="line">  f[i] &lt;- f[i<span class="number">-2</span>]+f[i<span class="number">-1</span>]</div><div class="line">  if(f[i]&gt;<span class="number">4000000</span>)break</div><div class="line">  i &lt;- i+<span class="number">1</span></div><div class="line">&#125;</div><div class="line">f &lt;- f[-length(f)]</div><div class="line">f_even_index &lt;- f%%<span class="number">2</span>==<span class="number">0</span></div><div class="line">f_even_sum &lt;- sum(f[f_even_index])</div><div class="line">cat(<span class="string">"The answer is:"</span>, f_even_sum,<span class="string">"<span class="subst">\n</span>"</span>)</div></pre></td></tr></table></figure>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The answer <span class="keyword">is</span>: <span class="number">4613732</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180520/8DLlfLA4dc.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="R编程" scheme="https://ytlogos.github.io/categories/R%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程能力" scheme="https://ytlogos.github.io/tags/%E7%BC%96%E7%A8%8B%E8%83%BD%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>群体遗传进化</title>
    <link href="https://ytlogos.github.io/2018/04/24/%E7%BE%A4%E4%BD%93%E9%81%97%E4%BC%A0%E8%BF%9B%E5%8C%96/"/>
    <id>https://ytlogos.github.io/2018/04/24/群体遗传进化/</id>
    <published>2018-04-24T13:19:05.000Z</published>
    <updated>2018-05-05T07:40:12.795Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180505/3dDKl9a3DD.png?imageslim" alt="mark"></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>群体结构又称为群体分层，指所研究的群体中存在基因频率不同的亚群。其基本原理是将群体分成k个服从哈迪温伯格平衡的亚群，将每个材料归到各个亚群并计算每个材料基因组变异源于第k个亚群的可能性，主要是利用Q矩阵进行衡量，一般来说Q值越大，表明每个材料来自于某个亚群的可能性越大。群体结构分析的软件有很多，比如：<code>STRUCTURE</code>、<code>ADMIXTURE</code>、<code>FASTSTRUCTURE</code>、<code>TESS</code>、<code>BAPS</code>等。这里不介绍如何使用这些软件进行群体结构分析，下次有时间再进行介绍。本文主要介绍利用R包<code>pophelper</code>对这些软件生成的数据进行展示。具体情况可以参考<code>pophelper</code>的<a href="http://royfrancis.github.io/pophelper/" target="_blank" rel="external"><strong>vignette</strong></a></p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装过程不多说</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">install.packages(c(<span class="string">"Cairo"</span>,<span class="string">"devtools"</span>,<span class="string">"ggplot2"</span>,<span class="string">"gridExtra"</span>,<span class="string">"gtable"</span>,<span class="string">"tidyr"</span>),dependencies=T)</div><div class="line">devtools::install_github(<span class="string">'royfrancis/pophelper'</span>)</div></pre></td></tr></table></figure>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180505/Gg71K3jgfa.png?imageslim" alt="workflow"></p>
<h3 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h3><p>使用<code>pophelper</code>提供的数据,这里只使用structure软件生成的格式文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">library(pophelper)</div><div class="line">sfiles &lt;- list.files(path=system.file(&quot;files/structure&quot;,package = &quot;pophelper&quot;), full.names = T)</div><div class="line">sfiles</div></pre></td></tr></table></figure>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">##  [<span class="number">1</span>] <span class="string">"D:/R-3.5.0/library/pophelper/files/structure/structure_01"</span></div><div class="line">##  [<span class="number">2</span>] <span class="string">"D:/R-3.5.0/library/pophelper/files/structure/structure_02"</span></div><div class="line">##  [<span class="number">3</span>] <span class="string">"D:/R-3.5.0/library/pophelper/files/structure/structure_03"</span></div><div class="line">##  [<span class="number">4</span>] <span class="string">"D:/R-3.5.0/library/pophelper/files/structure/structure_04"</span></div><div class="line">##  [<span class="number">5</span>] <span class="string">"D:/R-3.5.0/library/pophelper/files/structure/structure_05"</span></div><div class="line">##  [<span class="number">6</span>] <span class="string">"D:/R-3.5.0/library/pophelper/files/structure/structure_06"</span></div><div class="line">##  [<span class="number">7</span>] <span class="string">"D:/R-3.5.0/library/pophelper/files/structure/structure_07"</span></div><div class="line">##  [<span class="number">8</span>] <span class="string">"D:/R-3.5.0/library/pophelper/files/structure/structure_08"</span></div><div class="line">##  [<span class="number">9</span>] <span class="string">"D:/R-3.5.0/library/pophelper/files/structure/structure_09"</span></div><div class="line">## [<span class="number">10</span>] <span class="string">"D:/R-3.5.0/library/pophelper/files/structure/structure_10"</span></div><div class="line">## [<span class="number">11</span>] <span class="string">"D:/R-3.5.0/library/pophelper/files/structure/structure_11"</span></div><div class="line">## [<span class="number">12</span>] <span class="string">"D:/R-3.5.0/library/pophelper/files/structure/structure_12"</span></div><div class="line">## [<span class="number">13</span>] <span class="string">"D:/R-3.5.0/library/pophelper/files/structure/structure_13"</span></div><div class="line">## [<span class="number">14</span>] <span class="string">"D:/R-3.5.0/library/pophelper/files/structure/structure_14"</span></div><div class="line">## [<span class="number">15</span>] <span class="string">"D:/R-3.5.0/library/pophelper/files/structure/structure_15"</span></div><div class="line">## [<span class="number">16</span>] <span class="string">"D:/R-3.5.0/library/pophelper/files/structure/structure_16"</span></div><div class="line">## [<span class="number">17</span>] <span class="string">"D:/R-3.5.0/library/pophelper/files/structure/structure_17"</span></div></pre></td></tr></table></figure>
<p>可以看到总共有17个structure文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">slist &lt;- readQ(files = sfiles,indlabfromfile = T, filetype = &quot;structure&quot;)</div><div class="line">tr1 &lt;- tabulateQ(qlist = slist)</div><div class="line">summariseQ(tr1, writetable = TRUE)</div></pre></td></tr></table></figure>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">##   loci ind k runs  elpdmean     elpdsd elpdmin elpdmax</div><div class="line">## <span class="number">1</span>   <span class="number">25</span> <span class="number">149</span> <span class="number">2</span>    <span class="number">3</span> <span class="number">-7509.367</span>  <span class="number">0.8082904</span> <span class="number">-7510.1</span> <span class="number">-7508.5</span></div><div class="line">## <span class="number">2</span>   <span class="number">25</span> <span class="number">149</span> <span class="number">3</span>    <span class="number">3</span> <span class="number">-7476.000</span>  <span class="number">0.4358899</span> <span class="number">-7476.5</span> <span class="number">-7475.7</span></div><div class="line">## <span class="number">3</span>   <span class="number">25</span> <span class="number">149</span> <span class="number">4</span>    <span class="number">3</span> <span class="number">-7650.800</span> <span class="number">46.1418465</span> <span class="number">-7687.5</span> <span class="number">-7599.0</span></div><div class="line">## <span class="number">4</span>   <span class="number">25</span> <span class="number">149</span> <span class="number">5</span>    <span class="number">3</span> <span class="number">-7743.567</span> <span class="number">74.0671542</span> <span class="number">-7828.5</span> <span class="number">-7692.4</span></div><div class="line">## <span class="number">5</span>   <span class="number">25</span> <span class="number">149</span> <span class="number">6</span>    <span class="number">3</span> <span class="number">-7985.833</span> <span class="number">32.6353081</span> <span class="number">-8023.3</span> <span class="number">-7963.6</span></div><div class="line">## <span class="number">6</span>   <span class="number">25</span> <span class="number">149</span> <span class="number">7</span>    <span class="number">2</span> <span class="number">-8614.000</span> <span class="number">60.5283405</span> <span class="number">-8656.8</span> <span class="number">-8571.2</span></div></pre></td></tr></table></figure>
<p><code>summariseQ</code>会给出一些信息，<code>writetable = TRUE</code>将文件写入到工作文件夹中</p>
<h3 id="估计最佳分层数"><a href="#估计最佳分层数" class="headerlink" title="估计最佳分层数"></a>估计最佳分层数</h3><p>函数<code>evannoMethodStructure</code>用来估计最佳分层数k,使用的方法是<strong>Evanno method</strong>，这一函数只适应于STRUCTURE软件运行的结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sr1 &lt;- summariseQ(tr1)</div><div class="line">p &lt;- evannoMethodStructure(data = sr1, exportplot = F, returnplot = T, returndata = F, basesize = 12, linesize = 0.7)</div><div class="line">gridExtra::grid.arrange(p)</div></pre></td></tr></table></figure>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180505/mjEIL6a5Kj.png?imageslim" alt="mark"></p>
<p>一般我们是通过看ΔK来确定最佳分群，这里可以看到是k=3</p>
<p><strong>pophelper</strong>提供了一个封装函数，可以一次性出来所有结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">analyseQ(sfiles)</div></pre></td></tr></table></figure></p>
<p>可以挑出k=3时的structure图</p>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180505/3dDKl9a3DD.png?imageslim" alt="mark"></p>
<h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><p><strong>pophelper</strong>还提供了一个绘图函数<code>plotQ</code>,里面内置了大量图形参数设置用来美化图片，这里就不一一展示了，有兴趣的可以去实践一下</p>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180505/KecCc9fciG.png?imageslim" alt="mark"></p>
<h2 id="SessionInfo"><a href="#SessionInfo" class="headerlink" title="SessionInfo"></a>SessionInfo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sessionInfo()</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># R version 3.5.0 (2018-04-23)</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Platform: x86_64-w64-mingw32/x64 (64-bit)</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Running under: Windows 10 x64 (build 16299)</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Matrix products: default</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># locale:</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [1] LC_COLLATE=Chinese (Simplified)_China.936 </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [2] LC_CTYPE=Chinese (Simplified)_China.936   </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [3] LC_MONETARY=Chinese (Simplified)_China.936</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [4] LC_NUMERIC=C                              </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [5] LC_TIME=Chinese (Simplified)_China.936    </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># attached base packages:</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [1] stats     graphics  grDevices utils     datasets  methods   base     </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># other attached packages:</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [1] pophelper_2.2.5.1 ggplot2_2.2.1     Cairo_1.5-9      </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># loaded via a namespace (and not attached):</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [1] Rcpp_0.12.16     knitr_1.20       magrittr_1.5     tidyselect_0.2.4</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [5] munsell_0.4.3    colorspace_1.3-2 rlang_0.2.0      stringr_1.3.0   </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [9] plyr_1.8.4       tools_3.5.0      grid_3.5.0       gtable_0.2.0    </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [13] htmltools_0.3.6  yaml_2.1.19      lazyeval_0.2.1   rprojroot_1.3-2 </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [17] digest_0.6.15    tibble_1.4.2     gridExtra_2.3    purrr_0.2.4     </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [21] tidyr_0.8.0      glue_1.2.0       evaluate_0.10.1  rmarkdown_1.9   </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [25] labeling_0.3     stringi_1.1.7    compiler_3.5.0   pillar_1.2.2    </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [29] scales_0.5.0     backports_1.1.2</span></span></div></pre></td></tr></table></figure>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180505/3dDKl9a3DD.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;群体结构又称为群体分层，指所研究的群体中存在基因频率不同的亚群。其基本原理是将群体分成k个服从哈迪温伯格平衡的亚群，将每个材料归到各个亚群并计算每个材料基因组变异源于第k个亚群的可能性，主要是利用Q矩阵进行衡量，一般来说Q值越大，表明每个材料来自于某个亚群的可能性越大。群体结构分析的软件有很多，比如：&lt;code&gt;STRUCTURE&lt;/code&gt;、&lt;code&gt;ADMIXTURE&lt;/code&gt;、&lt;code&gt;FASTSTRUCTURE&lt;/code&gt;、&lt;code&gt;TESS&lt;/code&gt;、&lt;code&gt;BAPS&lt;/code&gt;等。这里不介绍如何使用这些软件进行群体结构分析，下次有时间再进行介绍。本文主要介绍利用R包&lt;code&gt;pophelper&lt;/code&gt;对这些软件生成的数据进行展示。具体情况可以参考&lt;code&gt;pophelper&lt;/code&gt;的&lt;a href=&quot;http://royfrancis.github.io/pophelper/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;vignette&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="群体遗传进化" scheme="https://ytlogos.github.io/categories/%E7%BE%A4%E4%BD%93%E9%81%97%E4%BC%A0%E8%BF%9B%E5%8C%96/"/>
    
    
      <category term="进化，选择性清除分析" scheme="https://ytlogos.github.io/tags/%E8%BF%9B%E5%8C%96%EF%BC%8C%E9%80%89%E6%8B%A9%E6%80%A7%E6%B8%85%E9%99%A4%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>利用ComplexHeatmap绘制热图(一)</title>
    <link href="https://ytlogos.github.io/2018/04/08/%E5%88%A9%E7%94%A8ComplexHeatmap%E7%BB%98%E5%88%B6%E7%83%AD%E5%9B%BE(%E4%B8%80)/"/>
    <id>https://ytlogos.github.io/2018/04/08/利用ComplexHeatmap绘制热图(一)/</id>
    <published>2018-04-08T13:19:05.000Z</published>
    <updated>2018-04-15T07:27:51.313Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/6hE9lcGmjf.png?imageslim" alt="mark"></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>Complexheatmap</strong>是由<a href="https://github.com/jokergoo" target="_blank" rel="external">顾祖光</a>博士创建的绘制热图的R包，在他的<a href="https://github.com/jokergoo/ComplexHeatmap" target="_blank" rel="external"><strong>GitHub</strong></a>有十分详细的<code>小品文(Vignettes)</code>说明。<strong>Complexheatmap</strong>是基于绘图系统<strong>grid</strong>，因此如果有相应<strong>grid</strong>的知识，学习起来应该更顺手！</p>
<a id="more"></a>
<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p><strong>Complexheatmap</strong>提供了一套非常灵活的方法用于多热图也就是热图列表布局以及支持自定义注释绘图，一个热图列表包含若干热图以及注释信息</p>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/FBA7hkj7a4.png?imageslim" alt=""></p>
<h2 id="绘制单个热图"><a href="#绘制单个热图" class="headerlink" title="绘制单个热图"></a>绘制单个热图</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>包的安装就不细说了，有不懂的可以翻我以前的博客，里面有详细的教程，下面直接给出安装代码不解释</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># installed <span class="keyword">from</span> bioconductor</div><div class="line">source(<span class="string">"http://bioconductor.org/biocLite.R"</span>)</div><div class="line">options(BioC_mirror=<span class="string">"http://mirrors.ustc.edu.cn/bioc/"</span>)</div><div class="line">biocLite(<span class="string">"ComplexHeatmap"</span>)</div><div class="line"># installed <span class="keyword">from</span> GitHub</div><div class="line"><span class="keyword">if</span>(!require(devtools))&#123;install.packages(<span class="string">"devtools"</span>)&#125;</div><div class="line">devtools::install_github(<span class="string">"jokergoo/ComplexHeatmap"</span>)</div></pre></td></tr></table></figure>
<h3 id="创建数据集"><a href="#创建数据集" class="headerlink" title="创建数据集"></a>创建数据集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">pacman::p_load(ComplexHeatmap, circlize)</div><div class="line">set.seed(7)</div><div class="line">mat &lt;- cbind(rbind(matrix(rnorm(16, -1),4), matrix(rnorm(32, 1), 8)), rbind(matrix(rnorm(24, 1), 4), matrix(rnorm(48, -1), 8)))</div><div class="line">mat &lt;- mat[sample(nrow(mat), nrow(mat)), sample(ncol(mat), ncol(mat))]</div><div class="line">rownames(mat) &lt;- paste0(&quot;R&quot;, 1:12)</div><div class="line">colnames(mat) &lt;- paste0(&quot;C&quot;, 1:10)</div></pre></td></tr></table></figure>
<h3 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h3><p><strong>ComplexHeatmap</strong>绘制热图十分简单,使用默认参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Heatmap(mat)</div></pre></td></tr></table></figure></p>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/KlK9dIHkk0.png?imageslim" alt="mark"></p>
<h2 id="定制化"><a href="#定制化" class="headerlink" title="定制化"></a>定制化</h2><p><strong>ComplexHeatmap</strong>十分灵活，可以自定义多种参数绘制热图</p>
<h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>大多数情况下，绘制热图的矩阵都是连续性变量，通过提供颜色映射函数，我们可以自定义颜色，这主要是通过<strong>circlize</strong>包中的<code>colorRamp2()</code>函数来实现的,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mat2 &lt;- mat</div><div class="line">mat2[1,1] &lt;- 100000</div><div class="line">Heatmap(mat2, col = colorRamp2(c(-3,0,3), c(&quot;green&quot;,&quot;white&quot;,&quot;red&quot;)), cluster_rows = FALSE, cluster_columns = FALSE)</div></pre></td></tr></table></figure>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/iGBchD1c3J.png?imageslim" alt="mark"></p>
<p>可以看出，<strong>ComplexHeatmap</strong>对于异常值也能显示出来，不会剔除掉</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Heatmap(mat, col = rev(rainbow(10)))</div></pre></td></tr></table></figure>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/eHkcmJld54.png?imageslim" alt="mark"></p>
<p>如果是离散型变量或者数值型、字符型变量的话，这时就需要特别指定颜色了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#离散型变量/数值型变量</div><div class="line">discrete_mat &lt;- matrix(sample(1:4, 100, replace = TRUE), 10, 10)</div><div class="line">colors &lt;- structure(circlize::rand_color(4), names=c(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;))</div><div class="line">Heatmap(discrete_mat, col = colors)</div></pre></td></tr></table></figure>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/C4IIB3Kebi.png?imageslim" alt="mark"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#字符型变量</div><div class="line">character_mat &lt;- matrix(sample(letters[1:4], 100, replace = TRUE), 10, 10)</div><div class="line">colors &lt;- structure(circlize::rand_color(4), names=letters[1:4])</div><div class="line">Heatmap(character_mat, col = colors)</div></pre></td></tr></table></figure>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/DALJBe1FKb.png?imageslim" alt="mark"></p>
<p>可以看出，对于离散型变量/数值型变量，默认对行/列进行聚类，而对于字符型变量，则不进行聚类</p>
<p><strong>ComplexHeatmap</strong>允许数据中含有<code>NA</code>,只需要通过参数<code>na_col</code>来控制<code>NA</code>的颜色</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mat_with_NA &lt;- mat</div><div class="line">mat_with_NA[sample(c(TRUE, FALSE), nrow(mat)*ncol(mat), replace = TRUE, prob = c(1,9))] &lt;- NA</div><div class="line">Heatmap(mat_with_NA, na_col = &quot;orange&quot;, clustering_distance_rows = &quot;pearson&quot;)</div></pre></td></tr></table></figure>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/3d9FbLfE8b.png?imageslim" alt="mark"></p>
<p><strong>ComplexHeatmap</strong>默认使用<a href="https://en.wikipedia.org/wiki/Lab_color_space" target="_blank" rel="external">LAB颜色空间(LAB color space)</a>，<code>colorRamp2()</code>提供了选择颜色空间的参数选项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">f1 &lt;- colorRamp2(seq(min(mat), max(mat), length=3), c(&quot;blue&quot;,&quot;#EEEEEE&quot;, &quot;red&quot;))</div><div class="line">f2 &lt;- colorRamp2(seq(min(mat), max(mat), length=3), c(&quot;blue&quot;,&quot;#EEEEEE&quot;, &quot;red&quot;), space = &quot;RGB&quot;)</div><div class="line">H1 &lt;- Heatmap(mat, col = f1, column_title = &quot;LAB color space&quot;)</div><div class="line">H2 &lt;- Heatmap(mat, col = f2, column_title = &quot;RGB color space&quot;)</div><div class="line">H1+H2</div></pre></td></tr></table></figure>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/6hE9lcGmjf.png?imageslim" alt="mark"></p>
<p><strong>ComplexHeatmap</strong>提供了多种颜色空间选项，可以根据自身数据不断调整，选取合适的颜色空间</p>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>一个热图的标题有：图标题、图例标题、行列标题等<br><code>Heatmap</code>里提供的<code>name</code>参数默认的是图例的标题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Heatmap(mat, name = &quot;legend&quot;)</div></pre></td></tr></table></figure></p>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/43dh8Jc9h3.png?imageslim" alt="mark"></p>
<p>图里标题可以通过<code>heatmap_legend_param()</code>进行修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Heatmap(mat, heatmap_legend_param = list(title=&quot;legend&quot;))</div></pre></td></tr></table></figure></p>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/fa86cCBd61.png?imageslim" alt="mark"></p>
<p>行列标题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Heatmap(mat, name = &quot;legend&quot;, column_title = &quot;Column&quot;, row_title = &quot;Row&quot;)</div></pre></td></tr></table></figure>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/i220513hIG.png?imageslim" alt="mark"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Heatmap(mat, name = &quot;legend&quot;, column_title = &quot;Column&quot;, column_title_side = &quot;bottom&quot;)</div></pre></td></tr></table></figure>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/ECkjcEedbA.png?imageslim" alt="mark"></p>
<p>如果需要修改图例参数，可以通过<code>gpar()</code>参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Heatmap(mat, name = &quot;legend&quot;,column_title = &quot;Column&quot;, row_title = &quot;Row&quot;, column_title_gp = gpar(fontsize=20, fontface=&quot;bold&quot;), row_title_gp = gpar(fontsize=20, fontface=&quot;bold&quot;))</div></pre></td></tr></table></figure>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/bi079kAgg7.png?imageslim" alt="mark"></p>
<p>标题可以旋转(水平或竖直)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Heatmap(mat, name = &quot;legend&quot;, row_title = &quot;Row&quot;, row_title_rot = 0)</div></pre></td></tr></table></figure>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/i9dA7DDbLJ.png?imageslim" alt="mark"></p>
<h2 id="SessionInfo"><a href="#SessionInfo" class="headerlink" title="SessionInfo"></a>SessionInfo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sessionInfo()</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># R version 3.4.4 (2018-03-15)</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Platform: x86_64-w64-mingw32/x64 (64-bit)</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Running under: Windows 10 x64 (build 16299)</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Matrix products: default</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># locale:</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [1] LC_COLLATE=Chinese (Simplified)_China.936 </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [2] LC_CTYPE=Chinese (Simplified)_China.936   </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [3] LC_MONETARY=Chinese (Simplified)_China.936</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [4] LC_NUMERIC=C                              </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [5] LC_TIME=Chinese (Simplified)_China.936    </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># attached base packages:</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [1] grid      stats     graphics  grDevices utils     datasets  methods  </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [8] base     </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># other attached packages:</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [1] circlize_0.4.3        ComplexHeatmap_1.17.1</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># loaded via a namespace (and not attached):</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [1] Rcpp_0.12.16         digest_0.6.15        rprojroot_1.3-2     </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [4] backports_1.1.2      pacman_0.4.6         magrittr_1.5        </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [7] evaluate_0.10.1      GlobalOptions_0.0.13 stringi_1.1.7       </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [10] GetoptLong_0.1.6     rmarkdown_1.9        RColorBrewer_1.1-2  </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [13] rjson_0.2.15         tools_3.4.4          stringr_1.3.0       </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [16] yaml_2.1.18          compiler_3.4.4       colorspace_1.3-2    </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [19] shape_1.4.4          htmltools_0.3.6      knitr_1.20</span></span></div></pre></td></tr></table></figure>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180415/6hE9lcGmjf.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Complexheatmap&lt;/strong&gt;是由&lt;a href=&quot;https://github.com/jokergoo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;顾祖光&lt;/a&gt;博士创建的绘制热图的R包，在他的&lt;a href=&quot;https://github.com/jokergoo/ComplexHeatmap&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;有十分详细的&lt;code&gt;小品文(Vignettes)&lt;/code&gt;说明。&lt;strong&gt;Complexheatmap&lt;/strong&gt;是基于绘图系统&lt;strong&gt;grid&lt;/strong&gt;，因此如果有相应&lt;strong&gt;grid&lt;/strong&gt;的知识，学习起来应该更顺手！&lt;/p&gt;
    
    </summary>
    
      <category term="可视化" scheme="https://ytlogos.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="Complexheatmap" scheme="https://ytlogos.github.io/tags/Complexheatmap/"/>
    
  </entry>
  
  <entry>
    <title>全基因组加倍及串联重复基因</title>
    <link href="https://ytlogos.github.io/2018/04/05/%E5%85%A8%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%8A%A0%E5%80%8D%E5%8F%8A%E4%B8%B2%E8%81%94%E9%87%8D%E5%A4%8D%E5%9F%BA%E5%9B%A0/"/>
    <id>https://ytlogos.github.io/2018/04/05/全基因组加倍及串联重复基因/</id>
    <published>2018-04-05T13:19:05.000Z</published>
    <updated>2018-04-14T08:39:32.809Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180414/ADC8bKhGm4.png?imageslim" alt="mark"></p>
<blockquote>
<p>串联重复基因是植物基因组中一类具有功能的串联重复序列，在植物基因组进化和环境适应的过程中起着十分重要的作用。串联重复基因主要是由串联重复事件产生的。在植物基因组中，串联重复事件的发生频率比较高，为植物基因组带来了基因拷贝数的增加以及等位基因变异。串联重复事件伴随着拟南芥和芸薹属物种的整个进化过程，而且芸薹属物种的多倍化事件并没有影响串联重复事件的发生。</p>
</blockquote>
<a id="more"></a>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180405/2h8a9544k1.png?imageslim" alt="mark"></p>
<ul>
<li>基因共线性分析</li>
</ul>
<p>拟南芥在进化过程中先后经历了三次基因组加倍事件(α、β和γ多倍化事件)。通过对拟南芥基因组的三次基因组加倍事件产生的共线性基因对分析，获得了α、β和γ多倍化事件后分别产生的3530，1421和505共线性基因对。在拟南芥细胞色素P450基因家族的进化分析发现，仅有CYP94基因家族中一对基因在γ基因组加倍化事件后产生的共线性基因对中被保留下来。这可能意味着CYP94基因家族的这两个成员在双子叶植物的祖先在经历γ基因组多倍化事件之前就存在。对于β基因组多倍化事件，CYP86、CYP72和CYP81基因家族中各有一对基因对被检测到保留下来，这意味着这些P450基因在β基因组多倍化事件之前就存在并在β基因组多倍化事件之后被保留下来。对于α基因组加倍事件产生的共线性基因对，共获得了11个P450基因对在α基因组加倍化事件后被保留下来，意味着这22个P450基因在α基因组多倍化事件之前就已存在并在α基因组加倍事件后保留下来。</p>
<blockquote>
<p>在拟南芥和芸薹属的祖先物种分化之后，芸薹属祖先物种经历了自身的三倍化事件，然后进一步产生了现在的白菜和甘蓝，通过与拟南芥基因组中24个十字花科保守区段的共线性关系构建了白菜和甘蓝基因组中的三倍化区段。根据三倍化区段上基因密度的差异，两个芸薹属物种中的三倍化区段划分为三个亚基因组：MF1(中度丢失)、NF2(高度丢失)和LF(低度丢失)。</p>
</blockquote>
<ul>
<li><p>通过古基因组学研究可追溯源到由7931条原基因模型和7条染色体构成的双子叶植物祖先基因组，以及由9138条原基因模型和5条染色体构成的单子叶植物祖先基因组。显花植物研究表明，被子植物基因组经历二倍化(α)、四倍化(β)和六倍化(γ)3次古全基因组复制(WGD)事件。</p>
</li>
<li><p>同源多倍体来源于种内WGD事件，异源多倍体来源于种间杂交。芸薹属(<em>Brassica</em>)植物经历了3次基因组WGD事件(α、β和γ)和种系全基因组三倍化事件，是基因组多倍化研究的重要模式物种。</p>
</li>
</ul>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180414/ADC8bKhGm4.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;串联重复基因是植物基因组中一类具有功能的串联重复序列，在植物基因组进化和环境适应的过程中起着十分重要的作用。串联重复基因主要是由串联重复事件产生的。在植物基因组中，串联重复事件的发生频率比较高，为植物基因组带来了基因拷贝数的增加以及等位基因变异。串联重复事件伴随着拟南芥和芸薹属物种的整个进化过程，而且芸薹属物种的多倍化事件并没有影响串联重复事件的发生。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="bioinformatics" scheme="https://ytlogos.github.io/categories/bioinformatics/"/>
    
    
      <category term="重复基因" scheme="https://ytlogos.github.io/tags/%E9%87%8D%E5%A4%8D%E5%9F%BA%E5%9B%A0/"/>
    
      <category term="古基因组学" scheme="https://ytlogos.github.io/tags/%E5%8F%A4%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>跨物种单拷贝直系同源基因</title>
    <link href="https://ytlogos.github.io/2018/04/02/%E8%B7%A8%E7%89%A9%E7%A7%8D%E5%8D%95%E6%8B%B7%E8%B4%9D%E7%9B%B4%E7%B3%BB%E5%90%8C%E6%BA%90%E5%9F%BA%E5%9B%A0/"/>
    <id>https://ytlogos.github.io/2018/04/02/跨物种单拷贝直系同源基因/</id>
    <published>2018-04-02T13:19:05.000Z</published>
    <updated>2018-04-14T07:53:34.867Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180414/KAl4De8m8L.png?imageslim" alt="mark"></p>
<h2 id="同源-Homology"><a href="#同源-Homology" class="headerlink" title="同源(Homology)"></a>同源(Homology)</h2><p><strong>同源(Homology)</strong> 的概念是这样定义的：</p>
<blockquote>
<p>Homology:the existence of shared abcestry between a pair of strctures,or genes, in different species</p>
</blockquote>
<p>如果两个或多个结构具有相同的祖先，也就是它们由一个共同祖先演化而来，则称它们<strong>同源(Homology)</strong></p>
<p>在生物信息学中，同源主要指的是序列上的同源，即用来说明两个或多个蛋白质氨基酸序列或者DNA序列具有共同的祖先。同源的序列一般具有相似的功能，序列中同源的部分也称为<strong>保守的(conserved)</strong></p>
<a id="more"></a>
<p>蛋白质和DNA的同源性常常根据它们序列的<strong>相似性(Sequence similarity)</strong>来判定，相似性一般用检测序列和目标序列之间的<strong>序列一致性(Percent identity)</strong>来表示</p>
<p><strong>相似性(Sequence similarity)</strong>是指序列比对过程中用来描述检测序列与目标序列之间相同DNA或氨基酸残基所占比例。一般来说，相似程度高于50%则认为序列之间是同源序列</p>
<h2 id="直系同源-orthology-与旁系同源-paralogy"><a href="#直系同源-orthology-与旁系同源-paralogy" class="headerlink" title="直系同源(orthology)与旁系同源(paralogy)"></a><strong>直系同源(orthology)</strong>与<strong>旁系同源(paralogy)</strong></h2><p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180321/LIbg3Cm50d.png?imageslim" alt="mark"></p>
<p>同源现象可分为<strong>直系同源(orthology)</strong>与<strong>旁系同源(paralogy)</strong></p>
<blockquote>
<p>Orthologys(orthology genes) are genes in dofferent pecies that originated by vertical descent from a single gene of the last common ancestor</p>
</blockquote>
<p><strong>直系同源(orthology)</strong>是指不同物种中的某一基因来自同一祖先，在演化过程中因物种形成(speciation)而被区分开来</p>
<blockquote>
<p>Paralogys(paralogous genes) are created by a duplication event within the genome. For gene duplicationevents, if a gene in an organism is duplicated to occupy two different positions in the same genome, then the two copies are paralogous</p>
</blockquote>
<p>旁系同源(paralogy)是指种系间的基因复制</p>
<h2 id="趋同演化-Convergent-evolution-和趋异进化-Divergent-evolution"><a href="#趋同演化-Convergent-evolution-和趋异进化-Divergent-evolution" class="headerlink" title="趋同演化(Convergent evolution)和趋异进化(Divergent evolution)"></a><strong>趋同演化(Convergent evolution)</strong>和<strong>趋异进化(Divergent evolution)</strong></h2><p>相似不一定同源，但是一般来说同源的必定是相似的</p>
<blockquote>
<p>趋同演化(Convergent evolution)：Convergent evolution creats analogous structure that have similar form or function, but that are not present in that last common ancestor of those groups</p>
<p>趋异演化(Divergent evolution): the accumulation of differences between groups which can lead to the formation of new species, usually a result of diffusion of the same species to different and isolated environments which blocks the gene flow among the distinct populations allowing differential fixation of characteristics through genetic drift and natural selection</p>
</blockquote>
<p>趋异演化(Divergent evolution):同一物种不同群体之间累积性差异导致新物种的形成，通常是同一物种扩散后，在不同隔离的环境下通过基因漂流和自然选择，基因分化固定后的结果，也就是说，两个或多个生物学特征具有共同演化起源，源自同一物种，但在演化过程中因环境等自然选择压力的原因，逐渐分化的现象</p>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180414/KAl4De8m8L.png?imageslim" alt="mark"></p>
<h2 id="蛋白家族-protein-family-和蛋白质超家族-protein-superfamilies"><a href="#蛋白家族-protein-family-和蛋白质超家族-protein-superfamilies" class="headerlink" title="蛋白家族(protein family)和蛋白质超家族(protein superfamilies)"></a><strong>蛋白家族(protein family)</strong>和<strong>蛋白质超家族(protein superfamilies)</strong></h2><p><strong>蛋白家族(protein family)</strong>家族有时我们也称为基因家族(gene family)，我们一般检索基因家族的时候都是根据数据库比如<code>Pfam</code>来搜索，大多是根据蛋白质氨基酸序列来搜索保守结构域。不同的<strong>蛋白质家族(protein family)</strong>又可被归于一个蛋白质超家族</p>
<blockquote>
<p>Protein family is a group of evolutionarily-related proteins. In many cases a protein family has a corresponding gene family, in which each gene encodes a corresponding protein with a 1:1 realtionship. Proteins in a family descend from a common ancestor and typicallly have similar three-dimensional, functions, and significant sequence similarity</p>
<p>Families are sometimes grouped together into a larger clades called superfamilies based on structured and mechanistic similarity, even if there is no identifiable sequence homology</p>
</blockquote>
<p><strong>蛋白质超家族(protein superfamilies)</strong>：一些蛋白质家族被归入更大的进化分支，基于结构机制的相似性，尽管其没有可确定的显著的序列同源性。简单而言就是蛋白质家族包含了更多进化分支的蛋白，虽然没有同源性，但是因为其结构域或功能基本相似，也被归为一个大类。蛋白质家族的同源关系是可以确定，同源关系上更加严格些</p>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180414/5d22B3e1bj.png?imageslim" alt="mark"></p>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180414/KAl4De8m8L.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;同源-Homology&quot;&gt;&lt;a href=&quot;#同源-Homology&quot; class=&quot;headerlink&quot; title=&quot;同源(Homology)&quot;&gt;&lt;/a&gt;同源(Homology)&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;同源(Homology)&lt;/strong&gt; 的概念是这样定义的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Homology:the existence of shared abcestry between a pair of strctures,or genes, in different species&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果两个或多个结构具有相同的祖先，也就是它们由一个共同祖先演化而来，则称它们&lt;strong&gt;同源(Homology)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在生物信息学中，同源主要指的是序列上的同源，即用来说明两个或多个蛋白质氨基酸序列或者DNA序列具有共同的祖先。同源的序列一般具有相似的功能，序列中同源的部分也称为&lt;strong&gt;保守的(conserved)&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="bioinformatics" scheme="https://ytlogos.github.io/categories/bioinformatics/"/>
    
    
      <category term="同源基因" scheme="https://ytlogos.github.io/tags/%E5%90%8C%E6%BA%90%E5%9F%BA%E5%9B%A0/"/>
    
  </entry>
  
  <entry>
    <title>植物转录因子WRKY</title>
    <link href="https://ytlogos.github.io/2018/03/30/%E6%A4%8D%E7%89%A9%E8%BD%AC%E5%BD%95%E5%9B%A0%E5%AD%90WRKY/"/>
    <id>https://ytlogos.github.io/2018/03/30/植物转录因子WRKY/</id>
    <published>2018-03-30T13:19:05.000Z</published>
    <updated>2018-04-09T02:01:43.329Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180408/ElmaeG5H85.png?imageslim" alt="WRKYs in plant biotic stress signaling network"></p>
<h2 id="WRKY结构特点"><a href="#WRKY结构特点" class="headerlink" title="WRKY结构特点"></a>WRKY结构特点</h2><ul>
<li><strong>WRKY</strong>转录因子家族具有相同的结构特征，N端都有包含<code>WRKYGQK</code>七肽序列的<code>WRKY</code>结构域，C端则含有C<sub>2</sub>H<sub>2</sub>-或C<sub>2</sub>HC-锌指结构，二者是WRKY特异性与启动子中W-box序列(C/T)TGAC(T/C)结合必不可少的组件。根据这些特点，WRKY可以分为三个亚家族：第Ⅰ亚家族含有两个<code>WRKY</code>结构域和两个C<sub>2</sub>H<sub>2</sub>锌指结构，第Ⅱ亚家族含有一个<code>WRKY</code>结构域和一个C<sub>2</sub>H<sub>2</sub>锌指结构，第Ⅲ亚家族含有一个<code>WRKY</code>结构域和一个C<sub>2</sub>HC锌指结构。第Ⅱ亚家族又被分为Ⅱa,Ⅱb,Ⅱc,Ⅱd和Ⅱe五个小亚族。</li>
</ul>
<a id="more"></a>
<ul>
<li>禾本科作物比如水稻、玉米以及高粱含有更多的第Ⅲ亚族<em>WRKY</em>，而Ⅱc亚家族和Ⅱa+Ⅱb亚家族则广泛地存在于十字花科和豆科中。</li>
</ul>
<h2 id="WRKY在植物逆境胁迫方面作用"><a href="#WRKY在植物逆境胁迫方面作用" class="headerlink" title="WRKY在植物逆境胁迫方面作用"></a><em>WRKY</em>在植物逆境胁迫方面作用</h2><ul>
<li>在非生物胁迫中的作用</li>
</ul>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180408/dc9AE5i2Bb.png?imageslim" alt="WRKYs in plant abiotic stress signaling network"></p>
<ul>
<li>在生物胁迫中的作用</li>
</ul>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180408/ElmaeG5H85.png?imageslim" alt="WRKYs in plant biotic stress signaling network"></p>
<p>第Ⅱ亚家族中的Ⅱc成员据推测可能是干旱胁迫以及盐胁迫的关键转录调控因子，几乎所有的<em>WRKY</em>基因都有参与到生物胁迫中，这说明：</p>
<ul>
<li><em>WRKY</em>的祖先在很早以前就已经进化有了植物免疫的功能</li>
<li><em>WRKY</em>的剂量是影响植物环境适应性的关键因子</li>
</ul>
<h2 id="WRKY在植物生长发育中的作用"><a href="#WRKY在植物生长发育中的作用" class="headerlink" title="WRKY在植物生长发育中的作用"></a><em>WRKY</em>在植物生长发育中的作用</h2><p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180408/Aff7IFllGd.png?imageslim" alt="mark"></p>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>伪码农，R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180408/ElmaeG5H85.png?imageslim&quot; alt=&quot;WRKYs in plant biotic stress signaling network&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;WRKY结构特点&quot;&gt;&lt;a href=&quot;#WRKY结构特点&quot; class=&quot;headerlink&quot; title=&quot;WRKY结构特点&quot;&gt;&lt;/a&gt;WRKY结构特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;WRKY&lt;/strong&gt;转录因子家族具有相同的结构特征，N端都有包含&lt;code&gt;WRKYGQK&lt;/code&gt;七肽序列的&lt;code&gt;WRKY&lt;/code&gt;结构域，C端则含有C&lt;sub&gt;2&lt;/sub&gt;H&lt;sub&gt;2&lt;/sub&gt;-或C&lt;sub&gt;2&lt;/sub&gt;HC-锌指结构，二者是WRKY特异性与启动子中W-box序列(C/T)TGAC(T/C)结合必不可少的组件。根据这些特点，WRKY可以分为三个亚家族：第Ⅰ亚家族含有两个&lt;code&gt;WRKY&lt;/code&gt;结构域和两个C&lt;sub&gt;2&lt;/sub&gt;H&lt;sub&gt;2&lt;/sub&gt;锌指结构，第Ⅱ亚家族含有一个&lt;code&gt;WRKY&lt;/code&gt;结构域和一个C&lt;sub&gt;2&lt;/sub&gt;H&lt;sub&gt;2&lt;/sub&gt;锌指结构，第Ⅲ亚家族含有一个&lt;code&gt;WRKY&lt;/code&gt;结构域和一个C&lt;sub&gt;2&lt;/sub&gt;HC锌指结构。第Ⅱ亚家族又被分为Ⅱa,Ⅱb,Ⅱc,Ⅱd和Ⅱe五个小亚族。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="bioinformatics" scheme="https://ytlogos.github.io/categories/bioinformatics/"/>
    
    
      <category term="转录因子" scheme="https://ytlogos.github.io/tags/%E8%BD%AC%E5%BD%95%E5%9B%A0%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>油菜形成、进化及基因家族概况(三)</title>
    <link href="https://ytlogos.github.io/2018/03/23/%E6%B2%B9%E8%8F%9C%E5%BD%A2%E6%88%90%E5%8F%8A%E8%BF%9B%E5%8C%96(%E4%B8%89)/"/>
    <id>https://ytlogos.github.io/2018/03/23/油菜形成及进化(三)/</id>
    <published>2018-03-23T13:19:05.000Z</published>
    <updated>2018-04-01T08:18:31.305Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180401/78JFehmBF4.png?imageslim" alt="mark"></p>
<h2 id="同源基因"><a href="#同源基因" class="headerlink" title="同源基因"></a>同源基因</h2><p>同源基因包括直系同源基因(Orthologs)和旁系同源基因(Paralogs)。</p>
<ul>
<li>直系同源基因</li>
</ul>
<p>直系同源基因是指分布于两种或两种以上物种的基因组中，在进化上起源于一个祖先基因并垂直传递的同源基因，直系同源基因之间的功能高度保守，有些近乎相同。</p>
<ul>
<li>旁系同源基因</li>
</ul>
<p>旁系同源基因是指同一基因组(或同系物种的基因组)中，由于祖先基因的基因复制产生的同源基因。旁系同源基因尽管在结构上具有一定程度的相似性，但是他们的功能可能相似，也可能并不相似，甚至失去功能变成了假基因。</p>
<a id="more"></a>
<h2 id="基因家族及其扩增"><a href="#基因家族及其扩增" class="headerlink" title="基因家族及其扩增"></a>基因家族及其扩增</h2><p>基因复制对基因组中的基因家族扩增起着非常重要的作用。复制模式主要有三种：染色体片段复制(Segmental duplication)、串联复制(Tandem duplication)以及反转录转座(Retrotransposition)</p>
<ul>
<li>染色体片段复制</li>
</ul>
<p>大部分植物都经历过古老的全基因组复制事件，它是一种大规模的染色体倍增事件，一次性增加一个物种所有基因的剂量，导致基因组中保留着大量染色体倍增的片段。全基因组复制造成的重复区通常是一大片区域中所有基因的重复，而不是单个基因或几个基因的重复。</p>
<ul>
<li>串联复制</li>
</ul>
<p>串联复制主要发生在染色体重组区域，串联复制形成的基因家族成员通常紧密排列在同一条染色体上，形成一个序列相似、功能相近的基因簇。</p>
<ul>
<li>反转录转座</li>
</ul>
<p>反转录转座是指件已经转录和剪切的mRNA，再经过逆转录过程形成cDNA，然后随机插入到染色体的某一位置形成新的重复基因的过程。经反转录转座形成的新基因往往由于缺少必要的调控序列，通常都是不能表达的假基因。</p>
<blockquote>
<p>许多重要的基因家族在基因组中成簇存在，即同一基因家族的不同成员在基因组中串联重复排列。这些成簇存在的基因是种系生殖细胞在减数分裂过程中，通过染色体不等交换以及基因转换形成的。一些基因超家族通常含有成簇和分散存在的基因，成簇存在的基因(通常组成多基因家族)具有相似的功能，而分散存在的基因一般具有不同的功能。</p>
</blockquote>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>伪码农，R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180401/78JFehmBF4.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;同源基因&quot;&gt;&lt;a href=&quot;#同源基因&quot; class=&quot;headerlink&quot; title=&quot;同源基因&quot;&gt;&lt;/a&gt;同源基因&lt;/h2&gt;&lt;p&gt;同源基因包括直系同源基因(Orthologs)和旁系同源基因(Paralogs)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直系同源基因&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直系同源基因是指分布于两种或两种以上物种的基因组中，在进化上起源于一个祖先基因并垂直传递的同源基因，直系同源基因之间的功能高度保守，有些近乎相同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;旁系同源基因&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;旁系同源基因是指同一基因组(或同系物种的基因组)中，由于祖先基因的基因复制产生的同源基因。旁系同源基因尽管在结构上具有一定程度的相似性，但是他们的功能可能相似，也可能并不相似，甚至失去功能变成了假基因。&lt;/p&gt;
    
    </summary>
    
      <category term="bioinformatics" scheme="https://ytlogos.github.io/categories/bioinformatics/"/>
    
    
      <category term="Brassica" scheme="https://ytlogos.github.io/tags/Brassica/"/>
    
  </entry>
  
  <entry>
    <title>油菜形成、进化及基因家族概况(二)</title>
    <link href="https://ytlogos.github.io/2018/03/21/%E6%B2%B9%E8%8F%9C%E5%BD%A2%E6%88%90%E5%8F%8A%E8%BF%9B%E5%8C%96(%E4%BA%8C)/"/>
    <id>https://ytlogos.github.io/2018/03/21/油菜形成及进化(二)/</id>
    <published>2018-03-21T13:19:05.000Z</published>
    <updated>2018-03-29T03:45:27.124Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180329/0L8a4haFDJ.png?imageslim" alt="mark"></p>
<h2 id="基因家族"><a href="#基因家族" class="headerlink" title="基因家族"></a>基因家族</h2><p>由一个共同的祖先基因经过重复(duplication)和突变(mutation)产生的、外显子中具有相似的序列的一组相关基因称为基因家族(gene family)。基因重复主要有三种形式：片段复制、串联重复和逆转录转座或其它转座事件等，基因重复后可以彼此形成基因簇(gene clusters)，同一家族中的成员有时紧密排列在一起成为一个基因簇；更多时候他们却分散在同一染色体的不同部位，甚至位于不同染色体上，具有不同的表达调控模式。</p>
<a id="more"></a>
<h2 id="假基因"><a href="#假基因" class="headerlink" title="假基因"></a>假基因</h2><p>在多基因家族中，某些成员并不产生有功能的基因产物，这些基因称为假基因(pseudogene)。假基因与有功能的基因同源，原来可能是有功能的基因，但由于缺失、倒位或点突变，使这一基因失去活性，成为无功能基因。与相应的正常基因相比，假基因往往缺少正常基因的内含子，两侧具有顺向重复序列。据推测假基因的来源之一可能是基因经过转录后生成的RNA的前体通过剪切失去内含子形成mRNA，如果mRNA经反复转录产生cDNA，再整合到染色体DNA中，便有可能成为假基因，因此该假基因是没有内含子的，在这个过程中，可能同时会发生缺失、倒位或点突变等变化，从而使假基因不能表达。假基因一般缺乏必要的启动子序列和缺乏一个或多个具有活性的成员中特有的内含子序列。</p>
<h2 id="DNA重复"><a href="#DNA重复" class="headerlink" title="DNA重复"></a>DNA重复</h2><p>DNA重复通常是指DNA片段数的增加，它可以是一个完整基因的重复(基因重复)、基因的一部分重复、一个完整染色体的重复(非整倍体)或整个基因组的重复(多倍体)。基因家族是由于连续的基因重复所造成的。非整倍体常导致生物体不育，而基因组重复只是增加基因拷贝数，并不产生新的基因，对基因组的复杂性并没有改变。从基因组计划的角度来看，更多的是考虑单个基因或一些基因的重复，而不是整个基因组的重复。</p>
<h2 id="超基因家族"><a href="#超基因家族" class="headerlink" title="超基因家族"></a>超基因家族</h2><p>多基因家族是一类具有序列同源性及功能相似性的基因；而超基因家族是一类具有序列同源性而不具有相似功能的基因。</p>
<h2 id="基因簇"><a href="#基因簇" class="headerlink" title="基因簇"></a>基因簇</h2><p>许多重要的基因家族在基因组中成簇存在，也即同一基因家族的不同成员在基因组中重复串联排列。这些成簇存在的基因是种系生殖细胞在减数分裂过程中通过染色体不等交换和基因转换形成的。成簇存在的基因(通常组成多基因家族)具有相似的功能，而分散存在的基因往往具有不同的功能，当然也有例外。分散存在的基因家族一般认为是通过RNA逆转录、随后整合到基因组中形成的。整合序列(integrated sequence)或逆转录序列(retrosequence)来源于基因的RNA转录本，因此无内含子。大多数逆转录序列变为不具功能的逆转录假基因(retropesudogene)，只有极少数逆转录序列保留了功能。</p>
<h2 id="基因家族形成的分子机制"><a href="#基因家族形成的分子机制" class="headerlink" title="基因家族形成的分子机制"></a>基因家族形成的分子机制</h2><ul>
<li>基因重复和点突变</li>
</ul>
<p>基因发生重复的主要分子机制包括多倍体化、串联重复及逆转录转座。多倍体化导致了许多基因家族的形成，串联重复参与了成簇存在的基因家族的进化，重复的DNA区域可以小于或大于一个基因的长度，但在基因家族的进化过程中，整个基因的重复尤为重要。在种系减数分裂过程中，染色体不等交换引起基因串联重复，一旦一个基因簇形成，不等交换率就会升高。在具有相似功能成员的多基因家族中，频繁的染色体不等交换导致了家族成员的协同进化。</p>
<ul>
<li>自然选择和随机漂变</li>
</ul>
<p>任何重复基因或多拷贝基因，如果被表达且具有功能，则正经历着纯化性自然选择(purifying selection)，多拷贝基因的进化率比单个基因的突变率低很多。自然选择限制程度随基因冗余而减弱，只要有一个基因保留其功能，有害的突变就有可能富集。对于大对数基因家族来说，有害突变的积累可被纯化性选择阻止，纯化性自然选择可以检测到具有功能的完整基因的数目。使突变基因拷贝数增加或减少的协同进化有利于自然选择。<br>正向自然选择(positive selection)是在重复基因获得新功能时发生的。许多重复基因产生后加快了氨基酸的替代，氨基酸替代可以通过同义及非同义突变的频率进行估计。<br>基因重复的另一后果是基因表达模式的变化，也即多拷贝基因的功能特化或亚功能化。这种变化对于参与发育过程的转录因子及其他蛋白尤为重要，这类基因功能的变化与生物的形态学进化直接相关。</p>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>伪码农，R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180329/0L8a4haFDJ.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;基因家族&quot;&gt;&lt;a href=&quot;#基因家族&quot; class=&quot;headerlink&quot; title=&quot;基因家族&quot;&gt;&lt;/a&gt;基因家族&lt;/h2&gt;&lt;p&gt;由一个共同的祖先基因经过重复(duplication)和突变(mutation)产生的、外显子中具有相似的序列的一组相关基因称为基因家族(gene family)。基因重复主要有三种形式：片段复制、串联重复和逆转录转座或其它转座事件等，基因重复后可以彼此形成基因簇(gene clusters)，同一家族中的成员有时紧密排列在一起成为一个基因簇；更多时候他们却分散在同一染色体的不同部位，甚至位于不同染色体上，具有不同的表达调控模式。&lt;/p&gt;
    
    </summary>
    
      <category term="bioinformatics" scheme="https://ytlogos.github.io/categories/bioinformatics/"/>
    
    
      <category term="Brassica" scheme="https://ytlogos.github.io/tags/Brassica/"/>
    
  </entry>
  
  <entry>
    <title>油菜形成、进化及基因家族概况</title>
    <link href="https://ytlogos.github.io/2018/03/20/%E6%B2%B9%E8%8F%9C%E5%BD%A2%E6%88%90%E5%8F%8A%E8%BF%9B%E5%8C%96/"/>
    <id>https://ytlogos.github.io/2018/03/20/油菜形成及进化/</id>
    <published>2018-03-20T13:19:05.000Z</published>
    <updated>2018-03-28T11:56:26.070Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180328/JK3HalKdab.png?imageslim" alt="mark"></p>
<h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>十字花科祖先于2400-4000万年前出现，然后拟南芥与芸薹属在1200-2000万年前分化，之后不久芸薹属经历了特有的基因组三倍化，而后又经历了大规模的基因丢失、基因获得和包括部分复制和部分丢失的染色体重排。芸薹属两个重要的二倍体基本种白菜油菜(AA,2n=20)与甘蓝(CC,2n=18)于460万年前分化。甘蓝型油菜是由白菜型油菜和甘蓝通过种间自然杂交后又经染色体加倍而形成的一个异源四倍体。因此甘蓝型油菜基因组中通常会含有2个或2个以上的重复基因序列。</p>
<a id="more"></a>
<h2 id="转录因子"><a href="#转录因子" class="headerlink" title="转录因子"></a>转录因子</h2><p>在植物生长发育过程中，植物体需要对各种功能相关基因表达进行精确调控，从而对不同环境、组织和发育信号等作出相应的调节反应，其中转录因子在基因的表达调控中起着关键性作用。大部分真核生物中基因的表达很大程度上为转录水平的调控，这一调控是由多个不同蛋白质族群间的相互协调来达到，这些蛋白统称为转录因子，一般来说可以识别它们所调控的基因的启动子区域内特定的DNA序列的蛋白。通过蛋白之间的相互作用，转录因子调节RNA聚合酶Ⅱ的激活以及mRNA的合成。</p>
<h3 id="转录因子结构"><a href="#转录因子结构" class="headerlink" title="转录因子结构"></a>转录因子结构</h3><p>转录因子一般由4个功能区域组成：DNA结合域、转录调控区、寡聚化位点以及核定位信号。转录因子通过这些功能区域进入细胞核，与启动子中的顺式作用元件或其它转录因子的功能区域相互作用来调控基因转录表达。DNA结合域是指转录因子中能够识别并结合DNA顺式作用元件的一段氨基酸序列。同类型转录因子中DNA结合域的氨基酸序列是比较保守的，这决定了转录因子与顺式作用元件间识别与结合的特异性。转录调控区包括转录激活区以及转录抑制区，这一区域决定了同类转录因子间的差异，使之具有不同的功能。核定位信号控制转录因子进入细胞核的过程，该区域富含精氨酸和赖氨酸残基。寡聚化位点具有很保守的氨基酸序列，它是不同转录因子借以发生相互作用的功能域，形成同源或异源二聚体。<br>转录因子基因结构可以通过<strong>Gene Structure Display Server 2.0(GSDS2.0)</strong>进行分析。</p>
<h3 id="串联复制"><a href="#串联复制" class="headerlink" title="串联复制"></a>串联复制</h3><p>如果两个基因中间间隔有不多于5个基因且属于同一个基因家族，那么这两个基因称为串联复制。用<strong>MCScanX</strong>中的<code>mcscanx</code>对拟南芥基因组和甘蓝型油菜基因组分别做共线性分析，若一个基因与另一个基因有共线性关系，其周围有两对以上基因都是共线性关系，则这两个基因为部分复制。另外利用<strong>MCScanX</strong>中的<code>add ka and ks to collinearity</code>模块计算共线性关系基因对的Ks(同义替换)值，再利用T=Ks/2λ来推测部分复制发生的时间，对于十字花科而言，λ为1.5*10<sup>-8</sup>。</p>
<h3 id="转录因子理化性质"><a href="#转录因子理化性质" class="headerlink" title="转录因子理化性质"></a>转录因子理化性质</h3><p>在<strong>ExPASy</strong>中对拟南芥和推测出来的甘蓝型油菜基因家族成员的氨基酸序列进行分析，获得它们的理论等电点(pIs)以及蛋白质的相对分子量(Mw)。</p>
<h2 id="多倍化"><a href="#多倍化" class="headerlink" title="多倍化"></a>多倍化</h2><p>多倍化是物种进化的重要动力，多数高等植物在进化过程中都经历了不同水平的多倍化。十字花科物种都经历了三倍化。拟南芥与白菜分化自同一祖先物种。大约20-40M，拟南芥与白菜的共同祖先发生了一次基因组水平上的复制事件，称为α事件。芸薹属物种在此后又经历了一次基因组水平三倍化事件。在5-9M，甘蓝与白菜的共同祖先经历了一次基因组水平三倍化，白菜与甘蓝分化时间大约在4M。相较于拟南芥，甘蓝和白菜各发生了一次基因组复制。甘蓝型油菜大约在7500~12500年前由白菜和甘蓝天然杂交形成。物种的进化实质是基因的进化，多倍体事件是基因家族扩张的主要动力，在多倍化之后，基因数目呈倍数增长。</p>
<h2 id="进化分析"><a href="#进化分析" class="headerlink" title="进化分析"></a>进化分析</h2><h3 id="基因家族聚类"><a href="#基因家族聚类" class="headerlink" title="基因家族聚类"></a>基因家族聚类</h3><p>同源的蛋白质可以分为直系同源与旁系同源，当同源是基因复制的结果，两份拷贝在一个物种的历史上是平行演化的，这样的基因被称为旁系同源基因。当同源是物种形成的结果，基因的历史反映了物种的历史，被称为直系同源；直系同源是不同物种内的同源序列，它们是来自于物种形成时的共同祖先基因，通常认为直系同源基因具有相似的生物学功能。</p>
<h3 id="假基因"><a href="#假基因" class="headerlink" title="假基因"></a>假基因</h3><p>对不能转录或转录后生成无功能蛋白质的基因。假基因在及基因组中形成稳定的和无活性的拷贝，由活化的原始基因突变而来(复制突变或者加工型假基因)。这是因为存在着在某个阶段伤及基因表达的一种或多种缺陷(如启动子错误、有缺陷的剪接信号、框架中有终止信号等)之故。</p>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>伪码农，R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180328/JK3HalKdab.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;起源&quot;&gt;&lt;a href=&quot;#起源&quot; class=&quot;headerlink&quot; title=&quot;起源&quot;&gt;&lt;/a&gt;起源&lt;/h2&gt;&lt;p&gt;十字花科祖先于2400-4000万年前出现，然后拟南芥与芸薹属在1200-2000万年前分化，之后不久芸薹属经历了特有的基因组三倍化，而后又经历了大规模的基因丢失、基因获得和包括部分复制和部分丢失的染色体重排。芸薹属两个重要的二倍体基本种白菜油菜(AA,2n=20)与甘蓝(CC,2n=18)于460万年前分化。甘蓝型油菜是由白菜型油菜和甘蓝通过种间自然杂交后又经染色体加倍而形成的一个异源四倍体。因此甘蓝型油菜基因组中通常会含有2个或2个以上的重复基因序列。&lt;/p&gt;
    
    </summary>
    
      <category term="bioinformatics" scheme="https://ytlogos.github.io/categories/bioinformatics/"/>
    
    
      <category term="Brassica" scheme="https://ytlogos.github.io/tags/Brassica/"/>
    
  </entry>
  
  <entry>
    <title>生物信息学学习笔记（八）</title>
    <link href="https://ytlogos.github.io/2018/03/07/%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89/"/>
    <id>https://ytlogos.github.io/2018/03/07/生物信息学学习笔记（八）/</id>
    <published>2018-03-07T13:19:05.000Z</published>
    <updated>2018-03-21T03:27:44.135Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180309/E3bGF58F5a.png?imageslim" alt="mark"></p>
<ul>
<li>WRKY转录因子是高等植物中10个最大的转录因子家族之一，其N-末端含有高度保守的WRKYGQK氨基酸序列。WRKY蛋白的N-端均含有1个或两个由近60个氨基酸组成的WRKY结构域，C-端均含有1个锌指结构，二者是WRKY特异性与启动子中W-box序列（C/T）TGAC（T/C）结合必不可少的组件，其中WRKY结构域中含有一段高度保守的WRKYGQK七肽序列（或者为WRKYGEK、WRKYGKK）。</li>
</ul>
<a id="more"></a>
<ul>
<li><p>作为转录因子，WRKY蛋白参与对细胞内特定基因的转录调控，从而产生相应的细胞反应来应对不同的外界刺激，这些刺激包括非生物胁迫和生物胁迫。WRKY转录因子也广泛参与调控植物的生长发育过程，如种子发育过程、胚胎形成、叶片衰老和新陈代谢等过程。</p>
</li>
<li><p>调控开花的四条信号途径</p>
<ul>
<li>光周期途径</li>
<li>春化途径</li>
<li>自主途径</li>
<li>赤霉素(GA)途径</li>
</ul>
</li>
</ul>
<p>光周期途径：光周期途径中相关基因的突变体，仅在光照条件下开花时间延迟<br>春化途径：通过抑制开花抑制子FLC的转录,从而促进开花<br>自主途径：独立于光周期途径，使得那些在长光照下迅速开花的植物如拟南芥在短光照条件下最终也能开花。自主途径中的相关复合物通过限制FLC mRNA的积累，从而促使开花<br>GA途径：GA合成及GA信号转导相关的突变体，在短光照条件下，开花会延迟很长时间，说明在没有长光照促使开花的条件下，GA是一种刺激植物开花的重要物质</p>
<blockquote>
<p>四条途径可以独立调控开花过程，但是它们有着共同的下游目标基因CO和FLC。位于CO和FLC下游的开花整合因子FT、LFY和SOC1，通过整合开花途径输出的信号，激活花分生组织特异性基因LFY和APl的表达，从而启动开花。其中FT是一个长距离信号，其蛋白通过韧皮部从叶片(伴胞细胞)转移到茎端，与FD蛋白相互作用，激活APl的表达。LFY既是开花时间基因，又是花分生组织特性基因，直接调控靶基因APl的表达。SOC1受四条开花途径的正调控，并认为可能是四条开花途径的一个整合子。SOC1可被CO的过量表达诱导和FT的过量表达快速激活。</p>
<p>WRKY蛋白质通过特异性结合靶基因启动子区域的(T)TGAC(C/T)(W-box)序列来调控相应基因的表达，从而在植物生长发育、形态建成、物质代谢和耐逆抗病等方面发挥生物学功能。</p>
</blockquote>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180309/E3bGF58F5a.png?imageslim" alt="mark"></p>
<p>关于cDNA和CDS以及ORF的区别<br>mRNA是由编码区(CDS)、上游的5’和下游的3’非编码区组成，真核生物的mRNA的5’端带有7-甲基鸟苷-三磷酸帽子结构，3’端有多腺苷酸尾巴，但是NCBI中的mRNA序列实际上是cDNA序列，即经过反转录得到的与RNA序列互补的DNA序列，一般不包括3’多腺苷酸尾巴。一个cDNA序列被称为一个转录子，第一个碱基所在的位置为转录起始位点(TSS)，cDNA都是由外显子组成，但是编码蛋白质的外显子只有一个，即CDS(Coding Sequence)，这段序列也就是一个ORF区，也就是这个cDNA的ORF序列，参与特定基因转录及其调控的TSS上游序列称为启动子。</p>
<blockquote>
<p>5’UTR-CDS-3’UTR=cDNA,cDNA包含CDS</p>
</blockquote>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180313/hlEH5EmfIJ.png?imageslim" alt="mark"></p>
<p><img src="http://ov520p4qw.bkt.clouddn.com/ytlogos/180313/KCeLhe4gli.png?imageslim" alt="mark"></p>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410<br>Email: tyan@zju.edu.cn<br>QQ: 1051927088<br>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a><br>JianShu: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a><br>Blog: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
<h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>严涛<br>浙江大学作物遗传育种在读研究生<br>伪码农，R语言爱好者，爱开源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ov520p4qw.bkt.clouddn.com/ytlogos/180309/E3bGF58F5a.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WRKY转录因子是高等植物中10个最大的转录因子家族之一，其N-末端含有高度保守的WRKYGQK氨基酸序列。WRKY蛋白的N-端均含有1个或两个由近60个氨基酸组成的WRKY结构域，C-端均含有1个锌指结构，二者是WRKY特异性与启动子中W-box序列（C/T）TGAC（T/C）结合必不可少的组件，其中WRKY结构域中含有一段高度保守的WRKYGQK七肽序列（或者为WRKYGEK、WRKYGKK）。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="bioinformatics" scheme="https://ytlogos.github.io/categories/bioinformatics/"/>
    
    
      <category term="转录因子" scheme="https://ytlogos.github.io/tags/%E8%BD%AC%E5%BD%95%E5%9B%A0%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>利用ggseqlogo绘制seqlogo图</title>
    <link href="https://ytlogos.github.io/2018/02/19/%E5%88%A9%E7%94%A8ggseqlogo%E7%BB%98%E5%88%B6seqlogo%E5%9B%BE/"/>
    <id>https://ytlogos.github.io/2018/02/19/利用ggseqlogo绘制seqlogo图/</id>
    <published>2018-02-19T04:19:05.000Z</published>
    <updated>2018-03-07T14:37:11.352Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq9.png" alt=""></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>sequence logo</strong>图用来可视化一段序列某个位点的保守性，据根提供的序列组展示位点信息。这方面有很多在线小工具可以完成，这里使用R包<a href="https://github.com/omarwagih/ggseqlogo" target="_blank" rel="external"><strong>ggseqlogo</strong></a>进行可视化。</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装方式有两种</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#直接从CRAN中安装</span></div><div class="line"><span class="keyword">install</span>.packages(<span class="string">"ggseqlogo"</span>)</div><div class="line"><span class="comment">#从GitHub中安装</span></div><div class="line">devtools::<span class="keyword">install</span>.github(<span class="string">"omarwagih/ggseqlogo"</span>)</div></pre></td></tr></table></figure>
<h2 id="数据加载"><a href="#数据加载" class="headerlink" title="数据加载"></a>数据加载</h2><p><strong>ggseqlogo</strong>提供了测试数据<code>ggseqlogo_sample</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#加载包</div><div class="line">library(ggplot2)</div><div class="line">library(ggseqlogo)</div><div class="line">#加载数据</div><div class="line">data(ggseqlogo_sample)</div></pre></td></tr></table></figure></p>
<p><code>ggseqlogo_sample</code>数据集是一个列表，里面包含了三个数据集：</p>
<ul>
<li>seqs_dna:12种转录因子的结合位点序列</li>
<li>pfms_dna:四种转录因子的位置频率矩阵</li>
<li>seqs_aa:一组激动酶底物磷酸化位点序列</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#seqs_dna</div><div class="line">head(seqs_dna)[1]</div></pre></td></tr></table></figure>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">## $MA0001<span class="number">.1</span></div><div class="line">##  [<span class="number">1</span>] <span class="string">"CCATATATAG"</span> <span class="string">"CCATATATAG"</span> <span class="string">"CCATAAATAG"</span> <span class="string">"CCATAAATAG"</span> <span class="string">"CCATAAATAG"</span></div><div class="line">##  [<span class="number">6</span>] <span class="string">"CCATAAATAG"</span> <span class="string">"CCATAAATAG"</span> <span class="string">"CCATATATGG"</span> <span class="string">"CCATATATGG"</span> <span class="string">"CCAAATATAG"</span></div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#pfms_dna</span></div><div class="line"><span class="function"><span class="title">head</span><span class="params">(pfms_dna)</span></span>[<span class="number">1</span>]</div></pre></td></tr></table></figure>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">## $MA0018<span class="number">.2</span></div><div class="line">##   [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>] [,<span class="number">5</span>] [,<span class="number">6</span>] [,<span class="number">7</span>] [,<span class="number">8</span>]</div><div class="line">## A    <span class="number">0</span>    <span class="number">0</span>   <span class="number">11</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">2</span>    <span class="number">8</span></div><div class="line">## C    <span class="number">1</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">9</span>    <span class="number">0</span>    <span class="number">3</span>    <span class="number">7</span>    <span class="number">0</span></div><div class="line">## G    <span class="number">1</span>   <span class="number">10</span>    <span class="number">0</span>    <span class="number">2</span>   <span class="number">10</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">1</span></div><div class="line">## T    <span class="number">9</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">8</span>    <span class="number">1</span>    <span class="number">2</span></div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#seqs_aa</span></div><div class="line"><span class="function"><span class="title">head</span><span class="params">(seqs_aa)</span></span>[<span class="number">1</span>]</div></pre></td></tr></table></figure>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">## $AKT1</div><div class="line">##   [<span class="number">1</span>] <span class="string">"VVGARRSSWRVVSSI"</span> <span class="string">"GPRSRSRSRDRRRKE"</span> <span class="string">"LLCLRRSSLKAYGNG"</span></div><div class="line">##   [<span class="number">4</span>] <span class="string">"TERPRPNTFIIRCLQ"</span> <span class="string">"LSRERVFSEDRARFY"</span> <span class="string">"PSTSRRFSPPSSSLQ"</span></div></pre></td></tr></table></figure>
<h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggplot()+geom_logo(seqs_dna$MA0001.1)+theme_logo()</div></pre></td></tr></table></figure>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq1.png" alt=""><br><strong>ggseqlogo</strong>提供了一个直接绘图的函数<code>ggseqlogo()</code>,这是一个包装函数。下面命令结果同上面的。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">ggseqlogo</span><span class="params">(seqs_dna<span class="variable">$MA0001</span>.<span class="number">1</span>)</span></span></div></pre></td></tr></table></figure></p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p><strong>ggseqlogo</strong>支持以下几种类型数据输入：</p>
<ul>
<li>序列</li>
<li>矩阵</li>
</ul>
<p>下面是使用数据中的位置频率矩阵生成的seqlogo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggseqlogo(pfms_dna$MA0018.2)</div></pre></td></tr></table></figure></p>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq2.png" alt=""></p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><strong>ggseqlogo</strong>通过<code>method</code>选项支持两种序列标志生成方法：<code>bits</code>和<code>probability</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p1 &lt;- ggseqlogo(seqs_dna$MA0001.1, method=&quot;bits&quot;)</div><div class="line">p2 &lt;- ggseqlogo(seqs_dna$MA0001.1, method=&quot;prob&quot;)</div><div class="line">gridExtra::grid.arrange(p1,p2)</div></pre></td></tr></table></figure></p>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq3.png" alt=""></p>
<h2 id="序列类型"><a href="#序列类型" class="headerlink" title="序列类型"></a>序列类型</h2><p><strong>ggseqlogo</strong>支持氨基酸、DNA和RNA序列类型，默认情况下<strong>ggseqlogo</strong>会自动识别数据提供的序列类型，也可以通过<code>seq_type</code>选项直接指定序列类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggseqlogo(seqs_aa$AKT1, seq_type=&quot;aa&quot;)</div></pre></td></tr></table></figure></p>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq4.png" alt=""></p>
<h2 id="自定义字母"><a href="#自定义字母" class="headerlink" title="自定义字母"></a>自定义字母</h2><p>通过<code>namespace</code>选项来定义自己想要的字母类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#用数字来代替碱基</div><div class="line">seqs_numeric &lt;- chartr(&quot;ATGC&quot;, &quot;1234&quot;, seqs_dna$MA0001.1)</div><div class="line">ggseqlogo(seqs_numeric, method=&quot;prob&quot;, namespace=1:4)</div></pre></td></tr></table></figure></p>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq5.png" alt=""></p>
<h2 id="配色"><a href="#配色" class="headerlink" title="配色"></a>配色</h2><p><strong>ggseqlogo</strong>可以使用<code>col_scheme</code>参数来设置配色方案，具体可参考<code>?list_col_schemes</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggseqlogo(seqs_dna$MA0001.1, col_scheme=&quot;base_pairing&quot;)</div></pre></td></tr></table></figure></p>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq6.png" alt=""></p>
<h2 id="自定义配色"><a href="#自定义配色" class="headerlink" title="自定义配色"></a>自定义配色</h2><p><strong>ggseqlogo</strong>提供函数<code>make_col_scheme</code>来自定义离散或者连续配色方案</p>
<h3 id="离散配色"><a href="#离散配色" class="headerlink" title="离散配色"></a>离散配色</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">csl &lt;- make_col_scheme(chars = c(&quot;A&quot;,&quot;T&quot;, &quot;C&quot;, &quot;G&quot;), groups = c(&quot;gr1&quot;,&quot;gr1&quot;, &quot;gr2&quot;,&quot;gr2&quot;), cols = c(&quot;purple&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;blue&quot;))</div><div class="line">ggseqlogo(seqs_dna$MA0001.1,col_scheme=csl)</div></pre></td></tr></table></figure>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq7.png" alt=""></p>
<h3 id="连续配色"><a href="#连续配色" class="headerlink" title="连续配色"></a>连续配色</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cs2 &lt;- make_col_scheme(chars = c(&quot;A&quot;, &quot;T&quot;, &quot;C&quot;, &quot;G&quot;), values = 1:4)</div><div class="line">ggseqlogo(seqs_dna$MA0001.1, col_scheme=cs2)</div></pre></td></tr></table></figure>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq8.png" alt=""></p>
<h2 id="同时绘制多个序列标志"><a href="#同时绘制多个序列标志" class="headerlink" title="同时绘制多个序列标志"></a>同时绘制多个序列标志</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggseqlogo(seqs_dna, ncol = 4)</div></pre></td></tr></table></figure>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq9.png" alt=""><br>上述命令实际上等同于</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ggplot()+geom_logo(<span class="name">seqs_dna</span>)+theme_logo()+</div><div class="line">  facet_wrap(~seq_group,ncol = <span class="number">4</span>,scales = <span class="string">"free_x"</span>)</div></pre></td></tr></table></figure>
<h2 id="自定义高度"><a href="#自定义高度" class="headerlink" title="自定义高度"></a>自定义高度</h2><p>通过创建矩阵可以生成每个标志的高度，还可以有负值高度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">set.seed(1234)</div><div class="line">custom_mat &lt;- matrix(rnorm(20), nrow = 4, dimnames = list(c(&quot;A&quot;,&quot;T&quot;,&quot;C&quot;, &quot;G&quot;)))</div><div class="line">ggseqlogo(custom_mat,method=&quot;custom&quot;,seq_type=&quot;dna&quot;)+</div><div class="line">  ylab(&quot;my custom height&quot;)</div></pre></td></tr></table></figure></p>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq10.png" alt=""></p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>可以通过<code>font</code>参数来设置字体，具体可参考<code>?list_fonts</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fonts &lt;- list_fonts(F)</div><div class="line">p_list &lt;- lapply(fonts, function(f)&#123;</div><div class="line">  ggseqlogo(seqs_dna$MA0001.1,font=f)+ggtitle(f)</div><div class="line">&#125;)</div><div class="line">do.call(gridExtra::grid.arrange,c(p_list, ncol=4))</div></pre></td></tr></table></figure></p>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq11.png" alt=""></p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释的话跟<strong>ggplot2</strong>是一样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ggplot()+</div><div class="line">  annotate(&quot;rect&quot;, xmin = 0.5, xmax = 3.5, ymin = -0.05, ymax = 1.9, alpha=0.1, col=&quot;black&quot;, fill=&quot;yellow&quot;)+</div><div class="line">  geom_logo(seqs_dna$MA0001.1, stack_width = 0.9)+</div><div class="line">  annotate(&quot;segment&quot;, x=4, xend = 8, y=1.2, yend = 1.2, size=2)+</div><div class="line">  annotate(&quot;text&quot;, x=6, y=1.3, label=&quot;Text annotation&quot;)+</div><div class="line">  theme_logo()</div></pre></td></tr></table></figure></p>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq12.png" alt=""></p>
<h2 id="图形组合"><a href="#图形组合" class="headerlink" title="图形组合"></a>图形组合</h2><p>将<strong>ggseqlogo</strong>生成的图形与<strong>ggplot2</strong>生成的图形组合在一起。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">p1 &lt;- ggseqlogo(seqs_dna$MA0008.1)+theme(axis.text.x = element_blank())</div><div class="line">aln &lt;- data.frame(</div><div class="line">  letter=strsplit(&quot;AGATAAGATGATAAAAAGATAAGA&quot;, &quot;&quot;)[[1]],</div><div class="line">  species=rep(c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;), each=8),</div><div class="line">  x=rep(1:8,3)</div><div class="line">)</div><div class="line">aln$mut &lt;- &quot;no&quot;</div><div class="line">aln$mut[c(2,15,20,23)]=&quot;yes&quot;</div><div class="line">p2 &lt;- ggplot(aln, aes(x, species)) +</div><div class="line">  geom_text(aes(label=letter, color=mut, size=mut)) + </div><div class="line">  scale_x_continuous(breaks=1:10, expand = c(0.105, 0)) + xlab(&apos;&apos;) + </div><div class="line">  scale_color_manual(values=c(&apos;black&apos;, &apos;red&apos;)) + </div><div class="line">  scale_size_manual(values=c(5, 6)) + </div><div class="line">  theme_logo() + </div><div class="line">  theme(legend.position = &apos;none&apos;, axis.text.x = element_blank()) </div><div class="line">bp_data &lt;- data.frame(</div><div class="line">  x=1:8, </div><div class="line">  conservation=sample(1:100, 8)</div><div class="line">)</div><div class="line">p3 &lt;- ggplot(bp_data, aes(x, conservation))+</div><div class="line">  geom_bar(stat = &quot;identity&quot;, fill=&quot;grey&quot;)+</div><div class="line">  theme_logo()+</div><div class="line">  scale_x_continuous(breaks = 1:10, expand = c(0.105, 0))+</div><div class="line">  xlab(&quot;&quot;)</div><div class="line">suppressMessages(require(cowplot))</div><div class="line">plot_grid(p1,p2,p3,ncol = 1, align = &quot;v&quot;)</div></pre></td></tr></table></figure></p>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/ggseq13.png" alt=""></p>
<h2 id="SessionInfo"><a href="#SessionInfo" class="headerlink" title="SessionInfo"></a>SessionInfo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sessionInfo()</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># R version 3.4.3 (2017-11-30)</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Platform: x86_64-pc-linux-gnu (64-bit)</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Running under: Ubuntu 17.10</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Matrix products: default</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># BLAS: /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># locale:</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [1] LC_CTYPE=zh_CN.UTF-8       LC_NUMERIC=C              </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [3] LC_TIME=zh_CN.UTF-8        LC_COLLATE=zh_CN.UTF-8    </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [5] LC_MONETARY=zh_CN.UTF-8    LC_MESSAGES=zh_CN.UTF-8   </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [7] LC_PAPER=zh_CN.UTF-8       LC_NAME=C                 </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [9] LC_ADDRESS=C               LC_TELEPHONE=C            </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C       </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># attached base packages:</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [1] stats     graphics  grDevices utils     datasets  methods   base     </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># other attached packages:</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [1] cowplot_0.9.2 ggseqlogo_0.1 ggplot2_2.2.1</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># loaded via a namespace (and not attached):</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [1] Rcpp_0.12.15     knitr_1.20       magrittr_1.5     munsell_0.4.3   </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [5] colorspace_1.3-2 rlang_0.2.0      stringr_1.3.0    plyr_1.8.4      </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [9] tools_3.4.3      grid_3.4.3       gtable_0.2.0     htmltools_0.3.6 </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [13] yaml_2.1.16      lazyeval_0.2.1   rprojroot_1.3-2  digest_0.6.15   </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [17] tibble_1.4.2     gridExtra_2.3    evaluate_0.10.1  rmarkdown_1.8   </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [21] labeling_0.3     stringi_1.1.6    compiler_3.4.3   pillar_1.1.0    </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [25] scales_0.5.0     backports_1.1.2</span></span></div></pre></td></tr></table></figure>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410</p>
<p>Email: tyan@zju.edu.cn</p>
<p>QQ: 1051927088</p>
<p>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a></p>
<p>简书: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a></p>
<p>博客: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://os3hnmzbp.bkt.clouddn.com/ggseq9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;sequence logo&lt;/strong&gt;图用来可视化一段序列某个位点的保守性，据根提供的序列组展示位点信息。这方面有很多在线小工具可以完成，这里使用R包&lt;a href=&quot;https://github.com/omarwagih/ggseqlogo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;ggseqlogo&lt;/strong&gt;&lt;/a&gt;进行可视化。&lt;/p&gt;
    
    </summary>
    
      <category term="可视化" scheme="https://ytlogos.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="seq_logo" scheme="https://ytlogos.github.io/tags/seq-logo/"/>
    
      <category term="ggseqlogo" scheme="https://ytlogos.github.io/tags/ggseqlogo/"/>
    
  </entry>
  
  <entry>
    <title>创建属于自己的调色板</title>
    <link href="https://ytlogos.github.io/2018/02/10/%E5%88%9B%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E8%B0%83%E8%89%B2%E6%9D%BF/"/>
    <id>https://ytlogos.github.io/2018/02/10/创建属于自己的调色板/</id>
    <published>2018-02-10T04:19:05.000Z</published>
    <updated>2018-02-28T04:01:09.751Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://os3hnmzbp.bkt.clouddn.com/palette.jpeg" alt=""></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们知道发表文章的时候不同杂志的配色方案是不同的，如果参加工作的话，不同公司的配色方案也是不一样的，每个人的色觉也是不一样的，所以如果可以创建属于自己的配色方案的话以后可视化就可以随心所欲了。</p>
<a id="more"></a>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>接下来我将基于下面的几种颜色创建属于我自己的调色板</p>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/color.png" alt=""></p>
<p>主要有以下几个方面：</p>
<ul>
<li>将颜色与其对应的十六进制矢量联系起来</li>
<li>创建访问十六进制矢量的函数</li>
<li>调色板命名</li>
<li>访问调用调色板</li>
<li>创建兼容<strong>ggplot2</strong>的尺度函数</li>
</ul>
<p>首先我们创建一个颜色变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">library(ggplot2)</div><div class="line">theme_set(theme_minimal())</div><div class="line">my_colors &lt;- c(</div><div class="line">  `purple` = &quot;#7b0099&quot;,</div><div class="line">  `yellow` = &quot;#ff9900&quot;,</div><div class="line">  `black`  = &quot;#221f1f&quot;,</div><div class="line">  `white`  = &quot;#f5f5f1&quot;,</div><div class="line">  `red`    = &quot;#e50914&quot;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>后续如果需要对颜色进行修改或添加都可以在这个颜色变量中进行。<br>下面创建一个可以从该变量中提取颜色对应的十六进制的函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#&apos; Function to extract my_colors as hex codes</div><div class="line">#&apos;</div><div class="line">#&apos; @param ... Character names of my_colors</div><div class="line">#&apos;</div><div class="line">my_cols &lt;- function(...)&#123;</div><div class="line">  cols &lt;- c(...)</div><div class="line">  </div><div class="line">  if (is.null(cols))</div><div class="line">    return(my_colors)</div><div class="line">  my_colors[cols]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时我们可以十分方便获取颜色的十六进制，下面演示一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">my_cols()</div></pre></td></tr></table></figure></p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">##    purple    yellow     black     white       red </div><div class="line">## <span class="string">"#7b0099"</span> <span class="string">"#ff9900"</span> <span class="string">"#221f1f"</span> <span class="string">"#f5f5f1"</span> <span class="string">"#e50914"</span></div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">my_cols</span><span class="params">(<span class="string">"purple"</span>)</span></span></div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#    purple </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># "#7b0099"</span></span></div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">my_cols</span><span class="params">(<span class="string">"purple"</span>,<span class="string">"yellow"</span>)</span></span></div></pre></td></tr></table></figure>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">##    purple    yellow </div><div class="line">## <span class="string">"#7b0099"</span> <span class="string">"#ff9900"</span></div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">my_cols</span><span class="params">(<span class="string">"yellow"</span>,<span class="string">"purple"</span>)</span></span></div></pre></td></tr></table></figure>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">##    yellow    purple </div><div class="line">## <span class="string">"#ff9900"</span> <span class="string">"#7b0099"</span></div></pre></td></tr></table></figure>
<p>此时我们可以在<strong>ggplot2</strong>中调用这些颜色<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#使用gapminder包中的数据集gapminder来演示</div><div class="line">library(gapminder)</div><div class="line">head(gapminder)</div></pre></td></tr></table></figure></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># # A tibble: 6 x 6</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#   country     continent  year lifeExp      pop gdpPercap</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 1 Afghanistan Asia       1952    28.8  8425333       779</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 2 Afghanistan Asia       1957    30.3  9240934       821</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 3 Afghanistan Asia       1962    32.0 10267083       853</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 4 Afghanistan Asia       1967    34.0 11537966       836</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 5 Afghanistan Asia       1972    36.1 13079460       740</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 6 Afghanistan Asia       1977    38.4 14880372       786</span></span></div></pre></td></tr></table></figure>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ggplot(<span class="name">gapminder</span>, aes(<span class="name">gdpPercap</span>, lifeExp))+</div><div class="line">  geom_point(<span class="name">color=my_cols</span>(<span class="string">"purple"</span>), size=2, alpha=0.<span class="number">8</span>)+</div><div class="line">  scale_x_log10()</div></pre></td></tr></table></figure>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/1-1.png" alt=""></p>
<h2 id="创建调色板"><a href="#创建调色板" class="headerlink" title="创建调色板"></a>创建调色板</h2><p>调色板就是一个颜色列表方便我们后面使用，将各种颜色组合搭配<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">my_palettes &lt;- list(</div><div class="line">  `main`  = my_cols(&quot;purple&quot;,&quot;yellow&quot;,&quot;red&quot;),</div><div class="line">  `cool`  = my_cols(&quot;purple&quot;,&quot;yellow&quot;),</div><div class="line">  `hot`   = my_cols(&quot;yellow&quot;,&quot;black&quot;,&quot;red&quot;),</div><div class="line">  `mixed` = my_cols(&quot;purple&quot;,&quot;yellow&quot;,&quot;white&quot;,&quot;red&quot;),</div><div class="line">  `bw`    = my_cols(&quot;black&quot;,&quot;white&quot;)</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>在这个颜色列表中实际上我们创建了好几种颜色组合，下面创建一个函数来访问并调用它们<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#&apos; Return function to interpolate a my_palettes</div><div class="line">#&apos;</div><div class="line">#&apos; @param palette Character name of palette in my_palettes</div><div class="line">#&apos; @param reverse Boolean indicating whether the palette should be reversed</div><div class="line">#&apos; @param ... Additional arguments to pass to colorRampPalette()</div><div class="line">#&apos;</div><div class="line">my_pal &lt;- function(palette=&quot;main&quot;, reverse=FALSE, ...)&#123;</div><div class="line">  pal &lt;- my_palettes[[palette]]</div><div class="line">  if (reverse) pal &lt;- rev(pal)</div><div class="line">  colorRampPalette(pal, ...)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该函数通过不同颜色组合名称从列表中获取一个颜色组合（默认条件下是<code>main</code>），同时可以设置是否颠倒颜色顺序，之后传递给函数colorRampPaette()创建调色板。因此其返回的是一个函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">my_pal(&quot;cool&quot;)</div></pre></td></tr></table></figure></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># function (n) </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># &#123;</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#     x &lt;- ramp(seq.int(0, 1, length.out = n))</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#     if (ncol(x) == 4L) </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#         rgb(x[, 1L], x[, 2L], x[, 3L], x[, 4L], maxColorValue = 255)</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#     else rgb(x[, 1L], x[, 2L], x[, 3L], maxColorValue = 255)</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># &#125;</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># &lt;bytecode: 0x55ade91b4b70&gt;</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># &lt;environment: 0x55ade91b3e20&gt;</span></span></div></pre></td></tr></table></figure>
<p>通过这个函数可以基于调色板返回不同数目的颜色，进而可以在原始颜色之间创建多级颜色梯度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">my_pal(&quot;cool&quot;)(10)</div></pre></td></tr></table></figure></p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">##  [<span class="number">1</span>] <span class="string">"#7B0099"</span> <span class="string">"#891188"</span> <span class="string">"#982277"</span> <span class="string">"#A73266"</span> <span class="string">"#B54455"</span> <span class="string">"#C45544"</span> <span class="string">"#D36533"</span></div><div class="line">##  [<span class="number">8</span>] <span class="string">"#E17622"</span> <span class="string">"#F08810"</span> <span class="string">"#FF9900"</span></div></pre></td></tr></table></figure>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pie(<span class="name">rep</span>(<span class="number">1</span>,<span class="number">10</span>), col = my_pal(<span class="string">"cool"</span>)(<span class="number">10</span>))</div></pre></td></tr></table></figure>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/2-1.png" alt=""></p>
<p>上图展示的10种颜色就是<code>my_pal(&quot;cool&quot;)(10)</code>返回的十六进制对应的颜色，这就为<strong>ggplot2</strong>中的尺度颜色函数创造了可能</p>
<h2 id="Scales-for-ggplot2"><a href="#Scales-for-ggplot2" class="headerlink" title="Scales for ggplot2"></a>Scales for ggplot2</h2><p><strong>ggplot2</strong>中颜色映射有<code>color</code>和<code>fill</code>即颜色和填充。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#&apos; Color scale constructor for my_colors</div><div class="line">#&apos; </div><div class="line">#&apos; @param palette Character name of palette in my_palettes</div><div class="line">#&apos; @param discrete Boolean indicating whether color aesthetic is discrete or not</div><div class="line">#&apos; @param reverse Boolean indicating whether the palette should be reversed</div><div class="line">#&apos; @param ... Additional arguments passed to discrete_scale() or scale_color_gradientn(), used #&apos; #&apos; respectively when discrete is TRUE or FALSE</div><div class="line">#&apos; </div><div class="line">scale_color_my &lt;- function(palette=&quot;main&quot;, discrete=TRUE, reverse=FALSE, ...)&#123;</div><div class="line">  pal &lt;- my_pal(palette = palette, reverse = reverse)</div><div class="line">  </div><div class="line">  if (discrete)&#123;</div><div class="line">    discrete_scale(&quot;colour&quot;, paste0(&quot;my_&quot;, palette), palette = pal, ...)</div><div class="line">  &#125;else&#123;</div><div class="line">    scale_color_gradientn(colours = pal(256), ...)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#&apos; Fill scale constructor for my_colors</div><div class="line">#&apos;</div><div class="line">#&apos; @param palette Character name of palette in my_palettes</div><div class="line">#&apos; @param discrete Boolean indicating whether color aesthetic is discrete or not</div><div class="line">#&apos; @param reverse Boolean indicating whether the palette should be reversed</div><div class="line">#&apos; @param ... Additional arguments passed to discrete_scale() or scale_color_gradientn(), used #&apos; #&apos; respectively when discrete is TRUE or FALSE</div><div class="line">#&apos; </div><div class="line">scale_fill_my &lt;- function(palette=&quot;main&quot;, discrete=TRUE, reverse=FALSE, ...)&#123;</div><div class="line">  pal &lt;- my_pal(palette = palette, reverse = reverse)</div><div class="line">  if (discrete)&#123;</div><div class="line">    discrete_scale(&quot;fill&quot;,paste0(&quot;my_&quot;, palette), palette = pal, ...)</div><div class="line">  &#125;else&#123;</div><div class="line">    scale_fill_gradientn(colours = pal(256), ...)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面每个函数都制定一个调色板（默认是<code>main</code>），调色板是基于离散变量或连续变量，以及是否颠倒颜色顺序，同时还传递给了相关的<strong>ggplot2</strong>函数。下面可以试试它们在绘图过程中的表现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ggplot(gapminder,aes(gdpPercap, lifeExp, color=continent))+</div><div class="line">  geom_point(size=2, alpha=0.8)+</div><div class="line">  scale_x_log10()+</div><div class="line">  scale_color_my()</div></pre></td></tr></table></figure></p>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/3-1.png" alt=""></p>
<p>我们可以更换调色板试试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ggplot(gapminder,aes(gdpPercap, lifeExp, color=continent))+</div><div class="line">  geom_point(size=2, alpha=0.8)+</div><div class="line">  scale_x_log10()+</div><div class="line">  scale_color_my(palette = &quot;hot&quot;)</div></pre></td></tr></table></figure>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/4-1.png" alt=""></p>
<p>如果是连续变量的话<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +</div><div class="line">    geom_point(size = 4, alpha = .8) +</div><div class="line">    scale_color_my(discrete = FALSE, palette = &quot;bw&quot;, reverse = TRUE)</div></pre></td></tr></table></figure></p>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/5-1.png" alt=""></p>
<p>上面是颜色，下面试试填充<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ggplot(mpg, aes(manufacturer, fill = manufacturer)) +</div><div class="line">    geom_bar() +</div><div class="line">    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +</div><div class="line">    scale_fill_my(palette = &quot;mixed&quot;, guide = &quot;none&quot;)</div></pre></td></tr></table></figure></p>
<p><img src="http://os3hnmzbp.bkt.clouddn.com/6-1.png" alt=""></p>
<h2 id="包的创建"><a href="#包的创建" class="headerlink" title="包的创建"></a>包的创建</h2><p>通过上面的内容可以看出，如果我们会创建包的话，将上述代码封装在一起再加上一些元素就形成了一个包，可以方便自己或他人后续使用。如果要创建包的话，可以学习<a href="https://twitter.com/hadleywickham" target="_blank" rel="external">Hadley Wickham</a>的书<a href="http://r-pkgs.had.co.nz/" target="_blank" rel="external">R packages</a>。</p>
<h2 id="SessionInfo"><a href="#SessionInfo" class="headerlink" title="SessionInfo"></a>SessionInfo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sessionInfo()</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># R version 3.4.3 (2017-11-30)</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Platform: x86_64-pc-linux-gnu (64-bit)</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Running under: Ubuntu 17.10</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Matrix products: default</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># BLAS: /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># locale:</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [1] LC_CTYPE=zh_CN.UTF-8       LC_NUMERIC=C              </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [3] LC_TIME=zh_CN.UTF-8        LC_COLLATE=zh_CN.UTF-8    </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [5] LC_MONETARY=zh_CN.UTF-8    LC_MESSAGES=zh_CN.UTF-8   </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [7] LC_PAPER=zh_CN.UTF-8       LC_NAME=C                 </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [9] LC_ADDRESS=C               LC_TELEPHONE=C            </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C       </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># attached base packages:</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [1] stats     graphics  grDevices utils     datasets  methods   base     </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># other attached packages:</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [1] gapminder_0.3.0 ggplot2_2.2.1  </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># loaded via a namespace (and not attached):</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [1] Rcpp_0.12.15     knitr_1.20       magrittr_1.5     munsell_0.4.3   </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [5] colorspace_1.3-2 rlang_0.2.0      stringr_1.3.0    plyr_1.8.4      </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  [9] tools_3.4.3      grid_3.4.3       gtable_0.2.0     utf8_1.1.3      </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [13] cli_1.0.0        htmltools_0.3.6  assertthat_0.2.0 yaml_2.1.16     </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [17] lazyeval_0.2.1   rprojroot_1.3-2  digest_0.6.15    tibble_1.4.2    </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [21] crayon_1.3.4     evaluate_0.10.1  rmarkdown_1.8    labeling_0.3    </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [25] stringi_1.1.6    compiler_3.4.3   pillar_1.1.0     scales_0.5.0    </span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># [29] backports_1.1.2</span></span></div></pre></td></tr></table></figure>
<hr>
<h2 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h2><p>wechat: yt056410</p>
<p>Email: tyan@zju.edu.cn</p>
<p>QQ: 1051927088</p>
<p>GitHub: <a href="https://github.com/YTLogos" target="_blank" rel="external">https://github.com/YTLogos</a></p>
<p>简书: <a href="http://www.jianshu.com/u/bd001545cf0b" target="_blank" rel="external">http://www.jianshu.com/u/bd001545cf0b</a></p>
<p>博客: <a href="https://ytlogos.github.io/">https://ytlogos.github.io/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://os3hnmzbp.bkt.clouddn.com/palette.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;我们知道发表文章的时候不同杂志的配色方案是不同的，如果参加工作的话，不同公司的配色方案也是不一样的，每个人的色觉也是不一样的，所以如果可以创建属于自己的配色方案的话以后可视化就可以随心所欲了。&lt;/p&gt;
    
    </summary>
    
      <category term="可视化" scheme="https://ytlogos.github.io/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="调色板" scheme="https://ytlogos.github.io/tags/%E8%B0%83%E8%89%B2%E6%9D%BF/"/>
    
  </entry>
  
</feed>
